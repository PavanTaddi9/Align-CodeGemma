[
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, nperseg=nperseg, noverlap=noverlap, timeaxis=timeaxis, nfft=nfft) for shape, nperseg, noverlap, timeaxis in stft_test_shapes for nfft in [None, nperseg, int(nperseg * 1.5), nperseg * 2]], dtype=default_dtypes, fs=[1.0, 16000.0], window=['boxcar', 'triang', 'blackman', 'hamming', 'hann'], detrend=['constant', 'linear', False], boundary=[None, 'even', 'odd', 'zeros'], padded=[True, False])\ndef testStftAgainstNumpy(self, *, shape, dtype, fs, window, nperseg, noverlap, nfft, detrend, boundary, padded, timeaxis):\n    is_complex = dtypes.issubdtype(dtype, np.complexfloating)\n    if is_complex and detrend is not None:\n        self.skipTest('Complex signal is not supported in lax-backed `signal.detrend`.')\n    kwds = dict(fs=fs, window=window, nfft=nfft, boundary=boundary, padded=padded, detrend=detrend, nperseg=nperseg, noverlap=noverlap, axis=timeaxis, return_onesided=not is_complex)\n\n    def osp_fun(x):\n        freqs, time, Pxx = osp_signal.stft(x, **kwds)\n        return (freqs.astype(_real_dtype(dtype)), time.astype(_real_dtype(dtype)), Pxx.astype(_complex_dtype(dtype)))\n    jsp_fun = partial(jsp_signal.stft, **kwds)\n    tol = {np.float32: 1e-05, np.float64: 1e-12, np.complex64: 1e-05, np.complex128: 1e-12}\n    if jtu.test_device_matches(['tpu']):\n        tol = _TPU_FFT_TOL\n    rng = jtu.rand_default(self.rng())\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(osp_fun, jsp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jsp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_signal_test.py",
    "function": "def _real_dtype(dtype):\n    return jnp.finfo(dtypes.to_inexact_dtype(dtype)).dtype"
  },
  {
    "test_code": "@jtu.sample_product([dict(xshape=xshape, yshape=yshape, nperseg=nperseg, noverlap=noverlap, timeaxis=timeaxis, nfft=nfft) for xshape, yshape, nperseg, noverlap, timeaxis in csd_test_shapes for nfft in [None, nperseg, int(nperseg * 1.5), nperseg * 2]], dtype=default_dtypes, fs=[1.0, 16000.0], window=['boxcar', 'triang', 'blackman', 'hamming', 'hann'], detrend=['constant', 'linear', False], scaling=['density', 'spectrum'], average=['mean'])\ndef testCsdAgainstNumpy(self, *, xshape, yshape, dtype, fs, window, nperseg, noverlap, nfft, detrend, scaling, timeaxis, average):\n    is_complex = dtypes.issubdtype(dtype, np.complexfloating)\n    if is_complex and detrend is not None:\n        self.skipTest('Complex signal is not supported in lax-backed `signal.detrend`.')\n    kwds = dict(fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, return_onesided=not is_complex, scaling=scaling, axis=timeaxis, average=average)\n\n    def osp_fun(x, y):\n        freqs, Pxy = osp_signal.csd(x, y, **kwds)\n        return (freqs.astype(_real_dtype(dtype)), Pxy.astype(_complex_dtype(dtype)))\n    jsp_fun = partial(jsp_signal.csd, **kwds)\n    tol = {np.float32: 1e-05, np.float64: 1e-12, np.complex64: 1e-05, np.complex128: 1e-12}\n    if jtu.test_device_matches(['tpu']):\n        tol = _TPU_FFT_TOL\n    rng = jtu.rand_default(self.rng())\n    args_maker = lambda: [rng(xshape, dtype), rng(yshape, dtype)]\n    self._CheckAgainstNumpy(osp_fun, jsp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jsp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_signal_test.py",
    "function": "def _real_dtype(dtype):\n    return jnp.finfo(dtypes.to_inexact_dtype(dtype)).dtype"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, nperseg=nperseg, noverlap=noverlap, timeaxis=timeaxis, nfft=nfft) for shape, _yshape, nperseg, noverlap, timeaxis in csd_test_shapes for nfft in [None, nperseg, int(nperseg * 1.5), nperseg * 2]], dtype=default_dtypes, fs=[1.0, 16000.0], window=['boxcar', 'triang', 'blackman', 'hamming', 'hann'], detrend=['constant', 'linear', False], scaling=['density', 'spectrum'], average=['mean'])\ndef testCsdWithSameParamAgainstNumpy(self, *, shape, dtype, fs, window, nperseg, noverlap, nfft, detrend, scaling, timeaxis, average):\n    is_complex = dtypes.issubdtype(dtype, np.complexfloating)\n    if is_complex and detrend is not None:\n        self.skipTest('Complex signal is not supported in lax-backed `signal.detrend`.')\n    kwds = dict(fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, return_onesided=not is_complex, scaling=scaling, axis=timeaxis, average=average)\n\n    def osp_fun(x, y):\n        freqs, Pxy = osp_signal.csd(x, y.copy(), **kwds)\n        return (freqs.astype(_real_dtype(dtype)), Pxy.astype(_complex_dtype(dtype)))\n    jsp_fun = partial(jsp_signal.csd, **kwds)\n    tol = {np.float32: 1e-05, np.float64: 1e-12, np.complex64: 1e-05, np.complex128: 1e-12}\n    if jtu.test_device_matches(['tpu']):\n        tol = _TPU_FFT_TOL\n    rng = jtu.rand_default(self.rng())\n    args_maker = lambda: [rng(shape, dtype)] * 2\n    self._CheckAgainstNumpy(osp_fun, jsp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jsp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_signal_test.py",
    "function": "def _real_dtype(dtype):\n    return jnp.finfo(dtypes.to_inexact_dtype(dtype)).dtype"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, nperseg=nperseg, noverlap=noverlap, timeaxis=timeaxis, nfft=nfft) for shape, nperseg, noverlap, timeaxis in welch_test_shapes for nfft in [None, nperseg, int(nperseg * 1.5), nperseg * 2]], dtype=default_dtypes, fs=[1.0, 16000.0], window=['boxcar', 'triang', 'blackman', 'hamming', 'hann'], detrend=['constant', 'linear', False], return_onesided=[True, False], scaling=['density', 'spectrum'], average=['mean', 'median'])\ndef testWelchAgainstNumpy(self, *, shape, dtype, fs, window, nperseg, noverlap, nfft, detrend, return_onesided, scaling, timeaxis, average):\n    if np.dtype(dtype).kind == 'c':\n        return_onesided = False\n        if detrend is not None:\n            raise unittest.SkipTest('Complex signal is not supported in lax-backed `signal.detrend`.')\n    kwds = dict(fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, return_onesided=return_onesided, scaling=scaling, axis=timeaxis, average=average)\n\n    def osp_fun(x):\n        freqs, Pxx = osp_signal.welch(x, **kwds)\n        return (freqs.astype(_real_dtype(dtype)), Pxx.astype(_real_dtype(dtype)))\n    jsp_fun = partial(jsp_signal.welch, **kwds)\n    tol = {np.float32: 1e-05, np.float64: 1e-12, np.complex64: 1e-05, np.complex128: 1e-12}\n    if jtu.test_device_matches(['tpu']):\n        tol = _TPU_FFT_TOL\n    rng = jtu.rand_default(self.rng())\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(osp_fun, jsp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jsp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_signal_test.py",
    "function": "def _real_dtype(dtype):\n    return jnp.finfo(dtypes.to_inexact_dtype(dtype)).dtype"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, nperseg=nperseg, noverlap=noverlap, timeaxis=timeaxis) for shape, nperseg, noverlap, timeaxis in welch_test_shapes], use_nperseg=[False, True], use_window=[False, True], use_noverlap=[False, True], dtype=jtu.dtypes.floating + jtu.dtypes.integer)\ndef testWelchWithDefaultStepArgsAgainstNumpy(self, *, shape, dtype, nperseg, noverlap, use_nperseg, use_noverlap, use_window, timeaxis):\n    if tuple(shape) == (2, 3, 389, 5) and nperseg == 17 and (noverlap == 13):\n        raise unittest.SkipTest('Test fails for these inputs')\n    kwargs = {'axis': timeaxis}\n    if use_nperseg:\n        kwargs['nperseg'] = nperseg\n    if use_window:\n        kwargs['window'] = jnp.array(osp_signal.get_window('hann', nperseg), dtype=dtypes.to_complex_dtype(dtype))\n    if use_noverlap:\n        kwargs['noverlap'] = noverlap\n\n    @jtu.ignore_warning(message='nperseg = 256 is greater than')\n    def osp_fun(x):\n        freqs, Pxx = osp_signal.welch(x, **kwargs)\n        return (freqs.astype(_real_dtype(dtype)), Pxx.astype(_real_dtype(dtype)))\n    jsp_fun = partial(jsp_signal.welch, **kwargs)\n    tol = {np.float32: 1e-05, np.float64: 1e-12, np.complex64: 1e-05, np.complex128: 1e-12}\n    if jtu.test_device_matches(['tpu']):\n        tol = _TPU_FFT_TOL\n    rng = jtu.rand_default(self.rng())\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(osp_fun, jsp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jsp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_signal_test.py",
    "function": "def _real_dtype(dtype):\n    return jnp.finfo(dtypes.to_inexact_dtype(dtype)).dtype"
  }
]