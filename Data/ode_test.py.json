[
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_disable_jit_odeint_with_vmap(self):\n    with jax.disable_jit():\n        t = jnp.array([0.0, 1.0])\n        x0_eval = jnp.zeros((5, 2))\n        f = lambda x0: odeint(lambda x, _t: x, x0, t)\n        jax.vmap(f)(x0_eval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_pend_grads(self):\n\n    def pend(_np, y, _, m, g):\n        theta, omega = y\n        return [omega, -m * omega - g * _np.sin(theta)]\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    args = (0.25, 9.8)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(pend, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(pend, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_weird_time_pendulum_grads(self):\n    \"\"\"Test that gradients are correct when the dynamics depend on t.\"\"\"\n\n    def dynamics(_np, y, t):\n        return _np.array([y[1] * -t, -1 * y[1] - 9.8 * _np.sin(y[0])])\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(dynamics, y0, ts, tol=tol)\n    integrate = partial(odeint, partial(dynamics, jnp))\n    jtu.check_grads(integrate, (y0, ts), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    y0 = np.linspace(0.1, 0.9, 10)\n    args = (0.1, 0.2)\n    self.check_against_scipy(swoop, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop_bigger(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    big_y0 = np.linspace(1.1, 10.9, 10)\n    args = (0.1, 0.3)\n    self.check_against_scipy(swoop, big_y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (big_y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_pend_grads(self):\n\n    def pend(_np, y, _, m, g):\n        theta, omega = y\n        return [omega, -m * omega - g * _np.sin(theta)]\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    args = (0.25, 9.8)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(pend, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(pend, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_pytree_state(self):\n    \"\"\"Test calling odeint with y(t) values that are pytrees.\"\"\"\n\n    def dynamics(y, _t):\n        return jax.tree.map(jnp.negative, y)\n    y0 = (np.array(-0.1), np.array([[[0.1]]]))\n    ts = np.linspace(0.0, 1.0, 11)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    integrate = partial(odeint, dynamics)\n    jtu.check_grads(integrate, (y0, ts), modes=['rev'], order=2, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_weird_time_pendulum_grads(self):\n    \"\"\"Test that gradients are correct when the dynamics depend on t.\"\"\"\n\n    def dynamics(_np, y, t):\n        return _np.array([y[1] * -t, -1 * y[1] - 9.8 * _np.sin(y[0])])\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(dynamics, y0, ts, tol=tol)\n    integrate = partial(odeint, partial(dynamics, jnp))\n    jtu.check_grads(integrate, (y0, ts), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_decay(self):\n\n    def decay(_np, y, t, arg1, arg2):\n        return -_np.sqrt(t) - y + arg1 - _np.mean((y + arg2) ** 2)\n    rng = self.rng()\n    args = (rng.randn(3), rng.randn(3))\n    y0 = rng.randn(3)\n    ts = np.linspace(0.1, 0.2, 4)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(decay, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(decay, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    y0 = np.linspace(0.1, 0.9, 10)\n    args = (0.1, 0.2)\n    self.check_against_scipy(swoop, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop_bigger(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    big_y0 = np.linspace(1.1, 10.9, 10)\n    args = (0.1, 0.3)\n    self.check_against_scipy(swoop, big_y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (big_y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_grad_closure(self):\n\n    def experiment(x):\n\n        def model(y, t):\n            return -x * y\n        history = odeint(model, 1.0, np.arange(0, 10, 0.1))\n        return history[-1]\n    jtu.check_grads(experiment, (0.01,), modes=['rev'], order=1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_complex_odeint(self):\n\n    def dy_dt(y, t, alpha):\n        return alpha * y * jnp.exp(-t).astype(y.dtype)\n\n    def f(y0, ts, alpha):\n        return odeint(dy_dt, y0, ts, alpha).real\n    alpha = 3 + 4j\n    y0 = 1 + 2j\n    ts = jnp.linspace(0.0, 1.0, 11)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    with jax.numpy_dtype_promotion('standard'):\n        jtu.check_grads(f, (y0, ts, alpha), modes=['rev'], order=2, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_pend_grads(self):\n\n    def pend(_np, y, _, m, g):\n        theta, omega = y\n        return [omega, -m * omega - g * _np.sin(theta)]\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    args = (0.25, 9.8)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(pend, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(pend, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_weird_time_pendulum_grads(self):\n    \"\"\"Test that gradients are correct when the dynamics depend on t.\"\"\"\n\n    def dynamics(_np, y, t):\n        return _np.array([y[1] * -t, -1 * y[1] - 9.8 * _np.sin(y[0])])\n    y0 = [np.pi - 0.1, 0.0]\n    ts = np.linspace(0.0, 1.0, 11)\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    self.check_against_scipy(dynamics, y0, ts, tol=tol)\n    integrate = partial(odeint, partial(dynamics, jnp))\n    jtu.check_grads(integrate, (y0, ts), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    y0 = np.linspace(0.1, 0.9, 10)\n    args = (0.1, 0.2)\n    self.check_against_scipy(swoop, y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu', 'gpu')\ndef test_swoop_bigger(self):\n\n    def swoop(_np, y, t, arg1, arg2):\n        return _np.array(y - _np.sin(t) - _np.cos(t) * arg1 + arg2)\n    ts = np.array([0.1, 0.2])\n    tol = 0.1 if jtu.num_float_bits(np.float64) == 32 else 0.001\n    big_y0 = np.linspace(1.1, 10.9, 10)\n    args = (0.1, 0.3)\n    self.check_against_scipy(swoop, big_y0, ts, *args, tol=tol)\n    integrate = partial(odeint, partial(swoop, jnp))\n    jtu.check_grads(integrate, (big_y0, ts, *args), modes=['rev'], order=2, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/ode_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  }
]