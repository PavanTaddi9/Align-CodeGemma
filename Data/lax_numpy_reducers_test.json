[
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where, initial=jnp.array(0, dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorNoInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(op=['quantile', 'nanquantile', 'percentile', 'nanpercentile'])\ndef testQuantileDeprecatedArgs(self, op):\n    func = getattr(jnp, op)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-quantile-interpolation', f\"The interpolation= argument to '{op}' is deprecated. \"):\n        func(jnp.arange(4), 0.5, interpolation='linear')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerBadInitial(self, rec):\n    jnp_op = getattr(jnp, rec.name)\n    arr = jnp.ones((2, 3, 4))\n    initial = jnp.zeros((1, 2, 3))\n    msg = 'initial value must be a scalar. Got array of shape \\\\(1, 2, 3\\\\)'\n    with self.assertRaisesRegex(ValueError, msg):\n        jnp_op(arr, axis=-1, initial=initial)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where, initial=jnp.array(0, dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorNoInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeSum(self, shape, axis, dtype, out_dtype, include_initial):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_sum\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumsum(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                zeros_shape = list(x.shape)\n                zeros_shape[axis] = 1\n                out = jnp.concat([jnp.zeros(zeros_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_sum(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol={jnp.bfloat16: 0.05})\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeSum(self, shape, axis, dtype, out_dtype, include_initial):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_sum\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumsum(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                zeros_shape = list(x.shape)\n                zeros_shape[axis] = 1\n                out = jnp.concat([jnp.zeros(zeros_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_sum(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol={jnp.bfloat16: 0.05})\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def cumsum(x):\n\n    def body(i, _):\n        return (i + 1, jnp.sum(x[:i + 1]))\n    _, ans = lax.scan(body, 0, None, length=len(x))\n    return ans"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where, initial=jnp.array(0, dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorNoInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(op=['quantile', 'nanquantile', 'percentile', 'nanpercentile'])\ndef testQuantileDeprecatedArgs(self, op):\n    func = getattr(jnp, op)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-quantile-interpolation', f\"The interpolation= argument to '{op}' is deprecated. \"):\n        func(jnp.arange(4), 0.5, interpolation='linear')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where, initial=jnp.array(0, dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorNoInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product(op=['quantile', 'nanquantile', 'percentile', 'nanpercentile'])\ndef testQuantileDeprecatedArgs(self, op):\n    func = getattr(jnp, op)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-quantile-interpolation', f\"The interpolation= argument to '{op}' is deprecated. \"):\n        func(jnp.arange(4), 0.5, interpolation='linear')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeProd(self, shape, axis, dtype, out_dtype, include_initial):\n    if jtu.is_device_tpu(6):\n        raise unittest.SkipTest('TODO(b/364258243): Test fails on TPU v6e')\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_prod\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumprod(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                ones_shape = list(x.shape)\n                ones_shape[axis] = 1\n                out = jnp.concat([jnp.ones(ones_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_prod(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def cumprod(x):\n    s = jnp.ones((2, 32), jnp.float32)\n    return lax.scan(lambda s, x: (x * s, s), s, x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeSum(self, shape, axis, dtype, out_dtype, include_initial):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_sum\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumsum(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                zeros_shape = list(x.shape)\n                zeros_shape[axis] = 1\n                out = jnp.concat([jnp.zeros(zeros_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_sum(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol={jnp.bfloat16: 0.05})\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def cumsum(x):\n\n    def body(i, refs):\n        x_ref, accum_ref = refs\n        accum_ref[i + 1] = accum_ref[i] + x_ref[i]\n    accum = jnp.zeros(x.shape[0] + 1, x.dtype)\n    _, accum_out = for_impl(x.shape[0], body, (x, accum))\n    return accum_out[1:]"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where, initial=jnp.array(0, dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)\ndef testReducerWhereNonBooleanErrorNoInitial(self, rec):\n    dtype = rec.dtypes[0]\n    x = jnp.zeros((10,), dtype)\n    where = jnp.ones(10, dtype=int)\n    func = getattr(jnp, rec.name)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-reduction-non-boolean-where', f'jnp.{rec.name}: where must be None or a boolean array'):\n        func(x, where=where)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jtu.sample_product(op=['quantile', 'nanquantile', 'percentile', 'nanpercentile'])\ndef testQuantileDeprecatedArgs(self, op):\n    func = getattr(jnp, op)\n    with self.assertDeprecationWarnsOrRaises('jax-numpy-quantile-interpolation', f\"The interpolation= argument to '{op}' is deprecated. \"):\n        func(jnp.arange(4), 0.5, interpolation='linear')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_fun(*args, signature=signature, optimize=optimize):\n    path, _ = jnp.einsum_path(signature, *args, optimize=optimize)\n    return jnp.einsum(signature, *args, optimize=path)"
  },
  {
    "test_code": "@jtu.sample_product(test_fns=[(np.var, jnp.var), (np.std, jnp.std)], shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof_correction=[(0, None), (1, None), (1, 0), (0, 0), (0, 1), (0, 2)], keepdims=[False, True])\ndef testStdOrVar(self, test_fns, shape, dtype, out_dtype, axis, ddof_correction, keepdims):\n    np_fn, jnp_fn = test_fns\n    ddof, correction = ddof_correction\n    rng = jtu.rand_default(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        ddof_correction_kwargs = {'ddof': ddof}\n        if correction is not None:\n            key = 'correction' if numpy_version >= (2, 0) else 'ddof'\n            ddof_correction_kwargs[key] = correction\n        out = np_fn(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, keepdims=keepdims, **ddof_correction_kwargs)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp_fn, dtype=out_dtype, axis=axis, ddof=ddof, correction=correction, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex128: 1e-06})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    elif correction is not None and ddof != 0:\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(test_fns=[(np.var, jnp.var), (np.std, jnp.std)], shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof_correction=[(0, None), (1, None), (1, 0), (0, 0), (0, 1), (0, 2)], keepdims=[False, True])\ndef testStdOrVar(self, test_fns, shape, dtype, out_dtype, axis, ddof_correction, keepdims):\n    np_fn, jnp_fn = test_fns\n    ddof, correction = ddof_correction\n    rng = jtu.rand_default(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        ddof_correction_kwargs = {'ddof': ddof}\n        if correction is not None:\n            key = 'correction' if numpy_version >= (2, 0) else 'ddof'\n            ddof_correction_kwargs[key] = correction\n        out = np_fn(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, keepdims=keepdims, **ddof_correction_kwargs)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp_fn, dtype=out_dtype, axis=axis, ddof=ddof, correction=correction, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex128: 1e-06})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    elif correction is not None and ddof != 0:\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(test_fns=[(np.var, jnp.var), (np.std, jnp.std)], shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof_correction=[(0, None), (1, None), (1, 0), (0, 0), (0, 1), (0, 2)], keepdims=[False, True])\ndef testStdOrVar(self, test_fns, shape, dtype, out_dtype, axis, ddof_correction, keepdims):\n    np_fn, jnp_fn = test_fns\n    ddof, correction = ddof_correction\n    rng = jtu.rand_default(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        ddof_correction_kwargs = {'ddof': ddof}\n        if correction is not None:\n            key = 'correction' if numpy_version >= (2, 0) else 'ddof'\n            ddof_correction_kwargs[key] = correction\n        out = np_fn(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, keepdims=keepdims, **ddof_correction_kwargs)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp_fn, dtype=out_dtype, axis=axis, ddof=ddof, correction=correction, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex128: 1e-06})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    elif correction is not None and ddof != 0:\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], out_dtype=[out_dtype for out_dtype in [None] + rec.dtypes if out_dtype not in unsigned_dtypes], keepdims=[False, True]) for rec in JAX_REDUCER_RECORDS)))\ndef testReducer(self, name, rng_factory, shape, dtype, out_dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='overflow encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if dtype != jnp.bfloat16 else x.astype(np.float32)\n        t = out_dtype if out_dtype != jnp.bfloat16 else np.float32\n        if t is None:\n            t = _reducer_output_dtype(name, x_cast.dtype)\n        return np_op(x_cast, axis, dtype=t, keepdims=keepdims)\n    jnp_fun = lambda x: jnp_op(x, axis, dtype=out_dtype, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol_spec = {np.float16: 0.01, np.int16: 2e-07, np.int32: 0.001, np.uint32: 3e-07, np.float32: 0.001, np.complex64: 0.001, np.float64: 1e-05, np.complex128: 1e-05}\n    tol = jtu.tolerance(dtype, tol_spec)\n    if out_dtype in [np.float16, dtypes.bfloat16]:\n        tol = 0.1\n    else:\n        tol = max(tol, jtu.tolerance(out_dtype, tol_spec)) if out_dtype else tol\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, check_dtypes=jnp.bfloat16 not in (dtype, out_dtype), tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tolerance=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_NO_DTYPE_RECORDS)))\ndef testReducerNoDtype(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, tolerance):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='All-NaN (slice|axis) encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = jtu.join_tolerance({np.float16: 0.002}, tolerance or jtu.default_tolerance())\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerBadInitial(self, rec):\n    jnp_op = getattr(jnp, rec.name)\n    arr = jnp.ones((2, 3, 4))\n    initial = jnp.zeros((1, 2, 3))\n    msg = 'initial value must be a scalar. Got array of shape \\\\(1, 2, 3\\\\)'\n    with self.assertRaisesRegex(ValueError, msg):\n        jnp_op(arr, axis=-1, initial=initial)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerInitial(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True], promote_integers=[False, True]) for rec in JAX_REDUCER_PROMOTE_INT_RECORDS)))\ndef testReducerPromoteInt(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, promote_integers):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype, promote_integers))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, promote_integers=promote_integers)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03, jnp.float16: 0.005}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis) for shape in rec.shapes if np.prod(shape) == 0 for axis in range(-len(shape), len(shape)) if shape[axis] >= 1], dtype=rec.dtypes, keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerNoInitialZeroDims(self, name, rng_factory, shape, dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype) for whereshape in _compatible_shapes(shape)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerWhere(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    if shape in [()] + scalar_shapes and dtype in [jnp.int16, jnp.uint16] and (jnp_op in [jnp.min, jnp.max]):\n        self.skipTest('Known XLA failure; see https://github.com/jax-ml/jax/issues/4971.')\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for whereshape in _compatible_shapes(shape) for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)))\ndef testReducerWhereNoInitial(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='invalid value encountered.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], out_dtype=[out_dtype for out_dtype in [None] + rec.dtypes if out_dtype not in unsigned_dtypes], keepdims=[False, True]) for rec in JAX_REDUCER_RECORDS)))\ndef testReducer(self, name, rng_factory, shape, dtype, out_dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='overflow encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if dtype != jnp.bfloat16 else x.astype(np.float32)\n        t = out_dtype if out_dtype != jnp.bfloat16 else np.float32\n        if t is None:\n            t = _reducer_output_dtype(name, x_cast.dtype)\n        return np_op(x_cast, axis, dtype=t, keepdims=keepdims)\n    jnp_fun = lambda x: jnp_op(x, axis, dtype=out_dtype, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol_spec = {np.float16: 0.01, np.int16: 2e-07, np.int32: 0.001, np.uint32: 3e-07, np.float32: 0.001, np.complex64: 0.001, np.float64: 1e-05, np.complex128: 1e-05}\n    tol = jtu.tolerance(dtype, tol_spec)\n    if out_dtype in [np.float16, dtypes.bfloat16]:\n        tol = 0.1\n    else:\n        tol = max(tol, jtu.tolerance(out_dtype, tol_spec)) if out_dtype else tol\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, check_dtypes=jnp.bfloat16 not in (dtype, out_dtype), tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tolerance=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_NO_DTYPE_RECORDS)))\ndef testReducerNoDtype(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, tolerance):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='All-NaN (slice|axis) encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = jtu.join_tolerance({np.float16: 0.002}, tolerance or jtu.default_tolerance())\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerInitial(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True], promote_integers=[False, True]) for rec in JAX_REDUCER_PROMOTE_INT_RECORDS)))\ndef testReducerPromoteInt(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, promote_integers):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype, promote_integers))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, promote_integers=promote_integers)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03, jnp.float16: 0.005}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis) for shape in rec.shapes if np.prod(shape) == 0 for axis in range(-len(shape), len(shape)) if shape[axis] >= 1], dtype=rec.dtypes, keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerNoInitialZeroDims(self, name, rng_factory, shape, dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype) for whereshape in _compatible_shapes(shape)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerWhere(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    if shape in [()] + scalar_shapes and dtype in [jnp.int16, jnp.uint16] and (jnp_op in [jnp.min, jnp.max]):\n        self.skipTest('Known XLA failure; see https://github.com/jax-ml/jax/issues/4971.')\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for whereshape in _compatible_shapes(shape) for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)))\ndef testReducerWhereNoInitial(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='invalid value encountered.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeSum(self, shape, axis, dtype, out_dtype, include_initial):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_sum\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumsum(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                zeros_shape = list(x.shape)\n                zeros_shape[axis] = 1\n                out = jnp.concat([jnp.zeros(zeros_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_sum(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol={jnp.bfloat16: 0.05})\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeProd(self, shape, axis, dtype, out_dtype, include_initial):\n    if jtu.is_device_tpu(6):\n        raise unittest.SkipTest('TODO(b/364258243): Test fails on TPU v6e')\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_prod\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumprod(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                ones_shape = list(x.shape)\n                ones_shape[axis] = 1\n                out = jnp.concat([jnp.ones(ones_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_prod(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@jtu.sample_product(test_fns=[(np.var, jnp.var), (np.std, jnp.std)], shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof_correction=[(0, None), (1, None), (1, 0), (0, 0), (0, 1), (0, 2)], keepdims=[False, True])\ndef testStdOrVar(self, test_fns, shape, dtype, out_dtype, axis, ddof_correction, keepdims):\n    np_fn, jnp_fn = test_fns\n    ddof, correction = ddof_correction\n    rng = jtu.rand_default(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        ddof_correction_kwargs = {'ddof': ddof}\n        if correction is not None:\n            key = 'correction' if numpy_version >= (2, 0) else 'ddof'\n            ddof_correction_kwargs[key] = correction\n        out = np_fn(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, keepdims=keepdims, **ddof_correction_kwargs)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp_fn, dtype=out_dtype, axis=axis, ddof=ddof, correction=correction, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex128: 1e-06})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    elif correction is not None and ddof != 0:\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(test_fns=[(np.var, jnp.var), (np.std, jnp.std)], shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof_correction=[(0, None), (1, None), (1, 0), (0, 0), (0, 1), (0, 2)], keepdims=[False, True])\ndef testStdOrVar(self, test_fns, shape, dtype, out_dtype, axis, ddof_correction, keepdims):\n    np_fn, jnp_fn = test_fns\n    ddof, correction = ddof_correction\n    rng = jtu.rand_default(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        ddof_correction_kwargs = {'ddof': ddof}\n        if correction is not None:\n            key = 'correction' if numpy_version >= (2, 0) else 'ddof'\n            ddof_correction_kwargs[key] = correction\n        out = np_fn(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, keepdims=keepdims, **ddof_correction_kwargs)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp_fn, dtype=out_dtype, axis=axis, ddof=ddof, correction=correction, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex128: 1e-06})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    elif correction is not None and ddof != 0:\n        self.assertRaises(ValueError, jnp_fun, *args_maker())\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(5,), (10, 5)], dtype=all_dtypes, out_dtype=inexact_dtypes, axis=[None, 0, -1], ddof=[0, 1, 2], keepdims=[False, True])\ndef testNanVar(self, shape, dtype, out_dtype, axis, ddof, keepdims):\n    rng = jtu.rand_some_nan(self.rng())\n    args_maker = self._GetArgsMaker(rng, [shape], [dtype])\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        out = np.nanvar(x.astype(np.float32 if dtype == dtypes.bfloat16 else dtype), dtype=np.float32 if out_dtype == dtypes.bfloat16 else out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n        return out.astype(out_dtype)\n    jnp_fun = partial(jnp.nanvar, dtype=out_dtype, axis=axis, ddof=ddof, keepdims=keepdims)\n    tol = jtu.tolerance(out_dtype, {np.float16: 0.1, np.float32: 0.001, np.float64: 0.001, np.complex64: 0.001, np.complex128: 0.0005})\n    if jnp.issubdtype(dtype, jnp.complexfloating) and (not jnp.issubdtype(out_dtype, jnp.complexfloating)):\n        self.assertRaises(ValueError, lambda: jnp_fun(*args_maker()))\n    else:\n        self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n        self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], out_dtype=[out_dtype for out_dtype in [None] + rec.dtypes if out_dtype not in unsigned_dtypes], keepdims=[False, True]) for rec in JAX_REDUCER_RECORDS)))\ndef testReducer(self, name, rng_factory, shape, dtype, out_dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='overflow encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if dtype != jnp.bfloat16 else x.astype(np.float32)\n        t = out_dtype if out_dtype != jnp.bfloat16 else np.float32\n        if t is None:\n            t = _reducer_output_dtype(name, x_cast.dtype)\n        return np_op(x_cast, axis, dtype=t, keepdims=keepdims)\n    jnp_fun = lambda x: jnp_op(x, axis, dtype=out_dtype, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol_spec = {np.float16: 0.01, np.int16: 2e-07, np.int32: 0.001, np.uint32: 3e-07, np.float32: 0.001, np.complex64: 0.001, np.float64: 1e-05, np.complex128: 1e-05}\n    tol = jtu.tolerance(dtype, tol_spec)\n    if out_dtype in [np.float16, dtypes.bfloat16]:\n        tol = 0.1\n    else:\n        tol = max(tol, jtu.tolerance(out_dtype, tol_spec)) if out_dtype else tol\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, check_dtypes=jnp.bfloat16 not in (dtype, out_dtype), tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tolerance=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_NO_DTYPE_RECORDS)))\ndef testReducerNoDtype(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, tolerance):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='All-NaN (slice|axis) encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = jtu.join_tolerance({np.float16: 0.002}, tolerance or jtu.default_tolerance())\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@jtu.sample_product(rec=JAX_REDUCER_INITIAL_RECORDS)\ndef testReducerBadInitial(self, rec):\n    jnp_op = getattr(jnp, rec.name)\n    arr = jnp.ones((2, 3, 4))\n    initial = jnp.zeros((1, 2, 3))\n    msg = 'initial value must be a scalar. Got array of shape \\\\(1, 2, 3\\\\)'\n    with self.assertRaisesRegex(ValueError, msg):\n        jnp_op(arr, axis=-1, initial=initial)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerInitial(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True], promote_integers=[False, True]) for rec in JAX_REDUCER_PROMOTE_INT_RECORDS)))\ndef testReducerPromoteInt(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, promote_integers):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype, promote_integers))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, promote_integers=promote_integers)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03, jnp.float16: 0.005}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis) for shape in rec.shapes if np.prod(shape) == 0 for axis in range(-len(shape), len(shape)) if shape[axis] >= 1], dtype=rec.dtypes, keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerNoInitialZeroDims(self, name, rng_factory, shape, dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype) for whereshape in _compatible_shapes(shape)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerWhere(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    if shape in [()] + scalar_shapes and dtype in [jnp.int16, jnp.uint16] and (jnp_op in [jnp.min, jnp.max]):\n        self.skipTest('Known XLA failure; see https://github.com/jax-ml/jax/issues/4971.')\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for whereshape in _compatible_shapes(shape) for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)))\ndef testReducerWhereNoInitial(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='invalid value encountered.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def jnp_op(start, stop):\n    return jnp.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype, axis=axis)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], out_dtype=[out_dtype for out_dtype in [None] + rec.dtypes if out_dtype not in unsigned_dtypes], keepdims=[False, True]) for rec in JAX_REDUCER_RECORDS)))\ndef testReducer(self, name, rng_factory, shape, dtype, out_dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='overflow encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if dtype != jnp.bfloat16 else x.astype(np.float32)\n        t = out_dtype if out_dtype != jnp.bfloat16 else np.float32\n        if t is None:\n            t = _reducer_output_dtype(name, x_cast.dtype)\n        return np_op(x_cast, axis, dtype=t, keepdims=keepdims)\n    jnp_fun = lambda x: jnp_op(x, axis, dtype=out_dtype, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol_spec = {np.float16: 0.01, np.int16: 2e-07, np.int32: 0.001, np.uint32: 3e-07, np.float32: 0.001, np.complex64: 0.001, np.float64: 1e-05, np.complex128: 1e-05}\n    tol = jtu.tolerance(dtype, tol_spec)\n    if out_dtype in [np.float16, dtypes.bfloat16]:\n        tol = 0.1\n    else:\n        tol = max(tol, jtu.tolerance(out_dtype, tol_spec)) if out_dtype else tol\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, check_dtypes=jnp.bfloat16 not in (dtype, out_dtype), tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tolerance=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_NO_DTYPE_RECORDS)))\ndef testReducerNoDtype(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, tolerance):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='All-NaN (slice|axis) encountered.*')\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = jtu.join_tolerance({np.float16: 0.002}, tolerance or jtu.default_tolerance())\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerInitial(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol, atol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis, dtype=dtype) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], initial=[0, 1], keepdims=[False, True], promote_integers=[False, True]) for rec in JAX_REDUCER_PROMOTE_INT_RECORDS)))\ndef testReducerPromoteInt(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, promote_integers):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype, promote_integers))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, promote_integers=promote_integers)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03, jnp.float16: 0.005}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact)], [dict(shape=shape, axis=axis) for shape in rec.shapes if np.prod(shape) == 0 for axis in range(-len(shape), len(shape)) if shape[axis] >= 1], dtype=rec.dtypes, keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerNoInitialZeroDims(self, name, rng_factory, shape, dtype, axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = {jnp.bfloat16: 0.03}\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype) for whereshape in _compatible_shapes(shape)], initial=[0, 1], keepdims=[False, True]) for rec in JAX_REDUCER_INITIAL_RECORDS)))\ndef testReducerWhere(self, name, rng_factory, shape, dtype, axis, keepdims, initial, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    if shape in [()] + scalar_shapes and dtype in [jnp.int16, jnp.uint16] and (jnp_op in [jnp.min, jnp.max]):\n        self.skipTest('Known XLA failure; see https://github.com/jax-ml/jax/issues/4971.')\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16 and rng_factory.__name__ == 'rand_some_nan'\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, initial=initial, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res.astype(_reducer_output_dtype(name, x.dtype))\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, initial=initial, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.chain.from_iterable((jtu.sample_product_testcases([dict(name=rec.name, rng_factory=rec.rng_factory, inexact=rec.inexact, tol=rec.tolerance)], [dict(shape=shape, axis=axis, dtype=dtype, whereshape=whereshape) for shape in rec.shapes for dtype in rec.dtypes for whereshape in _compatible_shapes(shape) for axis in list(range(-len(shape), len(shape))) + [None] if jtu.is_valid_shape(shape, dtype)], keepdims=[False, True]) for rec in JAX_REDUCER_WHERE_NO_INITIAL_RECORDS)))\ndef testReducerWhereNoInitial(self, name, rng_factory, shape, dtype, axis, keepdims, inexact, whereshape, tol):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = dtype == jnp.bfloat16\n    where = jtu.rand_bool(self.rng())(whereshape, np.bool_)\n\n    @jtu.ignore_warning(category=RuntimeWarning, message='Degrees of freedom <= 0 for slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='Mean of empty slice.*')\n    @jtu.ignore_warning(category=RuntimeWarning, message='invalid value encountered.*')\n    @jtu.ignore_warning(category=NumpyComplexWarning)\n    def np_fun(x):\n        x = np.asarray(x)\n        if inexact:\n            x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n        x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n        res = np_op(x_cast, axis, keepdims=keepdims, where=where)\n        res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n        return res\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims, where=where)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, atol=tol, rtol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeSum(self, shape, axis, dtype, out_dtype, include_initial):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_sum\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumsum(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                zeros_shape = list(x.shape)\n                zeros_shape[axis] = 1\n                out = jnp.concat([jnp.zeros(zeros_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_sum(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, rtol={jnp.bfloat16: 0.05})\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, axis=axis) for shape in all_shapes for axis in list(range(-len(shape), len(shape))) + ([None] if len(shape) == 1 else [])], [dict(dtype=dtype, out_dtype=out_dtype) for dtype in all_dtypes + [None] for out_dtype in (complex_dtypes if np.issubdtype(dtype, np.complexfloating) else all_dtypes)], include_initial=[False, True])\n@jtu.ignore_warning(category=NumpyComplexWarning)\n@jax.numpy_dtype_promotion('standard')\ndef testCumulativeProd(self, shape, axis, dtype, out_dtype, include_initial):\n    if jtu.is_device_tpu(6):\n        raise unittest.SkipTest('TODO(b/364258243): Test fails on TPU v6e')\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        x = jnp.array(rng(shape, dtype))\n        if out_dtype in unsigned_dtypes:\n            x = 10 * jnp.abs(x)\n        return [x]\n    kwargs = dict(axis=axis, dtype=out_dtype, include_initial=include_initial)\n    if jtu.numpy_version() >= (2, 1, 0):\n        np_op = np.cumulative_prod\n    else:\n\n        def np_op(x, axis=None, dtype=None, include_initial=False):\n            axis = axis or 0\n            out = np.cumprod(x, axis=axis, dtype=dtype or x.dtype)\n            if include_initial:\n                ones_shape = list(x.shape)\n                ones_shape[axis] = 1\n                out = jnp.concat([jnp.ones(ones_shape, dtype=out.dtype), out], axis=axis)\n            return out\n    np_fun = lambda x: np_op(x, **kwargs)\n    jnp_fun = lambda x: jnp.cumulative_prod(x, **kwargs)\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_reducers_test.py",
    "function": "def np_op(start, stop):\n    start = start.astype(np.float32) if dtype == jnp.bfloat16 else start\n    stop = stop.astype(np.float32) if dtype == jnp.bfloat16 else stop\n    return np.geomspace(start, stop, num, endpoint=endpoint, dtype=dtype if dtype != jnp.bfloat16 else np.float32, axis=axis).astype(dtype)"
  }
]