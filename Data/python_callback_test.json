[
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n    self.skipTest('Too slow and memory intensive.')\n    eig = jax.jit(jnp.linalg.eig)\n\n    def callback(x):\n        return jax.block_until_ready(eig(x))\n\n    def fun(x):\n        self.assertEqual(x.dtype, jnp.complex64)\n        out_type = (jax.ShapeDtypeStruct(x.shape[:-1], x.dtype), jax.ShapeDtypeStruct(x.shape, x.dtype))\n        return jax.pure_callback(callback, out_type, x)\n    result = 0.0\n    for _ in range(10):\n        result += fun(jnp.ones((500, 500), jnp.complex64))[1]\n    jax.block_until_ready(result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cannot_vmap_of_cond_io_callback(self):\n\n    def f(pred):\n\n        def true_fun():\n            io_callback(lambda: print('true'), None)\n\n        def false_fun():\n            io_callback(lambda: print('false'), None)\n        return lax.cond(pred, false_fun, true_fun)\n    with self.assertRaisesRegex(NotImplementedError, 'IO effect not supported in vmap-of-cond.'):\n        jax.vmap(f)(jnp.array([True, True]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef fun(x, y):\n    return cond(x < 3, None, lambda _: 2.0 * jnp.sin(y), x, lambda x: 2.0 * x)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n    self.skipTest('Too slow and memory intensive.')\n    eig = jax.jit(jnp.linalg.eig)\n\n    def callback(x):\n        return jax.block_until_ready(eig(x))\n\n    def fun(x):\n        self.assertEqual(x.dtype, jnp.complex64)\n        out_type = (jax.ShapeDtypeStruct(x.shape[:-1], x.dtype), jax.ShapeDtypeStruct(x.shape, x.dtype))\n        return jax.pure_callback(callback, out_type, x)\n    result = 0.0\n    for _ in range(10):\n        result += fun(jnp.ones((500, 500), jnp.complex64))[1]\n    jax.block_until_ready(result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef fun(x, y):\n    return cond(x < 3, None, lambda _: 2.0 * jnp.sin(y), x, lambda x: 2.0 * x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def fun():\n    return jax.ffi.ffi_call('test', jax.ShapeDtypeStruct((), np.int64))()"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n    self.skipTest('Too slow and memory intensive.')\n    eig = jax.jit(jnp.linalg.eig)\n\n    def callback(x):\n        return jax.block_until_ready(eig(x))\n\n    def fun(x):\n        self.assertEqual(x.dtype, jnp.complex64)\n        out_type = (jax.ShapeDtypeStruct(x.shape[:-1], x.dtype), jax.ShapeDtypeStruct(x.shape, x.dtype))\n        return jax.pure_callback(callback, out_type, x)\n    result = 0.0\n    for _ in range(10):\n        result += fun(jnp.ones((500, 500), jnp.complex64))[1]\n    jax.block_until_ready(result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def fun():\n    return jax.ffi.ffi_call('test', jax.ShapeDtypeStruct((), np.int64))()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def fun(x, t):\n    return jnp.sum(jnp.power(jnp.maximum(x, 0.0), 2)) + t"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n    self.skipTest('Too slow and memory intensive.')\n    eig = jax.jit(jnp.linalg.eig)\n\n    def callback(x):\n        return jax.block_until_ready(eig(x))\n\n    def fun(x):\n        self.assertEqual(x.dtype, jnp.complex64)\n        out_type = (jax.ShapeDtypeStruct(x.shape[:-1], x.dtype), jax.ShapeDtypeStruct(x.shape, x.dtype))\n        return jax.pure_callback(callback, out_type, x)\n    result = 0.0\n    for _ in range(10):\n        result += fun(jnp.ones((500, 500), jnp.complex64))[1]\n    jax.block_until_ready(result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def fun(x, t):\n    return jnp.sum(jnp.power(jnp.maximum(x, 0.0), 2)) + t"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_compilation_caching(self, *, callback):\n\n    def f_outside(x):\n        return 2 * x\n\n    def fun(x):\n        return callback(f_outside, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((2, 3))\n    with jtu.count_primitive_compiles() as count:\n        for _ in range(3):\n            self.assertAllClose(2 * x, fun(x))\n    self.assertEqual(count(), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, backend=backend)\ndef fun(x, y):\n    return jnp.matmul(x, y)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n    self.skipTest('Too slow and memory intensive.')\n    eig = jax.jit(jnp.linalg.eig)\n\n    def callback(x):\n        return jax.block_until_ready(eig(x))\n\n    def fun(x):\n        self.assertEqual(x.dtype, jnp.complex64)\n        out_type = (jax.ShapeDtypeStruct(x.shape[:-1], x.dtype), jax.ShapeDtypeStruct(x.shape, x.dtype))\n        return jax.pure_callback(callback, out_type, x)\n    result = 0.0\n    for _ in range(10):\n        result += fun(jnp.ones((500, 500), jnp.complex64))[1]\n    jax.block_until_ready(result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jax.jit, backend=backend)\ndef fun(x, y):\n    return jnp.matmul(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cannot_vmap_of_cond_io_callback(self):\n\n    def f(pred):\n\n        def true_fun():\n            io_callback(lambda: print('true'), None)\n\n        def false_fun():\n            io_callback(lambda: print('false'), None)\n        return lax.cond(pred, false_fun, true_fun)\n    with self.assertRaisesRegex(NotImplementedError, 'IO effect not supported in vmap-of-cond.'):\n        jax.vmap(f)(jnp.array([True, True]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cannot_vmap_of_cond_io_callback(self):\n\n    def f(pred):\n\n        def true_fun():\n            io_callback(lambda: print('true'), None)\n\n        def false_fun():\n            io_callback(lambda: print('false'), None)\n        return lax.cond(pred, false_fun, true_fun)\n    with self.assertRaisesRegex(NotImplementedError, 'IO effect not supported in vmap-of-cond.'):\n        jax.vmap(f)(jnp.array([True, True]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.custom_jvp\ndef h(x):\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.custom_jvp\ndef h(x):\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def h():\n\n    def _make_zeros():\n        return jnp.zeros(())\n    s = jax.sharding.NamedSharding(mesh2, P())\n    y = jax.jit(_make_zeros, out_shardings=s)()\n    return y.reshape((1,))"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def h():\n\n    def _make_zeros():\n        return jnp.zeros(())\n    s = jax.sharding.NamedSharding(mesh2, P())\n    y = jax.jit(_make_zeros, out_shardings=s)()\n    return y.reshape((1,))"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_array_layout_is_preserved(self):\n\n    def g(x):\n        return jax.pure_callback(lambda x: x, x, x)\n    x = np.arange(6, dtype=np.int32).reshape((3, 2))\n    np.testing.assert_allclose(g(x), x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_scalar_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: x + 1.0, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(0.0)\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_expect_dtype_{expect_dtype}', callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor], expect_dtype=expect_dtype) for flavor in ('io_unordered', 'io_ordered', 'pure') for expect_dtype in (np.int32, np.int64, np.float32, np.float64)))\ndef test_callback_returning_python_literal(self, *, callback, expect_dtype):\n    returned_literal = 42 if expect_dtype in (np.int32, np.int64) else 42.0\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: returned_literal, core.ShapedArray((), expect_dtype), x)\n    if not config.enable_x64.value and expect_dtype in (np.int64, np.float64):\n        ctx = self.assertRaisesRegex(Exception, 'result_shape_dtypes cannot specify 64-bit types')\n    elif config.enable_x64.value and expect_dtype in (np.int32, np.float32):\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        out = f(0.0)\n        jax.effects_barrier()\n        self.assertEqual(out, returned_literal)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_returning_custom_array(self, *, callback):\n\n    class CustomArray:\n\n        def __init__(self, a: np.ndarray):\n            self.a = a\n\n        @property\n        def shape(self):\n            return self.a.shape\n\n        @property\n        def dtype(self):\n            return self.a.dtype\n\n        def __array__(self):\n            return self.a\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: CustomArray(np.array(42.0, dtype=np.float32)), core.ShapedArray((), np.float32), x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 42.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'{flavor}_{dtype}', dtype=dtype, callback=dict(io_unordered=io_calback_unordered, io_ordered=io_callback_ordered, pure=jax.pure_callback)[flavor]) for flavor in ('io_unordered', 'io_ordered', 'pure') for dtype in jtu.dtypes.all))\ndef test_callback_works_with_all_types(self, *, callback, dtype):\n\n    def host_func(x):\n        if dtype == np.bool_:\n            return ~x\n        else:\n            return x + x\n    _received = None\n\n    def _cb(x):\n        nonlocal _received\n        _received = x\n        return host_func(x)\n    if dtype == np.bool_:\n        x = np.array([True, False, True, True], dtype=np.bool_)\n    else:\n        x = np.arange(4, dtype=dtype)\n\n    @jax.jit\n    def f(x):\n        return callback(_cb, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(x)\n    self.assertAllClose(out, host_func(x))\n    jax.effects_barrier()\n    self.assertAllClose(_received, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_args(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda x: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_number_of_returned_values(self, *, callback):\n\n    @jax.jit\n    def f(x):\n        return callback(lambda x: (x, np.ones(4, np.float32)), x, x)\n    with self.assertRaises(RuntimeError):\n        f(2.0)\n        jax.effects_barrier()\n\n    @jax.jit\n    def g():\n        return io_callback(lambda: None, (core.ShapedArray((1,), np.float32), core.ShapedArray((2,), np.float32)))\n    with self.assertRaises(RuntimeError):\n        g()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_shape_outputs(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float32(1.0), core.ShapedArray((1,), np.float32))\n    with self.assertRaises(RuntimeError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrong_dtype_outputs(self, *, callback):\n\n    def _cb():\n        return np.array([1], np.float64)\n\n    @jax.jit\n    def f():\n        return callback(_cb, core.ShapedArray((1,), np.float32))\n    if config.enable_x64.value:\n        ctx = self.assertRaisesRegex(Exception, 'Incorrect output dtype for return value')\n    else:\n        ctx = contextlib.nullcontext()\n    with ctx:\n        res = f()\n        jax.effects_barrier()\n        self.assertAllClose(res, np.array([1], np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_wrongly_specified_64_bit_dtype(self, *, callback):\n    if config.enable_x64.value:\n        raise unittest.SkipTest('Test only needed when 64-bit mode disabled.')\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.float64(1.0), core.ShapedArray((), np.float64))\n    with self.assertRaises(ValueError):\n        f()\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_single_return_value(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: np.ones(4, np.float32), core.ShapedArray((4,), np.float32))\n    out = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.ones(4, np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_return_values(self, *, callback):\n\n    @jax.jit\n    def f():\n        return callback(lambda: (np.ones(4, np.float32), np.ones(5, np.int32)), (core.ShapedArray((4,), np.float32), core.ShapedArray((5,), np.int32)))\n    x, y = f()\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(4, np.float32))\n    np.testing.assert_allclose(y, np.ones(5, np.int32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_multiple_arguments_and_return_values(self, *, callback):\n\n    def _callback(x, y, z):\n        return (x, y + z)\n\n    @jax.jit\n    def f(x, y, z):\n        return callback(_callback, (core.ShapedArray((3,), x.dtype), core.ShapedArray((3,), x.dtype)), x, y, z)\n    x, y = f(jnp.ones(3), jnp.arange(3.0), jnp.arange(3.0) + 1.0)\n    jax.effects_barrier()\n    np.testing.assert_allclose(x, np.ones(3))\n    np.testing.assert_allclose(y, np.array([1.0, 3.0, 5]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_arrays(self, *, callback):\n    result = np.full((2,), 42.0, dtype=np.float32)\n    x = np.zeros((2, 0), np.float32)\n\n    def _callback(x):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_send_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.zeros((2, 0), np.float32)\n    y = np.full((2,), 42.0, dtype=np.float32)\n    result = y\n\n    def _callback(x, y):\n        return y\n\n    @jax.jit\n    def f(x, y):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x, y)\n    jax.effects_barrier()\n    self.assertAllClose(f(x, y), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_arrays(self, *, callback):\n    result = np.full((2, 0), 42.0, dtype=np.float32)\n    x = np.zeros((2,), np.float32)\n\n    def _callback(_):\n        return result\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, core.ShapedArray(result.shape, result.dtype), x)\n    jax.effects_barrier()\n    self.assertAllClose(f(x), result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_recv_zero_dim_and_non_zero_dim_arrays(self, *, callback):\n    x = np.full((2,), 42.0, dtype=np.float32)\n    result0 = np.ones((2, 0), dtype=np.float32)\n    result1 = x\n    result2 = np.ones((3, 0), dtype=np.int32)\n    result3 = np.concatenate([x, x]) + 1.0\n\n    def _callback(x):\n        return (result0, x, result2, np.concatenate([x, x]) + 1.0)\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, (core.ShapedArray(result0.shape, result0.dtype), core.ShapedArray(result1.shape, result1.dtype), core.ShapedArray(result2.shape, result2.dtype), core.ShapedArray(result3.shape, result3.dtype)), x)\n    res = f(x)\n    jax.effects_barrier()\n    self.assertAllClose(res, (result0, result1, result2, result3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_with_pytree_arguments_and_return_values(self, *, callback):\n\n    def _callback(x):\n        return dict(y=[x])\n\n    @jax.jit\n    def f(x):\n        return callback(_callback, dict(y=[core.ShapedArray((), np.float32)]), [x])\n    out = f(jnp.float32(2.0))\n    jax.effects_barrier()\n    self.assertEqual(out, dict(y=[2.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return x < 10\n\n        def body(x):\n            return callback(_callback, core.ShapedArray((), x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_while_loop(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jnp.any(x < 10)\n\n        def body(x):\n            return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond_of_scalars(self, *, callback):\n\n    def _callback1(x):\n        return (x + 1.0).astype(x.dtype)\n\n    def _callback2(x):\n        return (x - 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray((), x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray((), x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 2.0)\n    out = f(False, 1.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_cond(self, *, callback):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return callback(_callback1, core.ShapedArray(x.shape, x.dtype), x)\n\n        def false_fun(x):\n            return callback(_callback2, core.ShapedArray(x.shape, x.dtype), x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan_of_scalars(self, *, callback):\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(0.0)\n    jax.effects_barrier()\n    self.assertEqual(out, 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_scan(self, *, callback):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap_of_scalars(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(jax.local_device_count(), dtype=jnp.float32))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(jax.local_device_count(), dtype=np.float32) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\ndef test_callback_inside_of_pmap(self, *, callback):\n    if callback is io_callback_ordered:\n        self.skipTest('N/A')\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return callback(_callback, core.ShapedArray(x.shape, x.dtype), x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    jax.effects_barrier()\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@with_pure_and_io_callbacks\n@jtu.thread_unsafe_test()\ndef test_exception_in_callback(self, *, callback):\n\n    def fail(x):\n        raise RuntimeError('Ooops')\n\n    @jax.jit\n    def f(x):\n        return callback(fail, core.ShapedArray(x.shape, x.dtype), x)\n    with self.assertLogs(level='ERROR') as l:\n        try:\n            f(0.0).block_until_ready()\n        except RuntimeError:\n            pass\n        api_name = 'pure_callback' if callback is jax.pure_callback else 'io_callback'\n        output = '\\n'.join(l.output)\n        self.assertIn(f'jax.{api_name} failed', output)\n        self.assertIn('Traceback (most recent call last)', output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_pure_callback_passes_jax_arrays_without_jit(self):\n\n    def cb(x):\n        self.assertIsInstance(x, jax.Array)\n        return x\n\n    def f(x):\n        return jax.pure_callback(cb, x, x)\n    f(jnp.array(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_dce_pure_callback(self):\n    if jax.default_backend() == 'tpu':\n        raise unittest.SkipTest(\"DCE doesn't currently happen on TPU\")\n    log = []\n\n    def _callback(x):\n        log.append('hello world')\n        return (x * 2.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n        _ = jax.pure_callback(_callback, x, x)\n        return x * 2.0\n    _ = f(2.0)\n    self.assertEmpty(log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_vmap_pure_callback(self):\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = f(jnp.arange(4.0))\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)))\n\n    @jax.jit\n    def g(x):\n        return jax.pure_callback(np.sin, x, x, vmap_method='sequential')\n    out = jax.vmap(g, in_axes=1)(jnp.arange(8.0).reshape((4, 2)))\n    np.testing.assert_allclose(out, np.sin(np.arange(8.0).reshape((4, 2))).T)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), 4.0)\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + 4.0, rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0), jnp.arange(10.0, 14.0))\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0), rtol=1e-07, check_dtypes=False)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=1, out_axes=1)\n    def h(x, y):\n        out_shape = jax.ShapeDtypeStruct(x.shape, np.result_type(x.dtype, y.dtype))\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, out_shape, x, y, vmap_method='sequential')\n    out = h(jnp.arange(4.0)[None], jnp.arange(10.0, 14.0)[None])\n    self.assertArraysAllClose(out, np.sin(np.arange(4.0)) + np.arange(10.0, 14.0)[None], rtol=1e-07, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback(self):\n\n    def cb(x):\n        self.assertTupleEqual(x.shape, ())\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='sequential')\n    np.testing.assert_allclose(f(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    def cb2(x):\n        self.assertTupleEqual(x.shape, (4,))\n        return np.sin(x)\n\n    @jax.jit\n    @jax.vmap\n    def g(x):\n        return jax.pure_callback(cb2, x, x, vmap_method='expand_dims')\n    np.testing.assert_allclose(g(jnp.arange(4.0)), np.sin(np.arange(4.0)))\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(0, None))\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='expand_dims')\n    out = h(jnp.arange(4.0), 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)) + 4.0)\n\n    @jax.jit\n    @functools.partial(jax.vmap, in_axes=(1, None), out_axes=1)\n    def h(x, y):\n        return jax.pure_callback(lambda x, y: np.sin(x) + y, x, x, y, vmap_method='legacy_vectorized')\n    out = h(jnp.arange(4.0)[None], 4.0)\n    np.testing.assert_allclose(out, np.sin(np.arange(4.0)[None]) + 4.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_vmap_vectorized_callback_errors_if_returns_wrong_shape(self):\n\n    def cb(x):\n        return np.sin(x).sum()\n\n    @jax.jit\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(cb, x, x, vmap_method='expand_dims')\n    with self.assertRaises(RuntimeError):\n        f(jnp.arange(4.0))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_pmap_pure_callback(self):\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x)\n    out = f(jnp.arange(float(jax.local_device_count())))\n    np.testing.assert_allclose(out, np.sin(np.arange(jax.local_device_count())))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_cant_take_grad_of_pure_callback(self):\n\n    def sin(x):\n        return np.sin(x)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return jax.pure_callback(sin, x, x)\n    with self.assertRaisesRegex(ValueError, 'Pure callbacks do not support JVP.'):\n        f(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_error_propagation(self):\n\n    def throws_error_fn(x):\n        raise RuntimeError('Errors should propagate.')\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(throws_error_fn, x, x)\n    with self.assertRaisesRegex(Exception, 'Errors should propagate.'):\n        print(np.array(f(2.0)), flush=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_reentrant_error_propagation(self):\n    reentrant_fn = jax.jit(jnp.sin).lower(2.0).compile()\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(reentrant_fn, x, x)\n    try:\n        np.array(f(2.0))\n    except:\n        pass",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_take_grad_of_pure_callback_with_custom_jvp(self):\n\n    @jax.custom_jvp\n    def sin(x):\n        return jax.pure_callback(np.sin, x, x)\n\n    @sin.defjvp\n    def sin_jvp(xs, ts):\n        (x,), (t,) = (xs, ts)\n        return (sin(x), jax.pure_callback(np.cos, x, x) * t)\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        return sin(x)\n    out = f(2.0)\n    np.testing.assert_allclose(out, jnp.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_callback_inside_of_cond(self):\n\n    def _callback1(x):\n        return x + 1.0\n\n    def _callback2(x):\n        return x - 1.0\n\n    @jax.jit\n    def f(pred, x):\n\n        def true_fun(x):\n            return jax.pure_callback(_callback1, x, x)\n\n        def false_fun(x):\n            return jax.pure_callback(_callback2, x, x)\n        return lax.cond(pred, true_fun, false_fun, x)\n    out = f(True, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.ones(2) * 2.0)\n    out = f(False, jnp.ones(2))\n    np.testing.assert_allclose(out, jnp.zeros(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_callback_inside_of_scan(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.jit\n    def f(x):\n\n        def body(x, _):\n            x = jax.pure_callback(_callback, x, x)\n            return (x, ())\n        return lax.scan(body, x, jnp.arange(10))[0]\n    out = f(jnp.arange(2.0))\n    np.testing.assert_allclose(out, jnp.arange(2.0) + 10.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_callback_inside_of_while_loop(self):\n\n    def _cond_callback(x):\n        return np.any(x < 10)\n\n    def _callback(x):\n        return (x + 1.0).astype(x.dtype)\n\n    @jax.jit\n    def f(x):\n\n        def cond(x):\n            return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)\n\n        def body(x):\n            return jax.pure_callback(_callback, x, x)\n        return lax.while_loop(cond, body, x)\n    out = f(jnp.arange(5.0))\n    np.testing.assert_allclose(out, jnp.arange(10.0, 15.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_callback_inside_of_pmap(self):\n\n    def _callback(x):\n        return x + 1.0\n\n    @jax.pmap\n    def f(x):\n        return jax.pure_callback(_callback, x, x)\n    out = f(jnp.arange(2 * jax.local_device_count(), dtype=jnp.float32).reshape([-1, 2]))\n    np.testing.assert_allclose(out, np.arange(2 * jax.local_device_count()).reshape([-1, 2]) + 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_vmap_method_raise(self):\n\n    @jax.vmap\n    def f(x):\n        return jax.pure_callback(np.sin, x, x, vectorized=None)\n    with self.assertRaisesRegex(NotImplementedError, 'vmap is only supported'):\n        f(jnp.arange(4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_deprecated_vectorized(self):\n\n    def f(x, **kwargs):\n        return jax.pure_callback(np.sin, x, x, **kwargs)\n    with self.assertWarnsRegex(DeprecationWarning, 'The default behavior'):\n        jax.vmap(f)(jnp.arange(4.0))\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=True)\n    with self.assertWarnsRegex(DeprecationWarning, 'The vectorized argument'):\n        f(jnp.arange(4.0), vectorized=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_non_default_stride(self):\n    x = jnp.arange(24, dtype=jnp.float32).reshape(2, 3, 4)\n\n    def callback(x):\n        return np.asfortranarray(x)\n\n    @jax.jit\n    def f(x):\n        return jax.pure_callback(callback, jax.ShapeDtypeStruct(x.shape, x.dtype), x)\n    result = f(x)\n    np.testing.assert_array_equal(x, result)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_io_callback_can_mutate_state(self):\n    x = 0\n\n    def cb():\n        nonlocal x\n        x += 1\n        return np.array(x, np.int32)\n\n    def f():\n        return io_callback(cb, jax.ShapeDtypeStruct((), jnp.int32))\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 1)\n    f()\n    jax.effects_barrier()\n    self.assertEqual(x, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_cannot_use_io_callback_in_checkpoint(self):\n\n    @jax.grad\n    @jax.checkpoint\n    def f(x, y):\n        io_callback(lambda x: x, y, y)\n        return x\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported in partial-eval of `checkpoint`'):\n        f(2.0, 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'ordered={ordered!r}_with_sharding={with_sharding!r}', ordered=ordered, with_sharding=with_sharding) for ordered in [True, False] for with_sharding in [True, False]))\ndef test_can_use_io_callback_in_pjit(self, *, ordered: bool, with_sharding: bool):\n    devices = jax.devices()\n    mesh = jax.sharding.Mesh(np.array(devices), ['dev'])\n    _collected: list[int] = []\n\n    def _cb(x):\n        nonlocal _collected\n        _collected.append(int(x.sum()))\n    io_callback_kwargs = dict(ordered=ordered)\n    callback_device = devices[0]\n    if with_sharding:\n        callback_device = devices[-1]\n        io_callback_kwargs['sharding'] = jax.sharding.SingleDeviceSharding(callback_device)\n\n    def f(x):\n        io_callback(_cb, None, x, **io_callback_kwargs)\n        io_callback(_cb, None, x + 1, **io_callback_kwargs)\n        return x\n    in_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=in_spec, out_shardings=out_spec)\n    expected = []\n    with mesh:\n        x = jnp.arange(mesh.size)\n        f(x)\n        expected.extend([int(x.sum()), int((x + 1).sum())])\n        f(x + 5)\n        expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    if ordered:\n        self.assertAllClose(_collected, expected)\n    else:\n        self.assertEqual(len(_collected), len(expected))\n        for v in expected:\n            self.assertIn(v, _collected)\n    callback_device_index = in_spec._device_assignment.index(callback_device)\n    stablehlo_ir = f.lower(x).as_text()\n    if config.use_shardy_partitioner.value:\n        self.assertIn(f'sdy.sharding = #sdy.sharding_per_value<[<@maximal_mesh_{callback_device_index}, []>]>', stablehlo_ir)\n        self.assertIn(f'sdy.mesh @maximal_mesh_{callback_device_index} = <[], device_ids=[{callback_device_index}]>', stablehlo_ir)\n    else:\n        self.assertIn(f'{{maximal device={callback_device_index}}}', stablehlo_ir)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_sequence_pjit_io_callback_ordered(self):\n    _collected: list[int] = []\n\n    def _cb(i, x):\n        nonlocal _collected\n        time.sleep([0.02, 0.03, 0.04][len(_collected) % 3])\n        logging.info('Collected iteration %s: %s', i, x)\n        _collected.append(int(x.sum()))\n\n    def f_base(i, x):\n        io_callback(_cb, None, i, x, ordered=True)\n        io_callback(_cb, None, i, x + 1, ordered=True)\n    nr_iterations = 8\n    devices = jax.devices()\n    expected = []\n    for i in range(nr_iterations):\n        if len(devices) > 1:\n            devices_for_iteration = [devices[i % len(devices)], devices[(i + 1) % len(devices)]]\n        else:\n            devices_for_iteration = devices\n        logging.info('Running iteration %d on devices %s', i, devices_for_iteration)\n        mesh = jax.sharding.Mesh(np.array(devices_for_iteration), ['dev'])\n        in_spec = (jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec()), jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev')))\n        out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n        f = pjit.pjit(f_base, in_shardings=in_spec, out_shardings=out_spec)\n        with mesh:\n            x = jax.device_put(np.arange(len(devices_for_iteration), dtype=np.int32) + 10 * i, in_spec[1])\n            f(i, x)\n            expected.extend([int(x.sum()), int((x + 1).sum())])\n            f(i, x + 5)\n            expected.extend([int((x + 5).sum()), int((x + 6).sum())])\n    jax.effects_barrier()\n    self.assertEqual(_collected, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/python_callback_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  }
]