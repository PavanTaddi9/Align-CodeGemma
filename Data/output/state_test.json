[
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_discharge_swap(self):\n\n    def f(a_ref):\n        a = ref_swap(a_ref.at[0:4, 0:3, 0:2].at[1:3, :, 0], (slice(None), slice(1, 3)), jnp.zeros((2, 2), jnp.float32))\n        return [a + 1]\n    in_avals = [shaped_array_ref((4, 3, 2), jnp.float32)]\n    stateful_jaxpr, _, consts, () = pe.trace_to_jaxpr_dynamic(wrap_init(f, 1), in_avals)\n    discharged_jaxpr, () = discharge_state(stateful_jaxpr, consts)\n    self.assertLen(discharged_jaxpr.invars, 1)\n    self.assertLen(discharged_jaxpr.outvars, 2)\n    inval = jnp.arange(24.0, dtype=jnp.float32).reshape((4, 3, 2))\n    outval, refval = core.eval_jaxpr(discharged_jaxpr, (), inval)\n    self.assertArraysEqual(outval, inval[1:3, 1:3, 0] + 1)\n    self.assertArraysEqual(refval, inval.at[1:3, 1:3, 0].set(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, _):\n    return (i + 1, jnp.sum(x[:i + 1]))"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, _):\n    return (i + 1, jnp.sum(x[:i + 1]))"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, _):\n    return (i + 1, jnp.sum(x[:i + 1]))"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_simple_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_simple_cond_with_return(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref = refs\n\n            def true_fun():\n                x_ref[()] = 1.0\n                return 4.0\n\n            def false_fun():\n                return 5.0\n            out = lax.cond(pred, true_fun, false_fun)\n            y_ref[...] = out\n        return for_loop.run_state(body, (0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True)\n    self.assertTupleEqual(out, (1.0, 4.0))\n    out = jax.jit(f)(False)\n    self.assertTupleEqual(out, (0.0, 5.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_discharge(self):\n\n    def f0(pred, x_ref, y_ref):\n\n        def true_fun():\n            x_ref[...] = 1.0\n\n        def false_fun():\n            y_ref[...] = 2.0\n        lax.cond(pred, true_fun, false_fun)\n        return (x_ref[...], y_ref[...])\n    ref = lambda x: AbstractRef(core.raise_to_shaped(core.get_aval(x)))\n    f_jaxpr = jax.make_jaxpr(f0)(False, ref(3.0), ref(4.0))\n    jaxpr, _ = discharge_state(f_jaxpr.jaxpr, (), should_discharge=[False, False, True])\n    self.assertEqual(f_jaxpr.effects, {ReadEffect(1), WriteEffect(1), ReadEffect(2), WriteEffect(2)})\n    self.assertEqual(jaxpr.effects, {ReadEffect(1), WriteEffect(1)})\n    self.assertNotIsInstance(jaxpr.invars[2].aval, AbstractRef)\n    self.assertIsInstance(jaxpr.invars[1].aval, AbstractRef)\n    self.assertLen(f_jaxpr.out_avals, 2)\n    self.assertLen(jaxpr.outvars, 3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_with_ref_reuse(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                x_ref[()] = 2.0\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)(0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = 1.0\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = 2.0\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_readonly_refs(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n\n            def true_fun():\n                y_ref[()] = x_ref[()]\n\n            def false_fun():\n                y_ref[()] = x_ref[()] + z_ref[()]\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((1.0, 0.0, 2.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    [run_state_eqn] = jaxpr.eqns\n    *_, cond_eqn = discharge_state(run_state_eqn.params['jaxpr'], ())[0].eqns\n    self.assertIs(cond_eqn.primitive, lax.cond_p)\n    self.assertLen(cond_eqn.invars, 4)\n    self.assertLen(cond_eqn.outvars, 1)\n    self.assertAllClose(jax.jit(f)(True), (1.0, 1.0, 2.0))\n    self.assertAllClose(jax.jit(f)(False), (1.0, 3.0, 2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_simple_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n            b = jnp.array(2.0)\n\n            def true_fun():\n                x_ref[()] = 1.0 * a\n                y_ref[()] = 1.0\n\n            def false_fun():\n                z_ref[()] = 1.0\n                x_ref[()] = 2.0\n                x_ref[()] = 2.0 * b\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_nested_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred1, pred2):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n\n            def true_fun():\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    y_ref[()] = 1.0\n\n                def inner_false_fun():\n                    z_ref[()] = 1.0\n                    x_ref[()] = 2.0\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n\n            def false_fun():\n                a = jnp.array(2.0)\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    z_ref[()] = 4.0\n\n                def inner_false_fun():\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n            lax.cond(pred1, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True, False).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True, True)\n    expected = (2.0, 1.0, 0.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(True, False)\n    expected = (4.0, 0.0, 1.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, True)\n    expected = (2.0, 0.0, 4.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, False)\n    expected = (4.0, 0.0, 0.0)\n    self.assertTupleEqual(out, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_nested_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n\n                def true_fun_inner():\n                    x_ref[()] = 1.0\n\n                def false_fun_inner():\n                    pass\n                return lax.cond(pred, true_fun_inner, false_fun_inner)\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_jvp_with_state(self):\n\n    def f(pred, init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    out_primal, out_tangent = jax.jvp(partial(f, True), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 9.0)\n    self.assertAllClose(out_tangent, 6.0)\n    out_primal, out_tangent = jax.jvp(partial(f, False), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 3.0)\n    self.assertAllClose(out_tangent, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_vmap_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(x_ref[()] < 1, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.vmap(f)(jnp.arange(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_grad_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(True, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.grad(f)(3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def loop(val):\n    iterations = 10\n\n    def apply_carry(x, i):\n        return (jax.grad(fn, argnums=(0,))(x)[0], i)\n    final_val, _ = lax.scan(apply_carry, val, jnp.arange(iterations))\n    return final_val"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(carry, x):\n    return (carry, jnp.dot(x, x))"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(carry, x):\n    return (carry, jnp.dot(x, x))"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(carry, x):\n    return (carry, jnp.dot(x, x))"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body2(i, x):\n    result = jnp.broadcast_to(jnp.sin(x).sum(), x.shape)\n    return result + x"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, refs):\n    x_ref, y_ref = refs\n    y_ref[i] = s * x_ref[i] * jnp.cos(s)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, refs):\n    x_ref, y_ref = refs\n    y_ref[i] = s * x_ref[i] * jnp.cos(s)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, refs):\n    x_ref, y_ref = refs\n    y_ref[i] = s * x_ref[i] * jnp.cos(s)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body2(_, refs):\n    a_ref, b_ref, c_ref, i_ref = refs\n    i = i_ref[()]\n    a = a_ref[i]\n    b = b_ref[()]\n    x = jnp.sin(a)\n    b_ref[()] = jnp.sin(b * x)\n    c_ref[i] = x * b\n    i_ref[()] = i + 1"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body3(i, x_ref):\n    x_ref[()] = jnp.float32(i) * 2.0"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_jvp(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    k1, k2 = random.split(random.PRNGKey(0))\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    t = random.normal(k2, x.shape)\n    y, y_t = jax.jvp(impl, (x,), (t,))\n    y_ref, y_ref_t = jax.jvp(ref, (x,), (t,))\n    self.assertAllClose(y, y_ref)\n    self.assertAllClose(y_t, y_ref_t)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def call(platform, x):\n    target_name = dict(cpu='lapack_sgeqrf_ffi', rocm='hipsolver_geqrf_ffi', cuda='cusolver_geqrf_ffi')[platform]\n    f = jex.ffi.ffi_call if _use_extend else jax.ffi.ffi_call\n    return f(target_name, output_types, input_output_aliases={0: 0}, input_layouts=[x_major_to_minor], output_layouts=[x_major_to_minor, None], **kwargs)(x)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_linearize(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    k1, k2 = random.split(random.PRNGKey(0))\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    y, impl_lin = jax.linearize(impl, x)\n    y_ref, ref_lin = jax.linearize(ref, x)\n    self.assertAllClose(y, y_ref, atol=0.01, rtol=0.01)\n    t = random.normal(k2, x.shape)\n    self.assertAllClose(impl_lin(t), ref_lin(t), atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def call(platform, x):\n    target_name = dict(cpu='lapack_sgeqrf_ffi', rocm='hipsolver_geqrf_ffi', cuda='cusolver_geqrf_ffi')[platform]\n    f = jex.ffi.ffi_call if _use_extend else jax.ffi.ffi_call\n    return f(target_name, output_types, input_output_aliases={0: 0}, input_layouts=[x_major_to_minor], output_layouts=[x_major_to_minor, None], **kwargs)(x)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_vjp(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    key, k1, k2 = random.split(random.PRNGKey(0), 3)\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    y, impl_lin = jax.linearize(impl, x)\n    y_ref, ref_lin = jax.linearize(ref, x)\n    self.assertAllClose(y, y_ref)\n    t = random.normal(k2, x.shape)\n    self.assertAllClose(impl_lin(t), ref_lin(t))\n    y, impl_vjp = jax.vjp(impl, x)\n    y_ref, ref_vjp = jax.vjp(ref, x)\n    self.assertAllClose(y, y_ref)\n    t = random.normal(jax.random.clone(k2), x.shape)\n    y2 = random.normal(jax.random.clone(k1), y.shape)\n    self.assertAllClose(impl_vjp(t), ref_vjp(t))\n    key, k1, k2 = random.split(key, 3)\n    t2 = random.normal(k2, t.shape)\n    (x,), impl_lin2 = jax.linearize(impl_vjp, t2)\n    (x_ref,), ref_lin2 = jax.linearize(ref_vjp, t2)\n    self.assertAllClose(x, x_ref)\n    y2 = random.normal(k1, y.shape)\n    self.assertAllClose(impl_lin2(y2), ref_lin2(y2))\n    (x,), impl_vjp2 = jax.vjp(impl_vjp, t2)\n    (x_ref,), ref_vjp2 = jax.vjp(ref_vjp, t2)\n    self.assertAllClose(x, x_ref)\n    y2 = random.normal(jax.random.clone(k1), y.shape)\n    self.assertAllClose(impl_vjp2((y2,)), ref_vjp2((y2,)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def call(platform, x):\n    target_name = dict(cpu='lapack_sgeqrf_ffi', rocm='hipsolver_geqrf_ffi', cuda='cusolver_geqrf_ffi')[platform]\n    f = jex.ffi.ffi_call if _use_extend else jax.ffi.ffi_call\n    return f(target_name, output_types, input_output_aliases={0: 0}, input_layouts=[x_major_to_minor], output_layouts=[x_major_to_minor, None], **kwargs)(x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_jvp(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    k1, k2 = random.split(random.PRNGKey(0))\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    t = random.normal(k2, x.shape)\n    y, y_t = jax.jvp(impl, (x,), (t,))\n    y_ref, y_ref_t = jax.jvp(ref, (x,), (t,))\n    self.assertAllClose(y, y_ref)\n    self.assertAllClose(y_t, y_ref_t)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_linearize(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    k1, k2 = random.split(random.PRNGKey(0))\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    y, impl_lin = jax.linearize(impl, x)\n    y_ref, ref_lin = jax.linearize(ref, x)\n    self.assertAllClose(y, y_ref, atol=0.01, rtol=0.01)\n    t = random.normal(k2, x.shape)\n    self.assertAllClose(impl_lin(t), ref_lin(t), atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@hp.given(hps.data())\n@hp.settings(deadline=None, print_blob=True, max_examples=jtu.NUM_GENERATED_CASES.value)\ndef test_vjp(self, data):\n    spec = data.draw(func_spec())\n\n    def impl(x):\n        return spec.call((x, jnp.zeros_like(x)))[1]\n\n    def ref(x):\n        return spec.ref((x, jnp.zeros_like(x)))[1]\n    key, k1, k2 = random.split(random.PRNGKey(0), 3)\n    shape = data.draw(hnp.array_shapes(min_dims=spec.min_rank, max_dims=spec.max_rank, min_side=spec.min_dim, max_side=spec.max_dim))\n    x = random.normal(k1, shape)\n    y, impl_lin = jax.linearize(impl, x)\n    y_ref, ref_lin = jax.linearize(ref, x)\n    self.assertAllClose(y, y_ref)\n    t = random.normal(k2, x.shape)\n    self.assertAllClose(impl_lin(t), ref_lin(t))\n    y, impl_vjp = jax.vjp(impl, x)\n    y_ref, ref_vjp = jax.vjp(ref, x)\n    self.assertAllClose(y, y_ref)\n    t = random.normal(jax.random.clone(k2), x.shape)\n    y2 = random.normal(jax.random.clone(k1), y.shape)\n    self.assertAllClose(impl_vjp(t), ref_vjp(t))\n    key, k1, k2 = random.split(key, 3)\n    t2 = random.normal(k2, t.shape)\n    (x,), impl_lin2 = jax.linearize(impl_vjp, t2)\n    (x_ref,), ref_lin2 = jax.linearize(ref_vjp, t2)\n    self.assertAllClose(x, x_ref)\n    y2 = random.normal(k1, y.shape)\n    self.assertAllClose(impl_lin2(y2), ref_lin2(y2))\n    (x,), impl_vjp2 = jax.vjp(impl_vjp, t2)\n    (x_ref,), ref_vjp2 = jax.vjp(ref_vjp, t2)\n    self.assertAllClose(x, x_ref)\n    y2 = random.normal(jax.random.clone(k1), y.shape)\n    self.assertAllClose(impl_vjp2((y2,)), ref_vjp2((y2,)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('scan_body')\ndef body(carry, x):\n    return (carry * x, carry + x)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('scan_body')\ndef body(carry, x):\n    return (carry * x, carry + x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('scan_body')\ndef body(carry, x):\n    return (carry * x, carry + x)"
  },
  {
    "test_code": "def test_simple_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_simple_cond_with_return(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref = refs\n\n            def true_fun():\n                x_ref[()] = 1.0\n                return 4.0\n\n            def false_fun():\n                return 5.0\n            out = lax.cond(pred, true_fun, false_fun)\n            y_ref[...] = out\n        return for_loop.run_state(body, (0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True)\n    self.assertTupleEqual(out, (1.0, 4.0))\n    out = jax.jit(f)(False)\n    self.assertTupleEqual(out, (0.0, 5.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_discharge(self):\n\n    def f0(pred, x_ref, y_ref):\n\n        def true_fun():\n            x_ref[...] = 1.0\n\n        def false_fun():\n            y_ref[...] = 2.0\n        lax.cond(pred, true_fun, false_fun)\n        return (x_ref[...], y_ref[...])\n    ref = lambda x: AbstractRef(core.raise_to_shaped(core.get_aval(x)))\n    f_jaxpr = jax.make_jaxpr(f0)(False, ref(3.0), ref(4.0))\n    jaxpr, _ = discharge_state(f_jaxpr.jaxpr, (), should_discharge=[False, False, True])\n    self.assertEqual(f_jaxpr.effects, {ReadEffect(1), WriteEffect(1), ReadEffect(2), WriteEffect(2)})\n    self.assertEqual(jaxpr.effects, {ReadEffect(1), WriteEffect(1)})\n    self.assertNotIsInstance(jaxpr.invars[2].aval, AbstractRef)\n    self.assertIsInstance(jaxpr.invars[1].aval, AbstractRef)\n    self.assertLen(f_jaxpr.out_avals, 2)\n    self.assertLen(jaxpr.outvars, 3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_with_ref_reuse(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                x_ref[()] = 2.0\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)(0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = 1.0\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = 2.0\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_readonly_refs(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n\n            def true_fun():\n                y_ref[()] = x_ref[()]\n\n            def false_fun():\n                y_ref[()] = x_ref[()] + z_ref[()]\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((1.0, 0.0, 2.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    [run_state_eqn] = jaxpr.eqns\n    *_, cond_eqn = discharge_state(run_state_eqn.params['jaxpr'], ())[0].eqns\n    self.assertIs(cond_eqn.primitive, lax.cond_p)\n    self.assertLen(cond_eqn.invars, 4)\n    self.assertLen(cond_eqn.outvars, 1)\n    self.assertAllClose(jax.jit(f)(True), (1.0, 1.0, 2.0))\n    self.assertAllClose(jax.jit(f)(False), (1.0, 3.0, 2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_simple_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n            b = jnp.array(2.0)\n\n            def true_fun():\n                x_ref[()] = 1.0 * a\n                y_ref[()] = 1.0\n\n            def false_fun():\n                z_ref[()] = 1.0\n                x_ref[()] = 2.0\n                x_ref[()] = 2.0 * b\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_nested_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred1, pred2):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n\n            def true_fun():\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    y_ref[()] = 1.0\n\n                def inner_false_fun():\n                    z_ref[()] = 1.0\n                    x_ref[()] = 2.0\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n\n            def false_fun():\n                a = jnp.array(2.0)\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    z_ref[()] = 4.0\n\n                def inner_false_fun():\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n            lax.cond(pred1, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True, False).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True, True)\n    expected = (2.0, 1.0, 0.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(True, False)\n    expected = (4.0, 0.0, 1.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, True)\n    expected = (2.0, 0.0, 4.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, False)\n    expected = (4.0, 0.0, 0.0)\n    self.assertTupleEqual(out, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_nested_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n\n                def true_fun_inner():\n                    x_ref[()] = 1.0\n\n                def false_fun_inner():\n                    pass\n                return lax.cond(pred, true_fun_inner, false_fun_inner)\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_jvp_with_state(self):\n\n    def f(pred, init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    out_primal, out_tangent = jax.jvp(partial(f, True), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 9.0)\n    self.assertAllClose(out_tangent, 6.0)\n    out_primal, out_tangent = jax.jvp(partial(f, False), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 3.0)\n    self.assertAllClose(out_tangent, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_vmap_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(x_ref[()] < 1, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.vmap(f)(jnp.arange(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_grad_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(True, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.grad(f)(3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(state):\n    it, x, fx, dfx = state\n    step = jnp.linalg.solve(dfx.reshape((-1, fx.size)), fx.ravel()).reshape(fx.shape)\n    x_next = x - step\n    fx, dfx = (func(x_next), jax.jacobian(func)(x_next))\n    return (it + 1, x_next, fx, dfx)"
  },
  {
    "test_code": "def test_simple_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_simple_cond_with_return(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref = refs\n\n            def true_fun():\n                x_ref[()] = 1.0\n                return 4.0\n\n            def false_fun():\n                return 5.0\n            out = lax.cond(pred, true_fun, false_fun)\n            y_ref[...] = out\n        return for_loop.run_state(body, (0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True)\n    self.assertTupleEqual(out, (1.0, 4.0))\n    out = jax.jit(f)(False)\n    self.assertTupleEqual(out, (0.0, 5.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_discharge(self):\n\n    def f0(pred, x_ref, y_ref):\n\n        def true_fun():\n            x_ref[...] = 1.0\n\n        def false_fun():\n            y_ref[...] = 2.0\n        lax.cond(pred, true_fun, false_fun)\n        return (x_ref[...], y_ref[...])\n    ref = lambda x: AbstractRef(core.raise_to_shaped(core.get_aval(x)))\n    f_jaxpr = jax.make_jaxpr(f0)(False, ref(3.0), ref(4.0))\n    jaxpr, _ = discharge_state(f_jaxpr.jaxpr, (), should_discharge=[False, False, True])\n    self.assertEqual(f_jaxpr.effects, {ReadEffect(1), WriteEffect(1), ReadEffect(2), WriteEffect(2)})\n    self.assertEqual(jaxpr.effects, {ReadEffect(1), WriteEffect(1)})\n    self.assertNotIsInstance(jaxpr.invars[2].aval, AbstractRef)\n    self.assertIsInstance(jaxpr.invars[1].aval, AbstractRef)\n    self.assertLen(f_jaxpr.out_avals, 2)\n    self.assertLen(jaxpr.outvars, 3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_with_ref_reuse(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                x_ref[()] = 2.0\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)(0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = 1.0\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = 2.0\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_readonly_refs(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n\n            def true_fun():\n                y_ref[()] = x_ref[()]\n\n            def false_fun():\n                y_ref[()] = x_ref[()] + z_ref[()]\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((1.0, 0.0, 2.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    [run_state_eqn] = jaxpr.eqns\n    *_, cond_eqn = discharge_state(run_state_eqn.params['jaxpr'], ())[0].eqns\n    self.assertIs(cond_eqn.primitive, lax.cond_p)\n    self.assertLen(cond_eqn.invars, 4)\n    self.assertLen(cond_eqn.outvars, 1)\n    self.assertAllClose(jax.jit(f)(True), (1.0, 1.0, 2.0))\n    self.assertAllClose(jax.jit(f)(False), (1.0, 3.0, 2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_simple_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n            b = jnp.array(2.0)\n\n            def true_fun():\n                x_ref[()] = 1.0 * a\n                y_ref[()] = 1.0\n\n            def false_fun():\n                z_ref[()] = 1.0\n                x_ref[()] = 2.0\n                x_ref[()] = 2.0 * b\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_nested_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred1, pred2):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n\n            def true_fun():\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    y_ref[()] = 1.0\n\n                def inner_false_fun():\n                    z_ref[()] = 1.0\n                    x_ref[()] = 2.0\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n\n            def false_fun():\n                a = jnp.array(2.0)\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    z_ref[()] = 4.0\n\n                def inner_false_fun():\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n            lax.cond(pred1, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True, False).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True, True)\n    expected = (2.0, 1.0, 0.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(True, False)\n    expected = (4.0, 0.0, 1.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, True)\n    expected = (2.0, 0.0, 4.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, False)\n    expected = (4.0, 0.0, 0.0)\n    self.assertTupleEqual(out, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_nested_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n\n                def true_fun_inner():\n                    x_ref[()] = 1.0\n\n                def false_fun_inner():\n                    pass\n                return lax.cond(pred, true_fun_inner, false_fun_inner)\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_jvp_with_state(self):\n\n    def f(pred, init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    out_primal, out_tangent = jax.jvp(partial(f, True), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 9.0)\n    self.assertAllClose(out_tangent, 6.0)\n    out_primal, out_tangent = jax.jvp(partial(f, False), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 3.0)\n    self.assertAllClose(out_tangent, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_vmap_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(x_ref[()] < 1, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.vmap(f)(jnp.arange(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_grad_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(True, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.grad(f)(3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_discharge_addupdate_with_slice(self):\n\n    def f(a_ref):\n        ref_addupdate(a_ref, (0, 1), jnp.ones(2, dtype=jnp.dtype('float32')))\n        return []\n    in_avals = [shaped_array_ref((4, 3, 2), jnp.dtype('float32'))]\n    stateful_jaxpr, _, consts, () = pe.trace_to_jaxpr_dynamic(wrap_init(f, 1), in_avals)\n    discharged_jaxpr, _ = discharge_state(stateful_jaxpr, consts)\n    self.assertLen(discharged_jaxpr.invars, 1)\n    self.assertLen(discharged_jaxpr.outvars, 1)\n    self.assertIn(lax.dynamic_update_slice_p, {eqn.primitive for eqn in discharged_jaxpr.eqns})\n    self.assertIn(lax.add_p, {eqn.primitive for eqn in discharged_jaxpr.eqns})\n    self.assertIn(lax.dynamic_slice_p, {eqn.primitive for eqn in discharged_jaxpr.eqns})\n    inval = jnp.arange(24.0, dtype=jnp.float32).reshape((4, 3, 2))\n    refval, = core.eval_jaxpr(discharged_jaxpr, (), inval)\n    self.assertTrue((refval == inval.at[0, 1].add(1.0)).all())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "def test_discharge_addupdate_with_gather(self):\n\n    def f(a_ref):\n        ref_addupdate(a_ref, (jnp.array([0, 1]),), jnp.ones((2, 3), 'float32'))\n        return []\n    in_avals = [shaped_array_ref((4, 3), jnp.dtype('float32'))]\n    stateful_jaxpr, _, consts, () = pe.trace_to_jaxpr_dynamic(wrap_init(f, 1), in_avals)\n    discharged_jaxpr, discharged_consts = discharge_state(stateful_jaxpr, consts)\n    inval = jnp.arange(4 * 3, dtype=jnp.float32).reshape((4, 3))\n    refval, = core.eval_jaxpr(discharged_jaxpr, discharged_consts, inval)\n    self.assertTrue((refval == inval.at[jnp.array([0, 1])].add(1.0)).all())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(i, xy):\n    x, y = xy\n    y = y + jax.grad(lambda z: jnp.sum(jnp.maximum(z, 0.0)))(x)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(init, xs):\n    return jax.lax.scan(f, init=init, xs=xs)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(init, xs):\n    return jax.lax.scan(f, init=init, xs=xs)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(init, xs):\n    return jax.lax.scan(f, init=init, xs=xs)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_swap_jvp(self):\n\n    def f(a):\n        x = a[()]\n        a[()] = jnp.sin(x)\n        return a[()]\n\n    def g(r, rdot):\n        return jax.jvp(f, (r,), (rdot,))\n    in_avals = [shaped_array_ref((), jnp.dtype('float32')), shaped_array_ref((), jnp.dtype('float32'))]\n    jaxpr, _, _, () = pe.trace_to_jaxpr_dynamic(wrap_init(g, 2), in_avals)\n    self.assertEqual(jaxpr.eqns[0].primitive, get_p)\n    self.assertEqual(jaxpr.eqns[1].primitive, get_p)\n    self.assertEqual(jaxpr.eqns[2].primitive, lax.sin_p)\n    self.assertEqual(jaxpr.eqns[3].primitive, lax.cos_p)\n    self.assertEqual(jaxpr.eqns[4].primitive, lax.mul_p)\n    self.assertEqual(jaxpr.eqns[5].primitive, swap_p)\n    self.assertEqual(jaxpr.eqns[6].primitive, swap_p)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_linearize_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    (x, y), f_lin = jax.linearize(f, (1.0, 0.0))\n    self.assertAllClose(x, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    x_t, y_t = f_lin((2.0, 1.0))\n    self.assertAllClose(x_t, 2.0)\n    self.assertAllClose(y_t, 2.0 * np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_vjp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    (x, y), f_vjp = jax.vjp(f, (1.0, 0.0))\n    self.assertAllClose(x, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    (x_ct, y_ct), = f_vjp((0.0, 1.0))\n    self.assertAllClose(x_ct, np.cos(1.0))\n    self.assertAllClose(y_ct, 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_vjp_of_run_state_single(self):\n\n    @run_state\n    def f(x_ref):\n        x = x_ref[...]\n\n        def _body(ref):\n            ref[...] = jnp.sin(ref[...])\n        x = run_state(_body)(x)\n        x_ref[...] = x\n    y, f_lin = jax.linearize(f, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    y_t = f_lin(1.0)\n    self.assertAllClose(y_t, np.cos(1.0))\n    y, f_vjp = jax.vjp(f, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    x_ct, = f_vjp(1.0)\n    self.assertAllClose(x_ct, np.cos(1.0))\n    jtu.check_grads(f, (0.5,), order=3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_simple_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_simple_cond_with_return(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref = refs\n\n            def true_fun():\n                x_ref[()] = 1.0\n                return 4.0\n\n            def false_fun():\n                return 5.0\n            out = lax.cond(pred, true_fun, false_fun)\n            y_ref[...] = out\n        return for_loop.run_state(body, (0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True)\n    self.assertTupleEqual(out, (1.0, 4.0))\n    out = jax.jit(f)(False)\n    self.assertTupleEqual(out, (0.0, 5.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_discharge(self):\n\n    def f0(pred, x_ref, y_ref):\n\n        def true_fun():\n            x_ref[...] = 1.0\n\n        def false_fun():\n            y_ref[...] = 2.0\n        lax.cond(pred, true_fun, false_fun)\n        return (x_ref[...], y_ref[...])\n    ref = lambda x: AbstractRef(core.raise_to_shaped(core.get_aval(x)))\n    f_jaxpr = jax.make_jaxpr(f0)(False, ref(3.0), ref(4.0))\n    jaxpr, _ = discharge_state(f_jaxpr.jaxpr, (), should_discharge=[False, False, True])\n    self.assertEqual(f_jaxpr.effects, {ReadEffect(1), WriteEffect(1), ReadEffect(2), WriteEffect(2)})\n    self.assertEqual(jaxpr.effects, {ReadEffect(1), WriteEffect(1)})\n    self.assertNotIsInstance(jaxpr.invars[2].aval, AbstractRef)\n    self.assertIsInstance(jaxpr.invars[1].aval, AbstractRef)\n    self.assertLen(f_jaxpr.out_avals, 2)\n    self.assertLen(jaxpr.outvars, 3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_with_ref_reuse(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = 1.0\n\n            def false_fun():\n                x_ref[()] = 2.0\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)(0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = 1.0\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = 2.0\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_readonly_refs(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n\n            def true_fun():\n                y_ref[()] = x_ref[()]\n\n            def false_fun():\n                y_ref[()] = x_ref[()] + z_ref[()]\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((1.0, 0.0, 2.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    [run_state_eqn] = jaxpr.eqns\n    *_, cond_eqn = discharge_state(run_state_eqn.params['jaxpr'], ())[0].eqns\n    self.assertIs(cond_eqn.primitive, lax.cond_p)\n    self.assertLen(cond_eqn.invars, 4)\n    self.assertLen(cond_eqn.outvars, 1)\n    self.assertAllClose(jax.jit(f)(True), (1.0, 1.0, 2.0))\n    self.assertAllClose(jax.jit(f)(False), (1.0, 3.0, 2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_simple_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n            b = jnp.array(2.0)\n\n            def true_fun():\n                x_ref[()] = 1.0 * a\n                y_ref[()] = 1.0\n\n            def false_fun():\n                z_ref[()] = 1.0\n                x_ref[()] = 2.0\n                x_ref[()] = 2.0 * b\n            lax.cond(pred, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_nested_cond_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred1, pred2):\n\n        def body(refs):\n            x_ref, y_ref, z_ref = refs\n            a = jnp.array(2.0)\n\n            def true_fun():\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    y_ref[()] = 1.0\n\n                def inner_false_fun():\n                    z_ref[()] = 1.0\n                    x_ref[()] = 2.0\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n\n            def false_fun():\n                a = jnp.array(2.0)\n                b = jnp.array(2.0)\n\n                def inner_true_fun():\n                    x_ref[()] = 1.0 * a\n                    z_ref[()] = 4.0\n\n                def inner_false_fun():\n                    x_ref[()] = 2.0 * b\n                lax.cond(pred2, inner_true_fun, inner_false_fun)\n            lax.cond(pred1, true_fun, false_fun)\n        return run_state(body)((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True, False).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out = jax.jit(f)(True, True)\n    expected = (2.0, 1.0, 0.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(True, False)\n    expected = (4.0, 0.0, 1.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, True)\n    expected = (2.0, 0.0, 4.0)\n    self.assertTupleEqual(out, expected)\n    out = jax.jit(f)(False, False)\n    expected = (4.0, 0.0, 0.0)\n    self.assertTupleEqual(out, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_nested_cond(self):\n\n    def f(pred):\n\n        def body(x_ref):\n\n            def true_fun():\n\n                def true_fun_inner():\n                    x_ref[()] = 1.0\n\n                def false_fun_inner():\n                    pass\n                return lax.cond(pred, true_fun_inner, false_fun_inner)\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, 0.0)\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(True), 1.0)\n    self.assertAllClose(jax.jit(f)(False), 0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_jvp_with_state(self):\n\n    def f(pred, init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(pred, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    out_primal, out_tangent = jax.jvp(partial(f, True), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 9.0)\n    self.assertAllClose(out_tangent, 6.0)\n    out_primal, out_tangent = jax.jvp(partial(f, False), (3.0,), (1.0,))\n    self.assertAllClose(out_primal, 3.0)\n    self.assertAllClose(out_tangent, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_vmap_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(x_ref[()] < 1, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.vmap(f)(jnp.arange(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_grad_not_implemented(self):\n\n    @jax.jit\n    def f(init_value):\n\n        def body(x_ref):\n\n            def true_fun():\n                x_ref[()] = x_ref[()] ** 2\n\n            def false_fun():\n                pass\n            lax.cond(True, true_fun, false_fun)\n        return for_loop.run_state(body, init_value)\n    with self.assertRaises(NotImplementedError):\n        jax.grad(f)(3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_nested_run_state_using_multiple_refs_with_interleaved_consts(self):\n\n    def f(pred):\n\n        @run_state\n        def body(refs):\n            x_ref, o_ref1, o_ref2 = refs\n\n            @run_state\n            def body2(refs):\n                y_ref, o_ref3 = refs\n\n                @run_state\n                def body3(z_ref):\n                    a = jnp.array(2.0)\n                    b = jnp.array(2.0)\n\n                    def true_fun():\n                        x_ref[()] = 1.0 * a\n                        y_ref[()] = 1.0\n\n                    def false_fun():\n                        z_ref[()] = 1.0\n                        x_ref[()] = 2.0\n                        x_ref[()] = 2.0 * b\n                    lax.cond(pred, true_fun, false_fun)\n                o_ref3[...] = body3(0.0)\n            o_ref1[...], o_ref2[...] = body2((0.0, 0.0))\n        return body((0.0, 0.0, 0.0))\n    jaxpr = jax.make_jaxpr(f)(True).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    out_true = jax.jit(f)(True)\n    expected_true = (2.0, 1.0, 0.0)\n    self.assertAllClose(out_true, expected_true)\n    out_false = jax.jit(f)(False)\n    expected_false = (4.0, 0.0, 1.0)\n    self.assertAllClose(out_false, expected_false)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(x):\n    return jax.pure_callback(_callback, x, x)"
  },
  {
    "test_code": "def test_while_with_state_in_body(self):\n\n    def f(x, y, z):\n\n        @run_state\n        def body(x_ref):\n\n            def cond(i):\n                return i < y\n\n            def body(i):\n                x_ref[...] += z\n                return i + 1\n            lax.while_loop(cond, body, 0)\n        return body(x)\n    jaxpr = jax.make_jaxpr(f)(0, 5, 2).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 5, 2), 10)\n    self.assertAllClose(jax.jit(f)(1, 2, 3), 7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(x):\n    return jax.pure_callback(_callback, x, x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body(self):\n\n    def f(x, w, y, zs):\n\n        @run_state\n        def body(refs):\n            x_ref, w_ref = refs\n\n            def body(y, z):\n                x_ref[...] += y\n                w_ref[...] += z\n                return (y + 1, ())\n            lax.scan(body, y, zs)\n        return body((x, w))\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(f)(0, 1, 5, zs).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(f)(0, 1, 5, zs), (35, 11))\n    self.assertAllClose(jax.jit(f)(1, 1, 2, zs), (21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def body(x):\n    return jax.pure_callback(_callback, x, x)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_vjp_of_run_state_single(self):\n\n    @run_state\n    def f(x_ref):\n        x = x_ref[...]\n\n        def _body(ref):\n            ref[...] = jnp.sin(ref[...])\n        x = run_state(_body)(x)\n        x_ref[...] = x\n    y, f_lin = jax.linearize(f, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    y_t = f_lin(1.0)\n    self.assertAllClose(y_t, np.cos(1.0))\n    y, f_vjp = jax.vjp(f, 1.0)\n    self.assertAllClose(y, np.sin(1.0))\n    x_ct, = f_vjp(1.0)\n    self.assertAllClose(x_ct, np.cos(1.0))\n    jtu.check_grads(f, (0.5,), order=3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_nontrivial_run_state_jit(self):\n\n    def f(refs):\n        x_ref, y_ref = refs\n\n        @jax.jit\n        def g():\n            x = x_ref[...] * y_ref[...]\n            y_ref[...] = x * 2\n            x_ref[...] = y_ref[...] + x_ref[...]\n        g()\n    x, y = run_state(f)((2, 3))\n    self.assertEqual(x, 2 + 2 * 3 * 2)\n    self.assertEqual(y, 2 * 3 * 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_scan_with_state_in_body_nested(self):\n\n    @run_state\n    def g(refs):\n        a_ref, x_ref, w_ref, y_ref, zs_ref = refs\n\n        def f(x, w, y, zs):\n\n            @run_state\n            def loop(refs):\n                x_ref, w_ref = refs\n\n                def body(y, z):\n                    x_ref[...] += y\n                    w_ref[...] += z\n                    a_ref[...] += z\n                    return (y + 1, ())\n                lax.scan(body, y, zs)\n            a_ref[...] += 1\n            out = loop((x, w))\n            a_ref[...] += 1\n            return out\n        x, w = f(x_ref[...], w_ref[...], y_ref[...], zs_ref[...])\n        x_ref[...] = x\n        w_ref[...] = w\n    zs = jnp.arange(5)\n    jaxpr = jax.make_jaxpr(g)((1, 0, 1, 5, zs)).jaxpr\n    self.assertEmpty(jaxpr.effects)\n    self.assertAllClose(jax.jit(g)((1, 0, 1, 5, zs))[:3], (13, 35, 11))\n    self.assertAllClose(jax.jit(g)((1, 1, 1, 2, zs))[:3], (13, 21, 11))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_jvp_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n    xy, xy_t = jax.jvp(f, ((2.0, 1.0),), ((3.0, 1.0),))\n    self.assertAllClose(xy, (2.0, np.sin(2.0)))\n    self.assertAllClose(xy_t, (3.0, 3 * np.cos(2.0)))\n    x, x_t = jax.jvp(lambda x: f((x, 0.0))[1], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_jvp_of_run_state_with_zero_tangent(self):\n\n    @run_state\n    def f(refs):\n        x_ref, z_ref, y_ref = refs\n        del z_ref\n        y_ref[...] = jnp.sin(x_ref[...])\n    x, x_t = jax.jvp(lambda x: f((x, 0.0, 0.0))[2], (2.0,), (3.0,))\n    self.assertAllClose(x, np.sin(2.0))\n    self.assertAllClose(x_t, 3 * np.cos(2.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_grad_of_run_state(self):\n\n    @run_state\n    def f(refs):\n        x_ref, y_ref = refs\n        y_ref[...] = jnp.sin(x_ref[...])\n\n    def sin(x):\n        return f((x, 0.0))[1]\n    x_g = jax.grad(sin)(1.0)\n    self.assertAllClose(x_g, np.cos(1.0))\n    x_g2 = jax.grad(jax.grad(sin))(1.0)\n    self.assertAllClose(x_g2, -np.sin(1.0))\n    x_g3 = jax.grad(jax.grad(jax.grad(sin)))(1.0)\n    self.assertAllClose(x_g3, -np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/state_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  }
]