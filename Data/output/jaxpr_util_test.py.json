[
  {
    "test_code": "def test_primitives(self):\n\n    def f(x, y):\n        s = jit(jnp.sin)(x)\n        return jnp.sin(s) + jnp.cos(y)\n    hist = jaxpr_util.primitives(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    primitives = ['add', 'sin', 'cos']\n    primitives.append('pjit')\n    for k in primitives:\n        assert k in hist, k\n    self.assertEqual(hist['sin'], 2)\n    self.assertTrue(all((count == 1 for k, count in hist.items() if k != 'sin')))",
    "assertions": [
      "assert k in hist, k"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_primitives_by_source(self):\n\n    def f(x, y):\n        s = jnp.sin(x)\n        return jnp.sin(s) + jnp.cos(y)\n    hist = jaxpr_util.primitives_by_source(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    sin_keys = [k for k in hist.keys() if k.startswith('sin @ ')]\n    rem_keys = [k for k in hist.keys() if not k.startswith('sin @ ')]\n    self.assertEqual(sum((hist[k] for k in sin_keys)), 2)\n    self.assertTrue(all((hist[k] == 1 for k in rem_keys)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_primitives_by_shape(self):\n\n    def f(x, y):\n\n        def sub(x, y):\n            return jnp.sum(jnp.array([x, y]))\n        s = jit(sub)(x, y)\n        return jnp.sin(s) + jnp.cos(y)\n    hist = jaxpr_util.primitives_by_shape(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    t = '64' if config.enable_x64.value else '32'\n    shapes = [f'add :: float{t}[]', f'sin :: float{t}[]', f'cos :: float{t}[]', f'reduce_sum :: float{t}[]', f'concatenate :: float{t}[2]', f'pjit :: float{t}[]']\n    for k in shapes:\n        self.assertEqual(hist[k], 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_source_locations(self):\n\n    def f(x, y):\n        s = jnp.sin(x)\n        return jnp.sin(s) + jnp.cos(y)\n    hist = jaxpr_util.source_locations(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    self.assertEqual(sum(hist.values()), 4)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_print_histogram(self):\n\n    def f(x, y):\n        s = jit(jnp.sin)(x)\n        return jnp.sin(s) + jnp.cos(y)\n    hist = jaxpr_util.primitives_by_source(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    jaxpr_util.print_histogram(hist)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_pprof_equation_profile(self):\n\n    def f(x, y):\n        s = jit(jnp.sin)(x)\n        return jnp.sin(s) + jnp.cos(y)\n    profile_gz = jaxpr_util.pprof_equation_profile(make_jaxpr(f)(1.0, 1.0).jaxpr)\n    profile_proto = gzip.decompress(profile_gz)\n    json_str = xla_client._xla.pprof_profile_to_json(profile_proto)\n    profile = json.loads(json_str)\n    self.assertSetEqual({'sampleType', 'sample', 'stringTable', 'location', 'function'}, set(profile.keys()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_util_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  }
]