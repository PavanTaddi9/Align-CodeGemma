[
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def test_multi_indexing_destination_ref(self):\n    if not self.INTERPRET:\n        self.skipTest('Only supported in interpret mode')\n\n    def kernel(x_ref, o_ref):\n        o_ref[...] = jnp.zeros_like(o_ref)\n        new_o_ref = o_ref.at[pl.ds(0, 8)].at[0].at[pl.ds(0, 4), pl.ds(0, 4)]\n        new_o_ref[...] = x_ref[...]\n    x = jax.random.normal(jax.random.key(0), shape=(4, 4))\n    result = pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct((16, 16, 16), x.dtype), interpret=True)(x)\n    expected = jnp.zeros((16, 16, 16)).at[0, 0:4, 0:4].set(x)\n    np.testing.assert_array_equal(result, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.product(indexer_type=['state', 'pallas'], case=_INDEXING_TEST_CASES)\ndef test_can_store_with_ref_at(self, indexer_type, case):\n    if self.INTERPRET:\n        self.skipTest('TODO: fails in interpret mode.')\n    in_shape, indexers, val_shape = case\n    dtype = jnp.float32\n\n    def body(x_ref, y_ref):\n        y_ref[...] = jnp.zeros_like(y_ref)\n        for indexer in indexers[:-1]:\n            y_ref = y_ref.at[indexer]\n        if indexer_type == 'state':\n            x = x_ref[...]\n            y_ref[indexers[-1]] = x\n        elif indexer_type == 'pallas':\n            x = pl.load(x_ref, ...)\n            pl.store(y_ref, indexers[-1], x)\n    val = random.normal(random.key(0), val_shape, dtype=dtype)\n    x = np.zeros(in_shape, dtype=dtype)\n    y = x\n    for indexer in indexers:\n        if not isinstance(indexer, tuple):\n            indexer = (indexer,)\n        indexer = tuple(map(_maybe_ds_to_slice, indexer))\n        y = y[indexer]\n    assert y.shape == val_shape\n    y[...] = val\n    out = self.pallas_call(body, out_shape=x)(val)\n    self.assertAllClose(out, x)",
    "assertions": [
      "assert y.shape == val_shape"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def ref(x):\n    return spec.ref((x, jnp.zeros_like(x)))[1]"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func(D0):\n\n    def shift(R, dR, **unused_kwargs):\n        return R + dR\n\n    def apply_fn(R):\n        return D0 * R\n    Rinit = jax.random.uniform(split, (n, 3), minval=0.0, maxval=5.0, dtype=jnp.float32)\n\n    def move(R, i):\n        F = apply_fn(R)\n        return (shift(R, 0.001 * F), jnp.array([0.0]))\n    move = remat(move)\n    R, temp = lax.scan(move, Rinit, jnp.arange(2))\n    return R[0, 0]"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "def func():\n\n    def dma_kernel(x, y):\n\n        def body(dma_sem, sem):\n            pltpu.async_copy(x, y, dma_sem).wait()\n            pltpu.semaphore_signal(sem)\n            pltpu.semaphore_wait(sem)\n        pl.run_scoped(body, pltpu.SemaphoreType.DMA, pltpu.SemaphoreType.REGULAR)\n    x = jnp.arange(128 * 128, dtype=jnp.float32).reshape(128, 128)\n    y = pl.pallas_call(dma_kernel, out_shape=x)(x)\n    return jnp.array_equal(x, y).astype(jnp.float32)"
  },
  {
    "test_code": "@hp.given(hps.data())\ndef test_vmap_nd_indexing(self, data):\n    self.skipTest('TODO(necula): enable this test; was in jax_triton.')\n    vmap_shape = data.draw(hnp.array_shapes(min_dims=1, max_dims=3, min_side=2), label='vmap_shape')\n    el_shape = data.draw(hnp.array_shapes(min_dims=2), label='el_shape')\n    nd_indexer = data.draw(nd_indexer_strategy(el_shape), label='nd_indexer')\n    expected_shape = jax.eval_shape(lambda x: x[nd_indexer], jax.ShapeDtypeStruct(el_shape, jnp.float32))\n    ref = lambda x: x[nd_indexer]\n\n    def kernel(x_ref, y_ref):\n        x = pl.load(x_ref, nd_indexer)\n        pl.store(y_ref, (slice(None),) * len(y_ref.shape), x)\n    func = pl.pallas_call(kernel, out_shape=expected_shape)\n    shape = el_shape\n    for vmap_dim in vmap_shape[::-1]:\n        index = data.draw(hps.integers(min_value=0, max_value=max(0, len(shape) - 2)), label='index')\n        shape = (*shape[:index], vmap_dim, *shape[index:])\n        ref = jax.vmap(ref, in_axes=index, out_axes=0)\n        func = jax.vmap(func, in_axes=index, out_axes=0)\n    key = random.PRNGKey(0)\n    x = random.normal(key, shape, dtype=jnp.float32)\n    expected = ref(x)\n    y = func(x)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((m, n), floatx))\ndef load(x_ref, o_ref):\n    x = pl.load(x_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]))\n    pl.store(o_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]), x + 1.0)"
  },
  {
    "test_code": "@parameterized.product(indexer_type=['state', 'pallas'], case=_INDEXING_TEST_CASES)\ndef test_can_load_with_ref_at(self, indexer_type, case):\n    if not jtu.if_cloud_tpu_at_least(2024, 12, 19):\n        self.skipTest('Requires libtpu built after 2024-12-19')\n    if self.INTERPRET:\n        self.skipTest('TODO: fails in interpret mode.')\n    in_shape, indexers, out_shape = case\n    dtype = jnp.float32\n\n    def body(x_ref, y_ref):\n        for indexer in indexers[:-1]:\n            x_ref = x_ref.at[indexer]\n        if indexer_type == 'state':\n            x = x_ref[indexers[-1]]\n            y_ref[...] = x\n        elif indexer_type == 'pallas':\n            x = pl.load(x_ref, indexers[-1])\n            pl.store(y_ref, ..., x)\n    x = random.normal(random.key(0), in_shape, dtype=dtype)\n    y = x\n    for indexer in indexers:\n        if not isinstance(indexer, tuple):\n            indexer = (indexer,)\n        indexer = tuple(map(_maybe_ds_to_slice, indexer))\n        y = y[indexer]\n    assert y.shape == out_shape\n    out = self.pallas_call(body, out_shape=y)(x)\n    self.assertAllClose(out, y)",
    "assertions": [
      "assert y.shape == out_shape"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((m, n), floatx))\ndef load(x_ref, o_ref):\n    x = pl.load(x_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]))\n    pl.store(o_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]), x + 1.0)"
  },
  {
    "test_code": "@parameterized.product(indexer_type=['state', 'pallas'], case=_INDEXING_TEST_CASES)\ndef test_can_store_with_ref_at(self, indexer_type, case):\n    if self.INTERPRET:\n        self.skipTest('TODO: fails in interpret mode.')\n    in_shape, indexers, val_shape = case\n    dtype = jnp.float32\n\n    def body(x_ref, y_ref):\n        y_ref[...] = jnp.zeros_like(y_ref)\n        for indexer in indexers[:-1]:\n            y_ref = y_ref.at[indexer]\n        if indexer_type == 'state':\n            x = x_ref[...]\n            y_ref[indexers[-1]] = x\n        elif indexer_type == 'pallas':\n            x = pl.load(x_ref, ...)\n            pl.store(y_ref, indexers[-1], x)\n    val = random.normal(random.key(0), val_shape, dtype=dtype)\n    x = np.zeros(in_shape, dtype=dtype)\n    y = x\n    for indexer in indexers:\n        if not isinstance(indexer, tuple):\n            indexer = (indexer,)\n        indexer = tuple(map(_maybe_ds_to_slice, indexer))\n        y = y[indexer]\n    assert y.shape == val_shape\n    y[...] = val\n    out = self.pallas_call(body, out_shape=x)(val)\n    self.assertAllClose(out, x)",
    "assertions": [
      "assert y.shape == val_shape"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((m, n), floatx))\ndef load(x_ref, o_ref):\n    x = pl.load(x_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]))\n    pl.store(o_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]), x + 1.0)"
  },
  {
    "test_code": "@parameterized.product(indexer_type=['state', 'pallas'], slice_type=['slice', 'ds'])\n@hp.given(ref_shape=hps.sampled_from(((8, 8, 32), (7, 7, 33))), indices=hps.tuples(hps.integers(0, 6), hps.integers(0, 6), hps.integers(0, 31)), strides=hps.tuples(hps.integers(1, 10), hps.integers(1, 10), hps.integers(1, 10)))\ndef test_strided_load_and_store(self, indexer_type, slice_type, ref_shape, indices, strides):\n    if self.INTERPRET:\n        self.skipTest('TODO: fails in interpret mode.')\n    ref_shape = (*ref_shape, 128)\n    indices = (*indices, 0)\n    strides = (*strides, 1)\n    vec_shape = [(l - i + s - 1) // s for l, i, s in zip(ref_shape, indices, strides)]\n    dtype = jnp.float32\n\n    def body(x_ref, y_ref1, y_ref2):\n        if slice_type == 'slice':\n            slices = tuple((slice(i, rs, s) for i, rs, s in zip(indices, ref_shape, strides)))\n        else:\n            slices = tuple((pl.ds(i, vs, s) for i, vs, s in zip(indices, vec_shape, strides)))\n        if indexer_type == 'state':\n            y_ref1[...] = x_ref[slices]\n            y_ref2[slices] = y_ref1[...]\n        elif indexer_type == 'pallas':\n            pl.store(y_ref1, ..., pl.load(x_ref, slices))\n            pl.store(y_ref2, slices, pl.load(y_ref1, ...))\n    x = random.normal(random.key(0), ref_shape, dtype=dtype)\n    y1, y2 = self.pallas_call(body, out_shape=[jax.ShapeDtypeStruct(vec_shape, dtype), jax.ShapeDtypeStruct(ref_shape, dtype)])(x)\n    slices = tuple((slice(i, l, s) for l, i, s in zip(ref_shape, indices, strides)))\n    expected = x[slices]\n    self.assertAllClose(y1, expected, err_msg='Strided Load Error')\n    self.assertAllClose(y2[slices], expected, err_msg='Strided Store Error')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((m, n), floatx))\ndef load(x_ref, o_ref):\n    x = pl.load(x_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]))\n    pl.store(o_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]), x + 1.0)"
  },
  {
    "test_code": "def test_load_with_dynamic_2nd_minor_index(self):\n    if pltpu is None:\n        self.skipTest('No TPU module available.')\n    m, n = (32, 128)\n    k = 10\n    start = 2\n\n    def kernel(x_ref, indices, y_ref):\n        y_ref[...] = pl.load(x_ref, pl.ds(indices[0], k))\n    x = jnp.arange(m * n, dtype=jnp.int32).reshape((m, n))\n    indices = jnp.array([start])\n    res = self.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct((k, n), jnp.int32), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=0, in_specs=[pl.BlockSpec(memory_space=pltpu.VMEM), pl.BlockSpec(memory_space=pltpu.SMEM)]))(x, indices)\n    self.assertAllClose(res, x[start:start + k, :], atol=0.0, rtol=0.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/indexing_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((m, n), floatx))\ndef load(x_ref, o_ref):\n    x = pl.load(x_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]))\n    pl.store(o_ref, (jnp.arange(m)[:, None], jnp.arange(n)[None, :]), x + 1.0)"
  }
]