[
  {
    "test_code": "def test_is_float_0(self):\n    self.assertTrue(jaxlib.jax_jit._is_float0(np.zeros((5, 5), dtype=jax.float0)))\n    self.assertFalse(jaxlib.jax_jit._is_float0(np.zeros((5, 5))))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jax_jit_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.parameters([jax.device_put, _cpp_device_put])\ndef test_device_put_on_numpy_arrays(self, device_put_function):\n    device = jax.devices()[0]\n    for dtype in jtu.supported_dtypes():\n        value = np.zeros((3, 4), dtype=dtype)\n        output_buffer = device_put_function(value, device=device)\n        self.assertFalse(output_buffer.aval.weak_type)\n        dtype = dtypes.canonicalize_dtype(dtype)\n        self.assertEqual(output_buffer.aval, core.ShapedArray((3, 4), dtype))\n        self.assertEqual(output_buffer.dtype, dtype)\n        np.testing.assert_array_equal(output_buffer, np.zeros((3, 4), dtype=dtype))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jax_jit_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_arg_signature_of_value(self):\n    \"\"\"Tests the C++ code-path.\"\"\"\n    jax_enable_x64 = config.enable_x64.value\n    for dtype in jtu.supported_dtypes():\n        value = dtype(0)\n        signature = jaxlib.jax_jit._ArgSignatureOfValue(value, jax_enable_x64)\n        self.assertEqual(signature.dtype, jax.device_put(value).dtype)\n        self.assertEqual(signature.shape, ())\n        self.assertFalse(signature.weak_type)\n    for dtype in jtu.supported_dtypes():\n        value = np.zeros((3, 4), dtype=dtype)\n        signature = jaxlib.jax_jit._ArgSignatureOfValue(value, jax_enable_x64)\n        self.assertEqual(signature.dtype, jax.device_put(value).dtype)\n        self.assertEqual(signature.shape, (3, 4))\n        self.assertFalse(signature.weak_type)\n    int_type = dtypes.canonicalize_dtype(np.int64)\n    float_type = dtypes.canonicalize_dtype(np.float64)\n    complex_type = dtypes.canonicalize_dtype(np.complex128)\n    signature = jaxlib.jax_jit._ArgSignatureOfValue(1, jax_enable_x64)\n    self.assertEqual(signature.dtype, jax.device_put(1).dtype)\n    self.assertEqual(signature.dtype, int_type)\n    self.assertEqual(signature.shape, ())\n    self.assertTrue(signature.weak_type)\n    signature = jaxlib.jax_jit._ArgSignatureOfValue(1.0, jax_enable_x64)\n    self.assertEqual(signature.dtype, jax.device_put(1.0).dtype)\n    self.assertEqual(signature.dtype, float_type)\n    self.assertEqual(signature.shape, ())\n    self.assertTrue(signature.weak_type)\n    for bool_value in [True, False]:\n        signature = jaxlib.jax_jit._ArgSignatureOfValue(bool_value, jax_enable_x64)\n        self.assertEqual(signature.dtype, jax.device_put(bool_value).dtype)\n        self.assertEqual(signature.dtype, np.bool_)\n        self.assertEqual(signature.shape, ())\n        self.assertTrue(signature.weak_type)\n    if not (jax_enable_x64 and jtu.test_device_matches(['tpu'])):\n        signature = jaxlib.jax_jit._ArgSignatureOfValue(1 + 1j, jax_enable_x64)\n        self.assertEqual(signature.dtype, jax.device_put(1 + 1j).dtype)\n        self.assertEqual(signature.dtype, complex_type)\n        self.assertEqual(signature.shape, ())\n        self.assertTrue(signature.weak_type)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jax_jit_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_jit_compile_vmap(self):\n\n    @jax.vmap\n    def fn(x):\n        R1 = jnp.array([[x[0], 0, 0], [0, x[0], 0], [0, 0, x[0]]])\n        R2 = jnp.array([[x[0], 0, 0], [0, x[1], 0], [0, 0, x[2]]])\n        H = jnp.eye(4)\n        H = H.at[:3, :3].set(R2.T)\n        pos = H @ jnp.concatenate([x, jnp.array([1.0])])\n        return (pos, R1)\n    jitted_fn = jax.jit(fn)\n    v1, v2 = jitted_fn(jnp.zeros((2, 3)))\n    v1_expected = jnp.array([[0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0]])\n    v2_expected = jnp.zeros((2, 3, 3))\n    self.assertArraysEqual(v1, v1_expected)\n    self.assertArraysEqual(v2, v2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jax_jit_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_device_put_on_python_scalars(self):\n    device = jax.devices()[0]\n    int_type = dtypes.canonicalize_dtype(np.int64)\n    float_type = dtypes.canonicalize_dtype(np.float64)\n    complex_type = dtypes.canonicalize_dtype(np.complex128)\n    res = np.asarray(_cpp_device_put(1, device))\n    self.assertEqual(res, 1)\n    self.assertEqual(res.dtype, int_type)\n    self.assertEqual(jnp.asarray(1).dtype, res.dtype)\n    res = np.asarray(_cpp_device_put(1.0, device))\n    self.assertEqual(res, 1.0)\n    self.assertEqual(res.dtype, float_type)\n    self.assertEqual(jnp.asarray(1.0).dtype, res.dtype)\n    for bool_value in [True, False]:\n        res = np.asarray(_cpp_device_put(bool_value, device))\n        self.assertEqual(res, np.asarray(bool_value))\n        self.assertEqual(res.dtype, np.bool_)\n        self.assertEqual(jnp.asarray(bool_value).dtype, res.dtype)\n    if not (config.enable_x64.value and jtu.test_device_matches(['tpu'])):\n        res = np.asarray(_cpp_device_put(1 + 1j, device))\n        self.assertEqual(res, 1 + 1j)\n        self.assertEqual(res.dtype, complex_type)\n        self.assertEqual(jnp.asarray(1 + 1j).dtype, res.dtype)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jax_jit_test.py",
    "function": "def _cpp_device_put(value, device):\n    aval = core.shaped_abstractify(value)\n    return pxla.batched_device_put(aval, jax.sharding.SingleDeviceSharding(device), [value], [device])"
  }
]