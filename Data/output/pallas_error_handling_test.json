[
  {
    "test_code": "def test_non_singular_stride(self):\n    input_arr = jax.random.uniform(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    out_shape = jax.ShapeDtypeStruct((8, 16), jnp.float32)\n    grid_spec = pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=0, in_specs=[pl.BlockSpec(memory_space=pltpu.TPUMemorySpace.VMEM)], out_specs=pl.BlockSpec(memory_space=pltpu.TPUMemorySpace.VMEM))\n\n    @functools.partial(pl.pallas_call, out_shape=out_shape, grid_spec=grid_spec)\n    def test_kernel(input_ref, output_ref):\n        x = input_ref[:, ::8]\n        output_ref[...] = x\n    with self.assertRaisesRegex(error_handling.MosaicError, 'Not Implemented: Stride on last dim is not 1'):\n        test_kernel(input_arr)\n    tb_string = ''\n    try:\n        test_kernel(input_arr)\n    except error_handling.MosaicError as e:\n        tb_string = traceback.format_tb(e.__traceback__)\n        tb_string = ''.join(tb_string)\n    self.assertEndsWith(tb_string, 'x = input_ref[:, ::8]\\n')\n\n    @jax.jit\n    def kernel_in_jitted_fn(x):\n        return test_kernel(x)\n    with self.subTest('inside_jitted_fn'):\n        tb_string = ''\n        try:\n            kernel_in_jitted_fn(input_arr)\n        except error_handling.MosaicError as e:\n            tb_string = traceback.format_tb(e.__traceback__)\n            tb_string = ''.join(tb_string)\n        self.assertEndsWith(tb_string, 'x = input_ref[:, ::8]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_error_handling_test.py",
    "function": "def test_kernel(o_ref, sem_ref):\n    o_ref[...] = jnp.zeros_like(o_ref)\n    pltpu.semaphore_signal(sem_ref.at[0], 1)\n    pltpu.semaphore_signal(sem_ref.at[1], 2)\n    pltpu.semaphore_signal(sem_ref.at[2], 3)\n    pltpu.semaphore_signal(sem_ref.at[3], 4)\n    o_ref[0, 0] = pltpu.semaphore_read(sem_ref.at[0])\n    o_ref[1, 0] = pltpu.semaphore_read(sem_ref.at[1])\n    o_ref[2, 0] = pltpu.semaphore_read(sem_ref.at[2])\n    o_ref[3, 0] = pltpu.semaphore_read(sem_ref.at[3])\n    pltpu.semaphore_wait(sem_ref.at[0], 4)\n    pltpu.semaphore_wait(sem_ref.at[1], 3)\n    pltpu.semaphore_wait(sem_ref.at[2], 2)\n    pltpu.semaphore_wait(sem_ref.at[3], 1)\n    o_ref[4, 0] = pltpu.semaphore_read(sem_ref.at[0])\n    o_ref[5, 0] = pltpu.semaphore_read(sem_ref.at[1])\n    o_ref[6, 0] = pltpu.semaphore_read(sem_ref.at[2])\n    o_ref[7, 0] = pltpu.semaphore_read(sem_ref.at[3])"
  },
  {
    "test_code": "def test_invalid_smem_vmem_verification_error(self):\n    input_arr = jax.random.uniform(jax.random.key(0), (2, 2), dtype=jnp.float32)\n    out_shape = jax.ShapeDtypeStruct((1, 1), jnp.float32)\n    grid_spec = pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=0, in_specs=[pl.BlockSpec(memory_space=pltpu.TPUMemorySpace.VMEM)], out_specs=pl.BlockSpec(memory_space=pltpu.TPUMemorySpace.SMEM))\n\n    @functools.partial(pl.pallas_call, out_shape=out_shape, grid_spec=grid_spec)\n    def test_kernel(input_ref, output_ref):\n        output_ref[0, 0] = input_ref[0, 0]\n    with self.assertRaisesRegex(error_handling.VerificationError, \"'memref.store' op failed to verify that type of 'value' matches element type of 'memref'\"):\n        test_kernel(input_arr)\n    tb_string = ''\n    try:\n        test_kernel(input_arr)\n    except error_handling.MosaicError as e:\n        tb_string = traceback.format_tb(e.__traceback__)\n        tb_string = ''.join(tb_string)\n    self.assertEndsWith(tb_string, 'output_ref[0, 0] = input_ref[0, 0]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_error_handling_test.py",
    "function": "def test_kernel(o_ref, sem_ref):\n    o_ref[...] = jnp.zeros_like(o_ref)\n    pltpu.semaphore_signal(sem_ref.at[0], 1)\n    pltpu.semaphore_signal(sem_ref.at[1], 2)\n    pltpu.semaphore_signal(sem_ref.at[2], 3)\n    pltpu.semaphore_signal(sem_ref.at[3], 4)\n    o_ref[0, 0] = pltpu.semaphore_read(sem_ref.at[0])\n    o_ref[1, 0] = pltpu.semaphore_read(sem_ref.at[1])\n    o_ref[2, 0] = pltpu.semaphore_read(sem_ref.at[2])\n    o_ref[3, 0] = pltpu.semaphore_read(sem_ref.at[3])\n    pltpu.semaphore_wait(sem_ref.at[0], 4)\n    pltpu.semaphore_wait(sem_ref.at[1], 3)\n    pltpu.semaphore_wait(sem_ref.at[2], 2)\n    pltpu.semaphore_wait(sem_ref.at[3], 1)\n    o_ref[4, 0] = pltpu.semaphore_read(sem_ref.at[0])\n    o_ref[5, 0] = pltpu.semaphore_read(sem_ref.at[1])\n    o_ref[6, 0] = pltpu.semaphore_read(sem_ref.at[2])\n    o_ref[7, 0] = pltpu.semaphore_read(sem_ref.at[3])"
  }
]