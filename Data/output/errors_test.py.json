[
  {
    "test_code": "def test_custom_jvp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args\n\n    @jax.custom_jvp\n    def f(x):\n        return err(x)\n\n    @f.defjvp\n    def f_jvp(x, tx):\n        x = err(x)\n        return (x, tx)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.jvp(f, [1.0], [1.0]), [('f_jvp', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_custom_vjp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args[0]\n\n    @jax.custom_vjp\n    def f(x):\n        return err(x)\n\n    def fwd(x):\n        return (x, ())\n\n    def fwd_err(x):\n        x = err(x)\n        return (x, ())\n\n    def bwd(_, g):\n        return (g,)\n\n    def bwd_err(_, g):\n        g = err(g)\n        return (g,)\n    f.defvjp(fwd_err, bwd)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('fwd_err', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    f.defvjp(fwd, bwd_err)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('bwd_err', 'g = err(g)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_nans(self, filter_mode):\n\n    @jax.jit\n    def f(x):\n        return 0.0 / x\n    f(2.0)\n\n    def g():\n        return f(0.0)\n    with jax.debug_nans(True):\n        check_filtered_stack_trace(self, ZeroDivisionError, g, [('g', 'return f(0.)'), ('f', 'return 0. / x')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_custom_jvp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args\n\n    @jax.custom_jvp\n    def f(x):\n        return err(x)\n\n    @f.defjvp\n    def f_jvp(x, tx):\n        x = err(x)\n        return (x, tx)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.jvp(f, [1.0], [1.0]), [('f_jvp', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_custom_vjp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args[0]\n\n    @jax.custom_vjp\n    def f(x):\n        return err(x)\n\n    def fwd(x):\n        return (x, ())\n\n    def fwd_err(x):\n        x = err(x)\n        return (x, ())\n\n    def bwd(_, g):\n        return (g,)\n\n    def bwd_err(_, g):\n        g = err(g)\n        return (g,)\n    f.defvjp(fwd_err, bwd)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('fwd_err', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    f.defvjp(fwd, bwd_err)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('bwd_err', 'g = err(g)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_nans(self, filter_mode):\n\n    @jax.jit\n    def f(x):\n        return 0.0 / x\n    f(2.0)\n\n    def g():\n        return f(0.0)\n    with jax.debug_nans(True):\n        check_filtered_stack_trace(self, ZeroDivisionError, g, [('g', 'return f(0.)'), ('f', 'return 0. / x')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_grad_norm(self):\n    e = None\n    try:\n        with jax.debug_nans(True):\n            jax.grad(jnp.linalg.norm)(jnp.zeros((3, 3), jnp.float32))\n    except FloatingPointError as exc:\n        e = exc\n    self.assertIsNot(e, None)\n    self.assertIn('invalid value', str(e))\n    if sys.version_info >= (3, 11):\n        self.assertIsInstance(e.__cause__, source_info_util.JaxStackTraceBeforeTransformation)\n    else:\n        self.assertIsInstance(e.__cause__.__cause__, source_info_util.JaxStackTraceBeforeTransformation)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_custom_jvp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args\n\n    @jax.custom_jvp\n    def f(x):\n        return err(x)\n\n    @f.defjvp\n    def f_jvp(x, tx):\n        x = err(x)\n        return (x, tx)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.jvp(f, [1.0], [1.0]), [('f_jvp', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_custom_vjp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args[0]\n\n    @jax.custom_vjp\n    def f(x):\n        return err(x)\n\n    def fwd(x):\n        return (x, ())\n\n    def fwd_err(x):\n        x = err(x)\n        return (x, ())\n\n    def bwd(_, g):\n        return (g,)\n\n    def bwd_err(_, g):\n        g = err(g)\n        return (g,)\n    f.defvjp(fwd_err, bwd)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('fwd_err', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    f.defvjp(fwd, bwd_err)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('bwd_err', 'g = err(g)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_nans(self, filter_mode):\n\n    @jax.jit\n    def f(x):\n        return 0.0 / x\n    f(2.0)\n\n    def g():\n        return f(0.0)\n    with jax.debug_nans(True):\n        check_filtered_stack_trace(self, ZeroDivisionError, g, [('g', 'return f(0.)'), ('f', 'return 0. / x')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_lax_cond(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        return lax.cond(True, err, lambda _: (), ())\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.cond(True, err, lambda _: (), ())'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_custom_jvp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args\n\n    @jax.custom_jvp\n    def f(x):\n        return err(x)\n\n    @f.defjvp\n    def f_jvp(x, tx):\n        x = err(x)\n        return (x, tx)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.jvp(f, [1.0], [1.0]), [('f_jvp', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_custom_vjp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args[0]\n\n    @jax.custom_vjp\n    def f(x):\n        return err(x)\n\n    def fwd(x):\n        return (x, ())\n\n    def fwd_err(x):\n        x = err(x)\n        return (x, ())\n\n    def bwd(_, g):\n        return (g,)\n\n    def bwd_err(_, g):\n        g = err(g)\n        return (g,)\n    f.defvjp(fwd_err, bwd)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('fwd_err', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    f.defvjp(fwd, bwd_err)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('bwd_err', 'g = err(g)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_nans(self, filter_mode):\n\n    @jax.jit\n    def f(x):\n        return 0.0 / x\n    f(2.0)\n\n    def g():\n        return f(0.0)\n    with jax.debug_nans(True):\n        check_filtered_stack_trace(self, ZeroDivisionError, g, [('g', 'return f(0.)'), ('f', 'return 0. / x')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_lax_scan(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def f():\n        return lax.scan(err, (), (), 3)\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.scan(err, (), (), 3)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_nested_jit(self, filter_mode):\n\n    @jit\n    def innermost(x):\n        assert False\n\n    @jit\n    def inbetween(x):\n        return 1 + innermost(x)\n\n    @jit\n    def outermost(x):\n        return 2 + inbetween(x)\n    f = lambda: outermost(jnp.array([1, 2]))\n    check_filtered_stack_trace(self, AssertionError, f, [('<lambda>', 'f = lambda: outermost'), ('outermost', 'return 2 + inbetween(x)'), ('inbetween', 'return 1 + innermost(x)'), ('innermost', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_nested_jit_and_vmap(self, filter_mode):\n\n    @jit\n    def innermost(x):\n        assert False\n\n    @jit\n    def inbetween(x):\n        return 1 + vmap(innermost)(x)\n\n    @jit\n    def outermost(x):\n        return 2 + inbetween(x)\n    f = lambda: outermost(jnp.array([1, 2]))\n    check_filtered_stack_trace(self, AssertionError, f, [('<lambda>', 'f = lambda: outermost'), ('outermost', 'return 2 + inbetween(x)'), ('inbetween', 'return 1 + vmap(innermost)(x)'), ('innermost', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_nested_jit_and_grad(self, filter_mode):\n\n    @jit\n    def innermost(x):\n        assert False\n\n    @jit\n    def inbetween(x):\n        return 1 + grad(innermost)(x)\n\n    @jit\n    def outermost(x):\n        return 2 + inbetween(x)\n    f = lambda: outermost(jnp.array([1, 2]))\n    check_filtered_stack_trace(self, TypeError, f, [('<lambda>', 'f = lambda: outermost'), ('outermost', 'return 2 + inbetween(x)'), ('inbetween', 'return 1 + grad(innermost)(x)')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_cond(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        return lax.cond(True, err, lambda _: (), ())\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.cond(True, err, lambda _: (), ())'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_switch(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        branches = [lambda _: (), err, lambda _: ()]\n        return lax.switch(1, branches, ())\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.switch(1, branches, ())'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_scan(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def f():\n        return lax.scan(err, (), (), 3)\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.scan(err, (), (), 3)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_fori_loop(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def f():\n        return lax.fori_loop(0, 3, err, ())\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.fori_loop(0, 3, err, ())'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_while_loop(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def f():\n        pred = lambda _: False\n        return lax.while_loop(pred, err, ())\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.while_loop(pred, err, ())'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_map(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        xs = jnp.ones(3)\n        return lax.map(err, xs)\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.map(err, xs)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_custom_root(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def g(x):\n        return (x - 1.0) ** 2.0\n\n    def solve(*_):\n        return 1.0\n\n    def f1():\n        return lax.custom_root(g, 0.0, err, solve)\n\n    def f2():\n        return lax.custom_root(g, 0.0, solve, err)\n\n    def f3():\n        return lax.custom_root(err, 0.0, solve, solve)\n    check_filtered_stack_trace(self, AssertionError, f1, [('f1', 'return lax.custom_root(g, 0., err, solve)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, f2, [('f2', 'return lax.custom_root(g, 0., solve, err)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, f3, [('f3', 'return lax.custom_root(err, 0., solve, solve)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_custom_linear_solve(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n    matvec = lambda v: v\n    solve = lambda mv, b: 1.0\n    b = 1.0\n\n    def f1():\n        return lax.custom_linear_solve(err, b, solve)\n\n    def f2():\n        return lax.custom_linear_solve(matvec, b, err)\n    check_filtered_stack_trace(self, AssertionError, f1, [('f1', 'return lax.custom_linear_solve(err, b, solve)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, f2, [('f2', 'return lax.custom_linear_solve(matvec, b, err)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_lax_associative_scan(self, filter_mode):\n\n    def err(*_):\n        assert False\n        return ()\n\n    def f():\n        xs = jnp.arange(4.0)\n        return lax.associative_scan(err, xs)\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return lax.associative_scan(err, xs)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_custom_jvp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args\n\n    @jax.custom_jvp\n    def f(x):\n        return err(x)\n\n    @f.defjvp\n    def f_jvp(x, tx):\n        x = err(x)\n        return (x, tx)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.jvp(f, [1.0], [1.0]), [('f_jvp', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_custom_vjp(self, filter_mode):\n\n    def err(*args):\n        assert False\n        return args[0]\n\n    @jax.custom_vjp\n    def f(x):\n        return err(x)\n\n    def fwd(x):\n        return (x, ())\n\n    def fwd_err(x):\n        x = err(x)\n        return (x, ())\n\n    def bwd(_, g):\n        return (g,)\n\n    def bwd_err(_, g):\n        g = err(g)\n        return (g,)\n    f.defvjp(fwd_err, bwd)\n    check_filtered_stack_trace(self, AssertionError, lambda: f(1.0), [('f', 'return err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('fwd_err', 'x = err(x)'), ('err', 'assert False')], filter_mode=filter_mode)\n    f.defvjp(fwd, bwd_err)\n    check_filtered_stack_trace(self, AssertionError, lambda: jax.grad(f)(1.0), [('bwd_err', 'g = err(g)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_jvp(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        p = (1.0,)\n        t = (0.0,)\n        return jax.jvp(err, p, t)\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return jax.jvp(err, p, t)'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_vjp(self, filter_mode):\n\n    def err(_):\n        assert False\n        return ()\n\n    def f():\n        x = 1.0\n        return jax.vjp(err, x)[0]\n    check_filtered_stack_trace(self, AssertionError, f, [('f', 'return jax.vjp(err, x)[0]'), ('err', 'assert False')], filter_mode=filter_mode)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_debug_nans(self, filter_mode):\n\n    @jax.jit\n    def f(x):\n        return 0.0 / x\n    f(2.0)\n\n    def g():\n        return f(0.0)\n    with jax.debug_nans(True):\n        check_filtered_stack_trace(self, ZeroDivisionError, g, [('g', 'return f(0.)'), ('f', 'return 0. / x')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_cause_chain(self, filter_mode):\n\n    @jit\n    def inner(x):\n        raise ValueError('inner')\n\n    @jit\n    def outer(x):\n        try:\n            inner(x)\n        except ValueError as e:\n            raise TypeError('outer') from e\n    f = lambda: outer(1.0)\n    check_filtered_stack_trace(self, TypeError, f, [('<lambda>', 'f = lambda: outer'), ('outer', 'raise TypeError')], filter_mode=filter_mode)\n    e = get_exception(TypeError, f)\n    if sys.version_info >= (3, 11):\n        assert any(('For simplicity' in x for x in e.__notes__))\n        self.assertIsInstance(e.__cause__, ValueError)\n    else:\n        self.assertIsInstance(e.__cause__, jax.errors.SimplifiedTraceback)\n        self.assertIsInstance(e.__cause__.__cause__, ValueError)",
    "assertions": [
      "assert any(('For simplicity' in x for x in e.__notes__))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  },
  {
    "test_code": "def test_null_traceback(self, filter_mode):\n\n    class TestA:\n        pass\n\n    def f(a):\n        return a + 1\n\n    def err():\n        a = TestA()\n        return jit(f)(a)\n    check_filtered_stack_trace(self, TypeError, err, [('err', 'return jit(f)(a)')], filter_mode=filter_mode)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/errors_test.py",
    "function": "def check_filtered_stack_trace(test, etype, f, frame_patterns=(), filter_mode='remove_frames'):\n    with config.traceback_filtering(filter_mode):\n        test.assertRaises(etype, f)\n        e = get_exception(etype, f)\n    c = e.__cause__\n    if filter_mode == 'quiet_remove_frames':\n        if sys.version_info >= (3, 11):\n            assert any(('For simplicity' in x for x in e.__notes__))\n        else:\n            test.assertIsInstance(c, jax.errors.SimplifiedTraceback)\n    elif filter_mode == 'remove_frames':\n        test.assertIsInstance(c, traceback_util.UnfilteredStackTrace)\n    else:\n        test.assertFalse(isinstance(c, traceback_util.UnfilteredStackTrace))\n    if frame_patterns:\n        frames = []\n        for frame, lineno in traceback.walk_tb(e.__traceback__):\n            if filter_mode == 'tracebackhide':\n                if '__tracebackhide__' in frame.f_locals.keys():\n                    continue\n            frames.append((frame, lineno))\n        c_tb = traceback.format_list(traceback.StackSummary.extract(frames))\n        for (fname_pat, line_pat), frame_fmt in zip(reversed(frame_patterns), reversed(c_tb)):\n            file = re.escape(__file__)\n            fname_pat = re.escape(fname_pat)\n            line_pat = re.escape(line_pat)\n            full_pat = f'  File \"{file}\", line [0-9]+, in {fname_pat}\\\\n\\\\s*{line_pat}'\n            test.assertRegex(frame_fmt, full_pat)"
  }
]