[
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(x_ref, y_ref):\n    tracer_spy.append(x_ref)\n    y_ref[...] = jnp.log(x_ref[...])"
  },
  {
    "test_code": "def test_double_vmap_of_slicing_kernel_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), floatx), grid=(4,))\n    def sin(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = jnp.sin(x_ref[i])\n    sin_ref = jnp.sin\n    x = jnp.arange(64.0).reshape((8, 4, 2))\n    out = jax.vmap(jax.vmap(sin, in_axes=1), in_axes=0)(x)\n    out_ref = jax.vmap(jax.vmap(sin_ref, in_axes=1), in_axes=0)(x)\n    np.testing.assert_allclose(out, out_ref, atol=0.001, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.skip_on_devices('cpu')\ndef test_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(add_one))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (4, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@colocated_python.colocated_python\ndef add_one(x):\n    return jax.tree.map(lambda x: x + 1, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('cpu')\ndef test_small_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(jax.vmap(add_one)))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (2, 2, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@colocated_python.colocated_python\ndef add_one(x):\n    return jax.tree.map(lambda x: x + 1, x)"
  },
  {
    "test_code": "def test_double_vmap_of_slicing_kernel_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), floatx), grid=(4,))\n    def sin(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = jnp.sin(x_ref[i])\n    sin_ref = jnp.sin\n    x = jnp.arange(64.0).reshape((8, 4, 2))\n    out = jax.vmap(jax.vmap(sin, in_axes=1), in_axes=0)(x)\n    out_ref = jax.vmap(jax.vmap(sin_ref, in_axes=1), in_axes=0)(x)\n    np.testing.assert_allclose(out, out_ref, atol=0.001, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.skip_on_devices('cpu')\ndef test_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(add_one))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (4, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@jax.jit\ndef add_one(x: int) -> int:\n    return x + 1"
  },
  {
    "test_code": "@jtu.skip_on_devices('cpu')\ndef test_small_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(jax.vmap(add_one)))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (2, 2, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@jax.jit\ndef add_one(x: int) -> int:\n    return x + 1"
  },
  {
    "test_code": "def test_double_vmap_of_slicing_kernel_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), floatx), grid=(4,))\n    def sin(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = jnp.sin(x_ref[i])\n    sin_ref = jnp.sin\n    x = jnp.arange(64.0).reshape((8, 4, 2))\n    out = jax.vmap(jax.vmap(sin, in_axes=1), in_axes=0)(x)\n    out_ref = jax.vmap(jax.vmap(sin_ref, in_axes=1), in_axes=0)(x)\n    np.testing.assert_allclose(out, out_ref, atol=0.001, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(ctx, dst, _):\n    i8 = ir.IntegerType.get_signless(8)\n    iota = iota_tensor(m, n, jnp.uint8)\n    (iota > 10).astype(i8, is_signed=False).store_untiled(dst)"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=1, grid=(grid_size,), in_specs=[pl.BlockSpec((8, 128), lambda i, s_ref: (pl.load(s_ref[0], (i,)), 0)), pl.BlockSpec((1, 128), lambda i, s_ref: (0, 0))], out_specs=pl.BlockSpec((32, 128), lambda i, s_ref: (pl.load(s_ref[0], i), 0)), scratch_shapes=[pltpu.SemaphoreType.REGULAR((3,))] if scratch else []))\ndef kernel(s_refs, src, to_store, dst, *scratch_refs):\n    s_ref, s2, s3 = s_refs\n    assert s_ref.shape == (2,)\n    assert s2.shape == (3,)\n    assert s3 is None\n    store_idx = s_ref[pl.program_id(0)]\n    pl.store(dst, (pl.dslice(store_idx, 1), slice(None)), to_store[...])"
  },
  {
    "test_code": "def test_vmap_of_simple_kernel(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((), intx))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    out = jax.vmap(add_one)(jnp.arange(8))\n    out_ref = jnp.arange(1, 9)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_of_simple_kernel_with_in_axes_None(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((), intx))\n    def add(x_ref, y_ref, o_ref):\n        o_ref[()] = x_ref[()] + y_ref[()]\n    out = jax.vmap(add, in_axes=(0, None))(jnp.arange(8), 1)\n    out_ref = jnp.arange(1, 9)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_double_vmap_of_simple_kernel(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((), intx))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    out = jax.vmap(jax.vmap(add_one))(jnp.arange(8).reshape((4, 2)))\n    out_ref = jnp.arange(1, 9).reshape((4, 2))\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_quadruple_vmap_of_simple_kernel(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((), intx))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    out = jax.vmap(jax.vmap(jax.vmap(jax.vmap(add_one))))(jnp.arange(15 * 8).reshape((5, 3, 4, 2)))\n    out_ref = jnp.arange(1, 15 * 8 + 1).reshape((5, 3, 4, 2))\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_quadruple_vmap_of_batched_kernel(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((7,), intx), grid=(7,))\n    def add_one(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = x_ref[i] + 1\n    out = jax.vmap(jax.vmap(jax.vmap(jax.vmap(add_one))))(jnp.arange(15 * 8 * 7).reshape((5, 3, 4, 2, 7)))\n    out_ref = jnp.arange(1, 15 * 8 * 7 + 1).reshape((5, 3, 4, 2, 7))\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_of_slicing_kernel(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = x_ref[i] + 1\n    out = jax.vmap(add_one)(jnp.arange(8).reshape((4, 2)))\n    out_ref = jnp.arange(1, 9).reshape((4, 2))\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_of_kernel_with_input_output_aliases(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((), intx), input_output_aliases={1: 0}, grid=())\n    def add(x_ref, _, o_ref):\n        o_ref[()] = x_ref[()] + o_ref[()] + 1\n    out = jax.vmap(add, in_axes=(0, None))(jnp.arange(8), 1)\n    out_ref = jnp.arange(2, 10)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_of_kernel_with_input_output_aliases_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), intx), input_output_aliases={0: 0}, grid=())\n    def add(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    out = jax.vmap(add, in_axes=1)(jnp.arange(8).reshape((4, 2)))\n    out_ref = jnp.arange(1, 9).reshape((4, 2)).swapaxes(0, 1)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_of_slicing_kernel_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = x_ref[i] + 1\n    add_one_ref = lambda x: x + 1\n    x = jnp.arange(8).reshape((2, 4))\n    out = jax.vmap(add_one, in_axes=1, out_axes=1)(x)\n    out_ref = jax.vmap(add_one_ref, in_axes=1, out_axes=1)(x)\n    np.testing.assert_allclose(out, out_ref)\n    out = jax.vmap(add_one, in_axes=1, out_axes=0)(x)\n    out_ref = jax.vmap(add_one_ref, in_axes=1, out_axes=0)(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_double_vmap_of_slicing_kernel_different_axes(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), floatx), grid=(4,))\n    def sin(x_ref, o_ref):\n        i = pl.program_id(0)\n        o_ref[i] = jnp.sin(x_ref[i])\n    sin_ref = jnp.sin\n    x = jnp.arange(64.0).reshape((8, 4, 2))\n    out = jax.vmap(jax.vmap(sin, in_axes=1), in_axes=0)(x)\n    out_ref = jax.vmap(jax.vmap(sin_ref, in_axes=1), in_axes=0)(x)\n    np.testing.assert_allclose(out, out_ref, atol=0.001, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.skip_on_devices('cpu')\ndef test_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(add_one))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (4, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "@jtu.skip_on_devices('cpu')\ndef test_small_small_large_vmap(self):\n\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), intx), grid=(2,))\n    def add_one(x_ref, o_ref):\n        o_ref[()] = x_ref[()] + 1\n    add_one = jax.vmap(jax.vmap(jax.vmap(add_one)))\n    add_one_ref = lambda x: x + 1\n    x = random.randint(random.key(0), (2, 2, 65536, 2), 0, 10000)\n    out = add_one(x)\n    out_ref = add_one_ref(x)\n    np.testing.assert_allclose(out, out_ref)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def assert_allclose(self, out: jnp.ndarray, expected_out: jnp.ndarray, *, atol: float=1e-05, rtol: float=1e-05):\n    self.assertEqual(out.dtype, expected_out.dtype)\n    np.testing.assert_allclose(out.astype(jnp.float32), expected_out.astype(jnp.float32), atol=atol, rtol=rtol)"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(x, out):\n    mask = x[...] != 0\n    concated_mask = jnp.concatenate([mask, mask], axis=0)\n    concated_x = jnp.concatenate([x[:], x[:]], axis=0)\n    out[:] = lax.select(concated_mask, concated_x, jnp.zeros_like(concated_x))"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(src_dst_ids_ref, x_ref, o_ref, send_sem, recv_sem):\n    barrier_sem = pltpu.get_barrier_semaphore()\n\n    @functools.partial(jax.lax.fori_loop, 0, num_devices, init_val=None)\n    def _(i, _):\n        pltpu.semaphore_signal(barrier_sem, inc=1, device_id=(jnp.int32(i),), device_id_type=pltpu.DeviceIdType.MESH)\n        return None\n    pltpu.semaphore_wait(barrier_sem, num_devices)\n    my_id = lax.axis_index('x')\n    src_dst_ids = src_dst_ids_ref[:]\n    recv_count = 0\n    for i in range(src_dst_ids.shape[0]):\n        src_id = src_dst_ids[i, 0]\n        dst_id = src_dst_ids[i, 1]\n\n        @pl.when(src_id == my_id)\n        def _():\n            dma = pltpu.make_async_remote_copy(src_ref=x_ref, dst_ref=o_ref, send_sem=send_sem, recv_sem=recv_sem, device_id=(dst_id,), device_id_type=pltpu.DeviceIdType.MESH)\n            dma.start()\n            dma.wait_send()\n        recv_count += jnp.where(dst_id == my_id, 1, 0)\n\n    @pl.when(recv_count > 0)\n    def _():\n        fake_dma = pltpu.make_async_remote_copy(src_ref=x_ref.at[pl.ds(0, 8 * recv_count)], dst_ref=o_ref.at[pl.ds(0, 8 * recv_count)], send_sem=send_sem, recv_sem=recv_sem, device_id=(my_id,), device_id_type=pltpu.DeviceIdType.MESH)\n        fake_dma.wait_recv()"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(x_ref, y_ref):\n\n    def body(ready_sem, send_sem, recv_sem):\n        my_id = lax.axis_index('x')\n        my_other_id = lax.axis_index('y')\n        axis_size = lax.psum(1, 'x')\n        if direction == 'right':\n            neighbor = lax.rem(my_id + 1, axis_size)\n        else:\n            neighbor = lax.rem(my_id - 1, axis_size)\n            neighbor = jnp.where(neighbor < 0, neighbor + axis_size, neighbor)\n        pltpu.semaphore_signal(ready_sem, device_id=(my_other_id, neighbor))\n        pltpu.semaphore_wait(ready_sem)\n        copy_done = pltpu.async_remote_copy(x_ref, y_ref, send_sem, recv_sem, device_id=(my_other_id, neighbor))\n        copy_done.wait_send()\n        copy_done.wait_recv()\n    pl.run_scoped(body, pltpu.SemaphoreType.REGULAR, pltpu.SemaphoreType.DMA, pltpu.SemaphoreType.DMA)"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(x_ref, o_ref):\n    o_ref[...] = jnp.sin(x_ref[...])"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "def kernel(x_hbm_ref, y_hbm_ref, o_hbm_ref):\n    grid = (pl.cdiv(m, bm), pl.cdiv(n, bn), pl.cdiv(k, bk))\n\n    def run(acc_scratch_ref):\n        pltpu.emit_pipeline(partial(basic_matmul_kernel, acc_scratch_ref=acc_scratch_ref, k=k), in_specs=[pl.BlockSpec((bm, bk), lambda i, j, k: (i, k)), pl.BlockSpec((bk, bn), lambda i, j, k: (k, j))], out_specs=pl.BlockSpec((bm, bn), lambda i, j, k: (i, j)), grid=grid, core_axis=0, dimension_semantics=(pltpu.PARALLEL, pltpu.PARALLEL, pltpu.ARBITRARY))(x_hbm_ref, y_hbm_ref, o_hbm_ref)\n    accum_dtype = jnp.float32 if jnp.issubdtype(x.dtype, jnp.floating) else jnp.int32\n    pl.run_scoped(run, pltpu.VMEM((bm, bn), accum_dtype))"
  },
  {
    "test_code": "def test_vmap_with_hoisted_consts(self):\n    to_store = np.arange(128, dtype=np.float32).reshape((1, 128))\n    x = np.arange(4 * 16 * 128, dtype=np.float32).reshape((4, 16, 128))\n\n    @jax.vmap\n    @functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((64, 128), x.dtype), grid=(2,), in_specs=[pl.BlockSpec((8, 128), lambda i: (i, 0))], out_specs=pl.BlockSpec((32, 128), lambda i: (i, 0)))\n    def kernel(src, dst):\n        dst[0:1] = to_store\n    with self.assertRaisesRegex(ValueError, 'The kernel function .* captures constants'):\n        kernel(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/pallas_vmap_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((2,), jnp.float32))\ndef kernel(x_ref, o_ref):\n    jax.debug.print('x = {}', x_ref)"
  }
]