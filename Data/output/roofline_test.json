[
  {
    "test_code": "@jtu.parameterized.named_parameters(('abs', lax.abs, float), ('acos', lax.acos, float), ('asin', lax.asin, float), ('atan', lax.atan, float), ('cbrt', lax.cbrt, float), ('ceil', lax.ceil, float), ('conj', lax.conj, complex), ('cos', lax.cos, float), ('cosh', lax.cosh, float), ('exp', lax.exp, float), ('expm1', lax.expm1, float), ('floor', lax.floor, float), ('imag', lax.imag, complex), ('integer_pow', lambda a: lax.integer_pow(a, 5), int), ('is_finite', lax.is_finite, float), ('log', lax.log, float), ('log1p', lax.log1p, float), ('logistic', lax.logistic, float), ('neg', lax.neg, float), ('not', lax.bitwise_not, bool), ('real', lax.real, complex), ('round', lax.round, float), ('rsqrt', lax.rsqrt, float), ('sign', lax.sign, float), ('sin', lax.sin, float), ('sinh', lax.sinh, float), ('sqrt', lax.sqrt, float), ('square', lax.square, float), ('tan', lax.tan, float), ('bessel_i0e', lax.bessel_i0e, float), ('bessel_i1e', lax.bessel_i1e, float), ('digamma', lax.digamma, float), ('erf_inv', lax.erf_inv, float), ('erf', lax.erf, float), ('erfc', lax.erfc, float), ('lgamma', lax.lgamma, float))\ndef test_unary_ops(self, f, dtype):\n    data = jnp.zeros((3, 8), dtype=dtype)\n    out, result = roofline.roofline(f, in_specs=P(), out_specs=P())(data)\n    with self.subTest('flops'):\n        self.assertEqual(result.unfused_flops, 3 * 8)\n    with self.subTest('hbm_bytes'):\n        self.assertEqual(result.unfused_hbm_bytes, data.dtype.itemsize * 3 * 8 + out.dtype.itemsize * 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_binary_ops(self):\n    for f in [lambda a, b: a ^ b, lambda a, b: a | b, lambda a, b: a & b, lambda a, b: a + b, lambda a, b: a - b, lambda a, b: a * b, lambda a, b: a / b, lambda a, b: a < b, lambda a, b: a <= b, lambda a, b: a > b, lambda a, b: a >= b, lambda a, b: a == b, lambda a, b: jnp.minimum(a, b), lambda a, b: jnp.maximum(a, b)]:\n        out, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((3, 8), dtype=int), jnp.ones((3, 8), dtype=int))\n        self.assertEqual(result.unfused_flops, 3 * 8)\n        self.assertEqual(result.unfused_hbm_bytes, 2 * self._bytes_per_word * 3 * 8 + out.dtype.itemsize * 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_broadcast(self):\n    for left, right in [(jnp.zeros((3, 8)), jnp.ones((1, 1))), (jnp.zeros((1, 1)), jnp.ones((3, 8))), (jnp.zeros((3, 8)), jnp.ones((3, 8))), (2.0, jnp.ones((3, 8))), (jnp.zeros((3, 8)), 2.0)]:\n        _, result = roofline.roofline(lambda a, b: a + b, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(left, right)\n        self.assertEqual(result.unfused_flops, 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_no_mesh(self):\n    _, result = roofline.roofline(lambda a, b: a + b, in_specs=(P(), P()), out_specs=P())(jnp.zeros((3, 8), dtype=int), jnp.ones((3, 8), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_no_specs(self):\n    _, result = roofline.roofline(lambda a, b: a + b, mesh=mesh.AbstractMesh(()))(jnp.zeros((3, 8), dtype=int), jnp.ones((3, 8), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_no_mesh_and_no_specs(self):\n    _, result = roofline.roofline(lambda a, b: a + b)(jnp.zeros((3, 8), dtype=int), jnp.ones((3, 8), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * 8)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_dot_general(self):\n    _, result = roofline.roofline(lambda a, b: a @ b, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((3, 7), dtype=int), jnp.ones((7, 5), dtype=int))\n    self.assertEqual(result.unfused_flops, 2 * 3 * 7 * 5)\n    self.assertEqual(result.unfused_hbm_bytes, self._bytes_per_word * (3 * 7 + 7 * 5 + 3 * 5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_reduce_sum_no_axis(self):\n    _, result = roofline.roofline(lambda x: jnp.sum(x), mesh=mesh.AbstractMesh(()), in_specs=P(), out_specs=P())(jnp.zeros((11, 4)))\n    self.assertEqual(result.unfused_flops, 11 * 4 - 1)\n    self.assertEqual(result.unfused_hbm_bytes, self._bytes_per_word * (11 * 4 + 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_reduce_sum_with_axis(self):\n    for axis, expected_flops, expected_memory in [(0, (11 - 1) * 4, 11 * 4 + 4), (1, (4 - 1) * 11, 11 * 4 + 11), ([0, 1], 11 * 4 - 1, 11 * 4 + 1), ([], 0, 11 * 4 + 11 * 4)]:\n        _, result = roofline.roofline(lambda x: jnp.sum(x, axis=axis), mesh=mesh.AbstractMesh(()), in_specs=P(), out_specs=P())(jnp.zeros((11, 4)))\n        self.assertEqual(result.unfused_flops, expected_flops)\n        self.assertEqual(result.unfused_hbm_bytes, self._bytes_per_word * expected_memory)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_ppermute(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(a_spec, b_spec))\n    def ppermute(a, b):\n        a = lax.ppermute(a, ('x', 'y'), perm=((0, 3), (3, 0), (1, 2), (2, 1)))\n        b = lax.ppermute(b, 'z', perm=((1, 0), (0, 1)))\n        return (a, b)\n    _, results = ppermute(a, b)\n    itemsize = 4\n    shard_size = itemsize * 4 * 2\n    xy_ici_bytes = int(shard_size * 2)\n    xy_ici_latency = 2\n    z_ici_bytes = int(shard_size * 2)\n    z_ici_latency = 1\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "def test_one_sized_axis_collectives(self):\n    a_spec = P('x')\n    mesh, (a,) = create_inputs(a_spec, mesh_shape=(1, 2, 4))\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=a_spec, out_specs=a_spec)\n    def one_sized_axis_collectives(a):\n        a = lax.pmin(a, 'x')\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        a = lax.psum_scatter(a, 'x', scatter_dimension=1, tiled=True)\n        a = lax.psum(a, 'x')\n        a = lax.all_to_all(a, 'x', split_axis=0, concat_axis=1, tiled=True)\n        a = lax.ppermute(a, 'x', perm=((1, 0), (0, 1)))\n        return a\n    _, results = one_sized_axis_collectives(a)\n    expected = roofline.RooflineResult(ici_bytes={'x': 0}, ici_latency={'x': 0}, peak_hbm_bytes=4 * 8 * 8)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_scalar_collectives(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(P('z', None), P(('x', 'y'), None)))\n    def scalar_collectives(a, b):\n        a = lax.pmin(a, ('x', 'y'))\n        b = lax.pmax(b, 'z')\n        return (a, b)\n    _, results = scalar_collectives(a, b)\n    itemsize = 4\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    xy_num_axes = 2\n    xy_ici_bytes = int(itemsize * (1 / xy_num_axes * axis_size_m1 + 1 * axis_size / xy_num_axes * axis_size_m1))\n    xy_ici_latency = 2 * 2\n    z_ici_bytes = int(itemsize * 1 * axis_size_m1)\n    z_ici_latency = 2\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_collective_matmul(self):\n    a_spec = P(None, 'x')\n    b_spec = P(None, 'x')\n    c_spec = P('x', None)\n    mesh, (a, b, c) = create_inputs(a_spec, b_spec, c_spec, dtype=jnp.int8)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec, c_spec), out_specs=a_spec)\n    def collective_matmul(a, b, c):\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        a = a[None, :, :]\n        b = b[:, None, :]\n        ab = jnp.einsum('bij,jbk->ikb', a, b).astype(jnp.int8)[..., 0]\n        abc = jnp.einsum('ik,kc->ic', ab, c).astype(jnp.int8)\n        abc = lax.psum_scatter(abc, 'x', scatter_dimension=1, tiled=True)\n        return abc\n    _, results = collective_matmul(a, b, c)\n    itemsize = 1\n    m, k, n = (8, 4, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_mk = mk\n    ici_bytes = 2 * int(itemsize * sharded_mk * axis_size_m1)\n    ici_latency = 2 * 2\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=2 * itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk * axis_size + mk + kn))\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_matmul_psum(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('z', None))\n    def matmul_psum(a, b):\n        c = a @ b\n        c = lax.psum(c, ('x', 'y'))\n        return c\n    _, results = matmul_psum(a, b)\n    itemsize = 4\n    m, k, n = (4, 2, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    num_axes = 2\n    sharded_mn = mn / axis_size / num_axes\n    ici_bytes = 2 * int(itemsize * (sharded_mn / num_axes * axis_size_m1 + sharded_mn * axis_size / num_axes * axis_size_m1))\n    ici_latency = 2 * 2 * 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={axis: ici_bytes for axis in ('x', 'y')}, ici_latency={axis: ici_latency for axis in ('x', 'y')}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * mn)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_all_to_all(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(P(('z', 'x', 'y'), None), P(('x', 'y', 'z'), None)))\n    def all_to_all(a, b):\n        a = lax.all_to_all(a, ('x', 'y'), split_axis=0, concat_axis=1, tiled=True)\n        b = lax.all_to_all(b, 'z', split_axis=0, concat_axis=1, tiled=True)\n        return (a, b)\n    _, results = all_to_all(a, b)\n    itemsize = 4\n    xy_size = itemsize * 8 * 8 / 2\n    xy_ici_bytes = int(xy_size / 2 / 2)\n    xy_ici_latency = 2\n    z_size = itemsize * 8 * 8 / 2 / 2\n    z_ici_bytes = int(z_size / 2)\n    z_ici_latency = 1\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_ppermute(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(a_spec, b_spec))\n    def ppermute(a, b):\n        a = lax.ppermute(a, ('x', 'y'), perm=((0, 3), (3, 0), (1, 2), (2, 1)))\n        b = lax.ppermute(b, 'z', perm=((1, 0), (0, 1)))\n        return (a, b)\n    _, results = ppermute(a, b)\n    itemsize = 4\n    shard_size = itemsize * 4 * 2\n    xy_ici_bytes = int(shard_size * 2)\n    xy_ici_latency = 2\n    z_ici_bytes = int(shard_size * 2)\n    z_ici_latency = 1\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_grad_matmuls(self):\n    a_spec = P(None, 'x')\n    b_spec = P(None, None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec, dtype=jnp.int8)\n\n    @partial(roofline.roofline_and_grad, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('x', None))\n    def collective_matmul(a, b):\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        return a @ b\n    c, fwd_results, bwd_results = collective_matmul(a, b)\n    itemsize = 1\n    m, k, n = (8, 8, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_mk = mk // axis_size\n    ici_bytes = int(itemsize * sharded_mk * axis_size_m1)\n    ici_latency = 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk + kn))\n    self.assertDataclassEqual(fwd_results, expected)\n    bwd_itemsize = 2\n    bwd_ici_bytes = 3 * int(bwd_itemsize * sharded_mk * axis_size_m1)\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': bwd_ici_bytes}, ici_latency={'x': 3 * ici_latency}, hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), peak_hbm_bytes=bwd_itemsize * (mk + kn + mn))\n    self.assertDataclassEqual(bwd_results, expected)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=c.sharding.spec, out_specs=c.sharding.spec)\n    def mul_2(c):\n        return c * 2\n    results = mul_2(c)\n    self.assertLen(results, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_one_sized_axis_collectives(self):\n    a_spec = P('x')\n    mesh, (a,) = create_inputs(a_spec, mesh_shape=(1, 2, 4))\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=a_spec, out_specs=a_spec)\n    def one_sized_axis_collectives(a):\n        a = lax.pmin(a, 'x')\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        a = lax.psum_scatter(a, 'x', scatter_dimension=1, tiled=True)\n        a = lax.psum(a, 'x')\n        a = lax.all_to_all(a, 'x', split_axis=0, concat_axis=1, tiled=True)\n        a = lax.ppermute(a, 'x', perm=((1, 0), (0, 1)))\n        return a\n    _, results = one_sized_axis_collectives(a)\n    expected = roofline.RooflineResult(ici_bytes={'x': 0}, ici_latency={'x': 0}, peak_hbm_bytes=4 * 8 * 8)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_remat(self):\n    a_spec = P('x', None)\n    b_spec = P('x', None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    def fsdp_checkpoint_policy(prim, *args, **kwargs):\n        if prim == lax.all_gather_p and kwargs['axis_name'] == 'x':\n            return True\n        return False\n\n    @partial(roofline.roofline_and_grad, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('x', None))\n    @partial(jax.checkpoint, policy=fsdp_checkpoint_policy)\n    def collective_matmul(a, b):\n        b = lax.all_gather(b, 'x', axis=0, tiled=True)\n        return a @ b\n    _, fwd_results, bwd_results = collective_matmul(a, b)\n    itemsize = 4\n    m, k, n = (4, 8, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_kn = kn // axis_size\n    ici_bytes = int(itemsize * sharded_kn * axis_size_m1)\n    ici_latency = 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk + kn))\n    self.assertDataclassEqual(fwd_results, expected)\n    bwd_itemsize = 2\n    bwd_ici_bytes = 2 * int(bwd_itemsize * sharded_kn * axis_size_m1)\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': bwd_ici_bytes}, ici_latency={'x': 2 * ici_latency}, hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), peak_hbm_bytes=bwd_itemsize * (kn + kn + mn))\n    self.assertDataclassEqual(bwd_results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.custom_vjp\ndef g(x):\n    debug_print('hello: {x}', x=x)\n    return x"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(key1, key2):\n    assert_unconsumed(key1)\n    assert_unconsumed(key2)\n    return jax.random.bits(key1)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.custom_vjp\ndef g(y):\n    return x * y"
  },
  {
    "test_code": "def test_reduce_sum_no_axis(self):\n    _, result = roofline.roofline(lambda x: jnp.sum(x), mesh=mesh.AbstractMesh(()), in_specs=P(), out_specs=P())(jnp.zeros((11, 4)))\n    self.assertEqual(result.unfused_flops, 11 * 4 - 1)\n    self.assertEqual(result.unfused_hbm_bytes, self._bytes_per_word * (11 * 4 + 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.custom_jvp\ndef sum(x):\n    return jnp.sum(x, axis=0)"
  },
  {
    "test_code": "def test_reduce_sum_with_axis(self):\n    for axis, expected_flops, expected_memory in [(0, (11 - 1) * 4, 11 * 4 + 4), (1, (4 - 1) * 11, 11 * 4 + 11), ([0, 1], 11 * 4 - 1, 11 * 4 + 1), ([], 0, 11 * 4 + 11 * 4)]:\n        _, result = roofline.roofline(lambda x: jnp.sum(x, axis=axis), mesh=mesh.AbstractMesh(()), in_specs=P(), out_specs=P())(jnp.zeros((11, 4)))\n        self.assertEqual(result.unfused_flops, expected_flops)\n        self.assertEqual(result.unfused_hbm_bytes, self._bytes_per_word * expected_memory)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.custom_jvp\ndef sum(x):\n    return jnp.sum(x, axis=0)"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "@jax.jit\ndef g(z):\n    with set_xla_metadata(c='d'):\n        return z ** 2 + 1"
  },
  {
    "test_code": "def test_nested(self):\n\n    def f(x, y):\n\n        @jax.jit\n        def g(x):\n            return x * y\n        return g(x) + g(y)\n    _, result = roofline.roofline(f, mesh=mesh.AbstractMesh(()), in_specs=(P(), P()), out_specs=P())(jnp.zeros((11, 4), dtype=int), jnp.ones((11, 4), dtype=int))\n    self.assertEqual(result.unfused_flops, 3 * (11 * 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def g(eps):\n    x = jnp.array(1.0)\n    return jax.grad(f)(x, eps)"
  },
  {
    "test_code": "def test_scalar_collectives(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(P('z', None), P(('x', 'y'), None)))\n    def scalar_collectives(a, b):\n        a = lax.pmin(a, ('x', 'y'))\n        b = lax.pmax(b, 'z')\n        return (a, b)\n    _, results = scalar_collectives(a, b)\n    itemsize = 4\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    xy_num_axes = 2\n    xy_ici_bytes = int(itemsize * (1 / xy_num_axes * axis_size_m1 + 1 * axis_size / xy_num_axes * axis_size_m1))\n    xy_ici_latency = 2 * 2\n    z_ici_bytes = int(itemsize * 1 * axis_size_m1)\n    z_ici_latency = 2\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_collective_matmul(self):\n    a_spec = P(None, 'x')\n    b_spec = P(None, 'x')\n    c_spec = P('x', None)\n    mesh, (a, b, c) = create_inputs(a_spec, b_spec, c_spec, dtype=jnp.int8)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec, c_spec), out_specs=a_spec)\n    def collective_matmul(a, b, c):\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        a = a[None, :, :]\n        b = b[:, None, :]\n        ab = jnp.einsum('bij,jbk->ikb', a, b).astype(jnp.int8)[..., 0]\n        abc = jnp.einsum('ik,kc->ic', ab, c).astype(jnp.int8)\n        abc = lax.psum_scatter(abc, 'x', scatter_dimension=1, tiled=True)\n        return abc\n    _, results = collective_matmul(a, b, c)\n    itemsize = 1\n    m, k, n = (8, 4, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_mk = mk\n    ici_bytes = 2 * int(itemsize * sharded_mk * axis_size_m1)\n    ici_latency = 2 * 2\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=2 * itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk * axis_size + mk + kn))\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_matmul_psum(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('z', None))\n    def matmul_psum(a, b):\n        c = a @ b\n        c = lax.psum(c, ('x', 'y'))\n        return c\n    _, results = matmul_psum(a, b)\n    itemsize = 4\n    m, k, n = (4, 2, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    num_axes = 2\n    sharded_mn = mn / axis_size / num_axes\n    ici_bytes = 2 * int(itemsize * (sharded_mn / num_axes * axis_size_m1 + sharded_mn * axis_size / num_axes * axis_size_m1))\n    ici_latency = 2 * 2 * 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={axis: ici_bytes for axis in ('x', 'y')}, ici_latency={axis: ici_latency for axis in ('x', 'y')}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * mn)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_all_to_all(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(P(('z', 'x', 'y'), None), P(('x', 'y', 'z'), None)))\n    def all_to_all(a, b):\n        a = lax.all_to_all(a, ('x', 'y'), split_axis=0, concat_axis=1, tiled=True)\n        b = lax.all_to_all(b, 'z', split_axis=0, concat_axis=1, tiled=True)\n        return (a, b)\n    _, results = all_to_all(a, b)\n    itemsize = 4\n    xy_size = itemsize * 8 * 8 / 2\n    xy_ici_bytes = int(xy_size / 2 / 2)\n    xy_ici_latency = 2\n    z_size = itemsize * 8 * 8 / 2 / 2\n    z_ici_bytes = int(z_size / 2)\n    z_ici_latency = 1\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_ppermute(self):\n    a_spec = P('z', ('x', 'y'))\n    b_spec = P(('x', 'y'), 'z')\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=(a_spec, b_spec))\n    def ppermute(a, b):\n        a = lax.ppermute(a, ('x', 'y'), perm=((0, 3), (3, 0), (1, 2), (2, 1)))\n        b = lax.ppermute(b, 'z', perm=((1, 0), (0, 1)))\n        return (a, b)\n    _, results = ppermute(a, b)\n    itemsize = 4\n    shard_size = itemsize * 4 * 2\n    xy_ici_bytes = int(shard_size * 2)\n    xy_ici_latency = 2\n    z_ici_bytes = int(shard_size * 2)\n    z_ici_latency = 1\n    expected = roofline.RooflineResult(ici_bytes={'x': xy_ici_bytes, 'y': xy_ici_bytes, 'z': z_ici_bytes}, ici_latency={'x': xy_ici_latency, 'y': xy_ici_latency, 'z': z_ici_latency}, peak_hbm_bytes=itemsize * 2 * 4 * 2)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_grad_matmuls(self):\n    a_spec = P(None, 'x')\n    b_spec = P(None, None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec, dtype=jnp.int8)\n\n    @partial(roofline.roofline_and_grad, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('x', None))\n    def collective_matmul(a, b):\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        return a @ b\n    c, fwd_results, bwd_results = collective_matmul(a, b)\n    itemsize = 1\n    m, k, n = (8, 8, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_mk = mk // axis_size\n    ici_bytes = int(itemsize * sharded_mk * axis_size_m1)\n    ici_latency = 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk + kn))\n    self.assertDataclassEqual(fwd_results, expected)\n    bwd_itemsize = 2\n    bwd_ici_bytes = 3 * int(bwd_itemsize * sharded_mk * axis_size_m1)\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': bwd_ici_bytes}, ici_latency={'x': 3 * ici_latency}, hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), peak_hbm_bytes=bwd_itemsize * (mk + kn + mn))\n    self.assertDataclassEqual(bwd_results, expected)\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=c.sharding.spec, out_specs=c.sharding.spec)\n    def mul_2(c):\n        return c * 2\n    results = mul_2(c)\n    self.assertLen(results, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_one_sized_axis_collectives(self):\n    a_spec = P('x')\n    mesh, (a,) = create_inputs(a_spec, mesh_shape=(1, 2, 4))\n\n    @partial(roofline.roofline, mesh=mesh, in_specs=a_spec, out_specs=a_spec)\n    def one_sized_axis_collectives(a):\n        a = lax.pmin(a, 'x')\n        a = lax.all_gather(a, 'x', axis=1, tiled=True)\n        a = lax.psum_scatter(a, 'x', scatter_dimension=1, tiled=True)\n        a = lax.psum(a, 'x')\n        a = lax.all_to_all(a, 'x', split_axis=0, concat_axis=1, tiled=True)\n        a = lax.ppermute(a, 'x', perm=((1, 0), (0, 1)))\n        return a\n    _, results = one_sized_axis_collectives(a)\n    expected = roofline.RooflineResult(ici_bytes={'x': 0}, ici_latency={'x': 0}, peak_hbm_bytes=4 * 8 * 8)\n    self.assertDataclassEqual(results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  },
  {
    "test_code": "def test_remat(self):\n    a_spec = P('x', None)\n    b_spec = P('x', None)\n    mesh, (a, b) = create_inputs(a_spec, b_spec)\n\n    def fsdp_checkpoint_policy(prim, *args, **kwargs):\n        if prim == lax.all_gather_p and kwargs['axis_name'] == 'x':\n            return True\n        return False\n\n    @partial(roofline.roofline_and_grad, mesh=mesh, in_specs=(a_spec, b_spec), out_specs=P('x', None))\n    @partial(jax.checkpoint, policy=fsdp_checkpoint_policy)\n    def collective_matmul(a, b):\n        b = lax.all_gather(b, 'x', axis=0, tiled=True)\n        return a @ b\n    _, fwd_results, bwd_results = collective_matmul(a, b)\n    itemsize = 4\n    m, k, n = (4, 8, 8)\n    mk = m * k\n    kn = k * n\n    mn = m * n\n    axis_size = 2\n    axis_size_m1 = axis_size - 1\n    sharded_kn = kn // axis_size\n    ici_bytes = int(itemsize * sharded_kn * axis_size_m1)\n    ici_latency = 2\n    expected = roofline.RooflineResult(flops=2 * m * k * n, unfused_flops=2 * m * k * n, ici_bytes={'x': ici_bytes}, ici_latency={'x': ici_latency}, hbm_bytes=itemsize * (mk + kn + mn), unfused_hbm_bytes=itemsize * (mk + kn + mn), peak_hbm_bytes=itemsize * (mk + kn))\n    self.assertDataclassEqual(fwd_results, expected)\n    bwd_itemsize = 2\n    bwd_ici_bytes = 2 * int(bwd_itemsize * sharded_kn * axis_size_m1)\n    expected = roofline.RooflineResult(flops=2 * 2 * m * k * n, unfused_flops=2 * 2 * m * k * n, ici_bytes={'x': bwd_ici_bytes}, ici_latency={'x': 2 * ici_latency}, hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), unfused_hbm_bytes=2 * bwd_itemsize * (mk + kn + mn), peak_hbm_bytes=bwd_itemsize * (kn + kn + mn))\n    self.assertDataclassEqual(bwd_results, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/roofline_test.py",
    "function": "def create_inputs(*shardings: P, dtype: jnp.dtype=jnp.float32, mesh_shape: tuple[int, ...]=(2, 2, 2)) -> tuple[jax.sharding.Mesh, tuple[jax.ShapeDtypeStruct, ...]]:\n    mesh = jtu.create_mesh(mesh_shape, ('x', 'y', 'z'))\n    arrays = []\n    for sharding in shardings:\n        array = jax.ShapeDtypeStruct((8, 8), dtype, sharding=jax.sharding.NamedSharding(mesh, sharding))\n        arrays.append(array)\n    return (mesh, tuple(arrays))"
  }
]