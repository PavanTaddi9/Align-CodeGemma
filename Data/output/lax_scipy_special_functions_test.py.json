[
  {
    "test_code": "@jtu.sample_product(n=[0, 1, 2, 3, 10, 50])\ndef testScipySpecialFunBernoulli(self, n):\n    dtype = jnp.zeros(0).dtype\n    scipy_op = lambda: osp_special.bernoulli(n).astype(dtype)\n    lax_op = functools.partial(lsp_special.bernoulli, n)\n    args_maker = lambda: []\n    self._CheckAgainstNumpy(scipy_op, lax_op, args_maker, atol=0, rtol=1e-05)\n    self._CompileAndCheck(lax_op, args_maker, atol=0, rtol=1e-05)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testGammaSign(self):\n    dtype = jnp.zeros(0).dtype\n    typ = dtype.type\n    testcases = [(np.arange(-10, 0).astype(dtype), np.array([np.nan] * 10, dtype=dtype)), (np.nextafter(np.arange(-5, 0).astype(dtype), typ(-np.inf)), np.array([1, -1, 1, -1, 1], dtype=dtype)), (np.nextafter(np.arange(-5, 0).astype(dtype), typ(np.inf)), np.array([-1, 1, -1, 1, -1], dtype=dtype)), (np.arange(0, 10).astype(dtype), np.ones((10,), dtype)), (np.nextafter(np.arange(0, 10).astype(dtype), typ(np.inf)), np.ones((10,), dtype)), (np.nextafter(np.arange(1, 10).astype(dtype), typ(-np.inf)), np.ones((9,), dtype)), (np.array([-np.inf, -0.0, 0.0, np.inf, np.nan]), np.array([np.nan, -1.0, 1.0, 1.0, np.nan]))]\n    for inp, out in testcases:\n        self.assertArraysEqual(out, lsp_special.gammasgn(inp))\n        self.assertArraysEqual(out, jnp.sign(lsp_special.gamma(inp)))\n        if jtu.parse_version(scipy.__version__) >= (1, 15):\n            self.assertArraysEqual(out, osp_special.gammasgn(inp))\n            self.assertAllClose(osp_special.gammasgn(inp), lsp_special.gammasgn(inp))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testNdtriExtremeValues(self):\n    dtype = jnp.zeros(0).dtype\n    args_maker = lambda: [np.arange(-10, 10).astype(dtype)]\n    rtol = 0.001 if jtu.test_device_matches(['tpu']) else 1e-05\n    self._CheckAgainstNumpy(osp_special.ndtri, lsp_special.ndtri, args_maker, rtol=rtol)\n    self._CompileAndCheck(lsp_special.ndtri, args_maker, rtol=rtol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testRelEntrExtremeValues(self):\n    dtype = jnp.zeros(0).dtype\n    args_maker = lambda: [np.array([-2, -2, -2, -1, -1, -1, 0, 0, 0]).astype(dtype), np.array([-1, 0, 1, -1, 0, 1, -1, 0, 1]).astype(dtype)]\n    rtol = 0.001 if jtu.test_device_matches(['tpu']) else 1e-05\n    self._CheckAgainstNumpy(osp_special.rel_entr, lsp_special.rel_entr, args_maker, rtol=rtol)\n    self._CompileAndCheck(lsp_special.rel_entr, args_maker, rtol=rtol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def _GetArgsMaker(self, rng, shapes, dtypes, np_arrays=True):\n\n    def f():\n        out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n        if np_arrays:\n            return out\n        return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]\n    return f"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def args_maker():\n    x = jnp.array(rng(shape, dtype))\n    if out_dtype in unsigned_dtypes:\n        x = 10 * jnp.abs(x)\n    return [x]"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def args_maker():\n    factor_shape = shape[:-1] + (2 * shape[-1],)\n    a = rng(factor_shape, dtype)\n    return [np.matmul(a, jnp.conj(T(a)))]"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "@parameterized.named_parameters(itertools.chain.from_iterable((map(_pretty_special_fun_name, jtu.sample_product_testcases([dict(op=rec.name, rng_factory=rec.rng_factory, test_autodiff=rec.test_autodiff, nondiff_argnums=rec.nondiff_argnums)], shapes=itertools.combinations_with_replacement(all_shapes, rec.nargs), dtypes=itertools.combinations_with_replacement(rec.dtypes, rec.nargs) if isinstance(rec.dtypes, list) else itertools.product(*rec.dtypes))) for rec in JAX_SPECIAL_FUNCTION_RECORDS)))\n@jax.numpy_rank_promotion('allow')\n@jax.numpy_dtype_promotion('standard')\ndef testScipySpecialFun(self, op, rng_factory, shapes, dtypes, test_autodiff, nondiff_argnums):\n    scipy_op = getattr(osp_special, op)\n    lax_op = getattr(lsp_special, op)\n    rng = rng_factory(self.rng())\n    args_maker = self._GetArgsMaker(rng, shapes, dtypes)\n    args = args_maker()\n    self.assertAllClose(scipy_op(*args), lax_op(*args), atol=0.001, rtol=0.001, check_dtypes=False)\n    self._CompileAndCheck(lax_op, args_maker, rtol=0.0001)\n    if test_autodiff:\n\n        def partial_lax_op(*vals):\n            list_args = list(vals)\n            for i in nondiff_argnums:\n                list_args.insert(i, args[i])\n            return lax_op(*list_args)\n        assert list(nondiff_argnums) == sorted(set(nondiff_argnums))\n        diff_args = [x for i, x in enumerate(args) if i not in nondiff_argnums]\n        jtu.check_grads(partial_lax_op, diff_args, order=1, atol=0.1 if jtu.test_device_matches(['tpu']) else 0.001, rtol=0.1, eps=0.001)",
    "assertions": [
      "assert list(nondiff_argnums) == sorted(set(nondiff_argnums))"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_scipy_special_functions_test.py",
    "function": "def args_maker():\n    p = rng((length,), dtype)\n    return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]"
  }
]