[
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_basic_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_multiple_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_basic_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x, fut = copy_start(x)\n        y = copy_done(x, fut)\n        return y\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_multiple_async_copy_into_vmem(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy(pltpu.VMEM)\n        x1, fut = copy_start(x)\n        x2, fut2 = copy_start(x)\n        y = copy_done(x1, fut)\n        y2 = copy_done(x2, fut2)\n        return (y, y2)\n    if not jtu.is_device_tpu_at_least(5):\n        self.skipTest('TPU v5+ required for async copy into VMEM')\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n\n        def body(_, carry):\n            x = carry\n            copy_start, copy_done = make_async_copy()\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            return y\n        x = jax.lax.fori_loop(0, x.shape[0], body, x)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_staggered_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        copy_start, copy_done = make_async_copy()\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            y = copy_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        y, fut = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut), unroll=2)\n        x = copy_done(y, fut)\n        return x\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_copy(target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n            del aliased_x_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        x, out, sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def copy_done(x: jax.Array, future: Future) -> jax.Array:\n        out, sem = future\n\n        def copy_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        out = pl.pallas_call(copy_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        async_slice_start, async_slice_done = make_async_slice(2)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_slice(index: int):\n\n    def async_slice_start_kernel(x_ref, aliased_x_ref, o_ref, sem):\n        del aliased_x_ref\n        pltpu.make_async_copy(x_ref.at[index], o_ref, sem).start()\n\n    def async_slice_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n        del aliased_o_ref\n        pltpu.make_async_copy(x_ref.at[index], o_ref, sem).wait()\n\n    @jax.named_call\n    def async_slice_start(x: jax.Array) -> tuple[jax.Array, Future]:\n        x, out, sem = pl.pallas_call(async_slice_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), jax.ShapeDtypeStruct(x.shape[1:], x.dtype), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0})(x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def async_slice_done(x: jax.Array, future: Future) -> tuple[jax.Array, Future]:\n        out, sem = future\n        out = pl.pallas_call(async_slice_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape[1:], x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (async_slice_start, async_slice_done)"
  },
  {
    "test_code": "def test_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        x, fut = async_slice_start(x)\n        y = async_slice_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x, 2)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_dynamic_slice(index: jax.Array):\n\n    def async_dslice_start_kernel(index_ref, x_ref, aliased_x_ref, o_ref, sem):\n        del aliased_x_ref\n        pltpu.make_async_copy(x_ref.at[index_ref[0]], o_ref, sem).start()\n\n    def async_dslice_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n        del aliased_o_ref\n        pltpu.make_async_copy(x_ref.at[0], o_ref, sem).wait()\n\n    @jax.named_call\n    def async_dslice_start(x: jax.Array) -> tuple[jax.Array, Future]:\n        x, out, sem = pl.pallas_call(async_dslice_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), jax.ShapeDtypeStruct(x.shape[1:], x.dtype), pltpu.SemaphoreType.DMA(())), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=1, in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE))), input_output_aliases={1: 0})(index[None], x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def async_dslice_done(x: jax.Array, future: Future) -> tuple[jax.Array, Future]:\n        out, sem = future\n        out = pl.pallas_call(async_dslice_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape[1:], x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (async_dslice_start, async_dslice_done)"
  },
  {
    "test_code": "def test_multi_async_dynamic_slice(self):\n\n    @jax.jit\n    def f(x, i, j):\n        async_slice_start, async_slice_done = make_async_dynamic_slice(i)\n        async_slice_start2, async_slice_done2 = make_async_dynamic_slice(j)\n        x, fut = async_slice_start(x)\n        x2, fut2 = async_slice_start2(x)\n        y = async_slice_done(x, fut)\n        y2 = async_slice_done2(x2, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y, y2 = f(x, 2, 3)\n    np.testing.assert_array_equal(y, x[2])\n    np.testing.assert_array_equal(y2, x[3])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_dynamic_slice(index: jax.Array):\n\n    def async_dslice_start_kernel(index_ref, x_ref, aliased_x_ref, o_ref, sem):\n        del aliased_x_ref\n        pltpu.make_async_copy(x_ref.at[index_ref[0]], o_ref, sem).start()\n\n    def async_dslice_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n        del aliased_o_ref\n        pltpu.make_async_copy(x_ref.at[0], o_ref, sem).wait()\n\n    @jax.named_call\n    def async_dslice_start(x: jax.Array) -> tuple[jax.Array, Future]:\n        x, out, sem = pl.pallas_call(async_dslice_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), jax.ShapeDtypeStruct(x.shape[1:], x.dtype), pltpu.SemaphoreType.DMA(())), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=1, in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE))), input_output_aliases={1: 0})(index[None], x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def async_dslice_done(x: jax.Array, future: Future) -> tuple[jax.Array, Future]:\n        out, sem = future\n        out = pl.pallas_call(async_dslice_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape[1:], x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (async_dslice_start, async_dslice_done)"
  },
  {
    "test_code": "def test_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(i, carry):\n            x, ys = carry\n            copy_start, copy_done = make_async_dynamic_slice(i)\n            x, fut = copy_start(x)\n            y = copy_done(x, fut)\n            ys = ys.at[i].set(y)\n            return (x, ys)\n        _, y = jax.lax.fori_loop(0, x.shape[0], body, (x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_dynamic_slice(index: jax.Array):\n\n    def async_dslice_start_kernel(index_ref, x_ref, aliased_x_ref, o_ref, sem):\n        del aliased_x_ref\n        pltpu.make_async_copy(x_ref.at[index_ref[0]], o_ref, sem).start()\n\n    def async_dslice_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n        del aliased_o_ref\n        pltpu.make_async_copy(x_ref.at[0], o_ref, sem).wait()\n\n    @jax.named_call\n    def async_dslice_start(x: jax.Array) -> tuple[jax.Array, Future]:\n        x, out, sem = pl.pallas_call(async_dslice_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), jax.ShapeDtypeStruct(x.shape[1:], x.dtype), pltpu.SemaphoreType.DMA(())), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=1, in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE))), input_output_aliases={1: 0})(index[None], x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def async_dslice_done(x: jax.Array, future: Future) -> tuple[jax.Array, Future]:\n        out, sem = future\n        out = pl.pallas_call(async_dslice_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape[1:], x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (async_dslice_start, async_dslice_done)"
  },
  {
    "test_code": "def test_staggered_full_copy_in_a_loop(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n        copy_start, _ = make_async_dynamic_slice(jnp.array(0))\n        x, fut = copy_start(x)\n\n        def body(i, carry):\n            x, fut, ys = carry\n            _, copy_done = make_async_dynamic_slice(i)\n            y = copy_done(x, fut)\n            copy_start, _ = make_async_dynamic_slice(i + 1)\n            ys = ys.at[i].set(y)\n            x, fut = copy_start(x)\n            return (x, fut, ys)\n        x, fut, ys = jax.lax.fori_loop(0, x.shape[0] - 1, body, (x, fut, y), unroll=1)\n        _, copy_done = make_async_dynamic_slice(x.shape[0] - 1)\n        y = copy_done(x, fut)\n        ys = ys.at[x.shape[0] - 1].set(y)\n        return ys\n    x = jax.random.normal(jax.random.key(0), (16, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_dynamic_slice(index: jax.Array):\n\n    def async_dslice_start_kernel(index_ref, x_ref, aliased_x_ref, o_ref, sem):\n        del aliased_x_ref\n        pltpu.make_async_copy(x_ref.at[index_ref[0]], o_ref, sem).start()\n\n    def async_dslice_done_kernel(x_ref, o_ref, sem, aliased_o_ref):\n        del aliased_o_ref\n        pltpu.make_async_copy(x_ref.at[0], o_ref, sem).wait()\n\n    @jax.named_call\n    def async_dslice_start(x: jax.Array) -> tuple[jax.Array, Future]:\n        x, out, sem = pl.pallas_call(async_dslice_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), jax.ShapeDtypeStruct(x.shape[1:], x.dtype), pltpu.SemaphoreType.DMA(())), grid_spec=pltpu.PrefetchScalarGridSpec(num_scalar_prefetch=1, in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE))), input_output_aliases={1: 0})(index[None], x)\n        return (x, (out, sem))\n\n    @jax.named_call\n    def async_dslice_done(x: jax.Array, future: Future) -> tuple[jax.Array, Future]:\n        out, sem = future\n        out = pl.pallas_call(async_dslice_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape[1:], x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={1: 0})(x, out, sem)\n        return out\n    return (async_dslice_start, async_dslice_done)"
  },
  {
    "test_code": "def test_basic_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_remote_copy(axis_name: str, direction: str='right', target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, send_sem, recv_sem):\n            del aliased_x_ref\n            axis_size = jax.lax.psum(1, axis_name)\n            left_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) - 1 + axis_size, axis_size)\n            right_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) + 1, axis_size)\n            if direction == 'right':\n                src_neighbor = left_neighbor\n                dst_neighbor = right_neighbor\n            else:\n                src_neighbor = right_neighbor\n                dst_neighbor = left_neighbor\n            barrier_sem = pltpu.get_barrier_semaphore()\n            pltpu.semaphore_signal(barrier_sem, device_id=src_neighbor, core_index=0)\n            pltpu.semaphore_wait(barrier_sem, 1)\n            pltpu.make_async_remote_copy(x_ref, o_ref, send_sem, recv_sem, device_id=dst_neighbor).start()\n        x, out, send_sem, recv_sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(()), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0}, compiler_params=pltpu.TPUCompilerParams(collective_id=0, has_side_effects=True))(x)\n        return (x, (out, send_sem, recv_sem))\n\n    @jax.named_call\n    def send_done(x: jax.Array, future: Future) -> jax.Array:\n        _, send_sem, _ = future\n\n        def send_done_kernel(x_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, x_ref, send_sem).wait()\n        x = pl.pallas_call(send_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(x, send_sem)\n        return x\n\n    @jax.named_call\n    def recv_done(x: jax.Array, future: Future) -> jax.Array:\n        out, _, recv_sem = future\n\n        def send_done_kernel(x_ref, o_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, send_sem).wait()\n        out = pl.pallas_call(send_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, recv_sem)\n        return out\n    return (copy_start, send_done, recv_done)"
  },
  {
    "test_code": "def test_multi_remote_copy(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x', direction='right')\n        copy_start2, send_done2, recv_done2 = make_async_remote_copy('x', direction='left')\n        x, fut = copy_start(x)\n        x, fut2 = copy_start2(x)\n        x = send_done(x, fut)\n        x = send_done2(x, fut2)\n        y = recv_done(x, fut)\n        y2 = recv_done2(x, fut2)\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    y_expected = jnp.roll(x, shift=1, axis=0)\n    y2_expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, y_expected)\n    np.testing.assert_array_equal(y2, y2_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_remote_copy(axis_name: str, direction: str='right', target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, send_sem, recv_sem):\n            del aliased_x_ref\n            axis_size = jax.lax.psum(1, axis_name)\n            left_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) - 1 + axis_size, axis_size)\n            right_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) + 1, axis_size)\n            if direction == 'right':\n                src_neighbor = left_neighbor\n                dst_neighbor = right_neighbor\n            else:\n                src_neighbor = right_neighbor\n                dst_neighbor = left_neighbor\n            barrier_sem = pltpu.get_barrier_semaphore()\n            pltpu.semaphore_signal(barrier_sem, device_id=src_neighbor, core_index=0)\n            pltpu.semaphore_wait(barrier_sem, 1)\n            pltpu.make_async_remote_copy(x_ref, o_ref, send_sem, recv_sem, device_id=dst_neighbor).start()\n        x, out, send_sem, recv_sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(()), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0}, compiler_params=pltpu.TPUCompilerParams(collective_id=0, has_side_effects=True))(x)\n        return (x, (out, send_sem, recv_sem))\n\n    @jax.named_call\n    def send_done(x: jax.Array, future: Future) -> jax.Array:\n        _, send_sem, _ = future\n\n        def send_done_kernel(x_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, x_ref, send_sem).wait()\n        x = pl.pallas_call(send_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(x, send_sem)\n        return x\n\n    @jax.named_call\n    def recv_done(x: jax.Array, future: Future) -> jax.Array:\n        out, _, recv_sem = future\n\n        def send_done_kernel(x_ref, o_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, send_sem).wait()\n        out = pl.pallas_call(send_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, recv_sem)\n        return out\n    return (copy_start, send_done, recv_done)"
  },
  {
    "test_code": "def test_basic_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        return jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_remote_copy(axis_name: str, direction: str='right', target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, send_sem, recv_sem):\n            del aliased_x_ref\n            axis_size = jax.lax.psum(1, axis_name)\n            left_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) - 1 + axis_size, axis_size)\n            right_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) + 1, axis_size)\n            if direction == 'right':\n                src_neighbor = left_neighbor\n                dst_neighbor = right_neighbor\n            else:\n                src_neighbor = right_neighbor\n                dst_neighbor = left_neighbor\n            barrier_sem = pltpu.get_barrier_semaphore()\n            pltpu.semaphore_signal(barrier_sem, device_id=src_neighbor, core_index=0)\n            pltpu.semaphore_wait(barrier_sem, 1)\n            pltpu.make_async_remote_copy(x_ref, o_ref, send_sem, recv_sem, device_id=dst_neighbor).start()\n        x, out, send_sem, recv_sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(()), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0}, compiler_params=pltpu.TPUCompilerParams(collective_id=0, has_side_effects=True))(x)\n        return (x, (out, send_sem, recv_sem))\n\n    @jax.named_call\n    def send_done(x: jax.Array, future: Future) -> jax.Array:\n        _, send_sem, _ = future\n\n        def send_done_kernel(x_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, x_ref, send_sem).wait()\n        x = pl.pallas_call(send_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(x, send_sem)\n        return x\n\n    @jax.named_call\n    def recv_done(x: jax.Array, future: Future) -> jax.Array:\n        out, _, recv_sem = future\n\n        def send_done_kernel(x_ref, o_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, send_sem).wait()\n        out = pl.pallas_call(send_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, recv_sem)\n        return out\n    return (copy_start, send_done, recv_done)"
  },
  {
    "test_code": "def test_staggered_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        copy_start, send_done, recv_done = make_async_remote_copy('x')\n        x, fut = copy_start(x)\n\n        def body(_, carry):\n            x, fut = carry\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            y, fut = copy_start(y)\n            return (y, fut)\n        x, fut = jax.lax.fori_loop(0, jax.device_count() - 2, body, (x, fut), unroll=2)\n        x = send_done(x, fut)\n        y = recv_done(x, fut)\n        return y\n    n_devices = jax.device_count()\n    x = jax.random.normal(jax.random.key(0), (n_devices, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.roll(x, shift=-1, axis=0)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_async_remote_copy(axis_name: str, direction: str='right', target_memory_space=None):\n    if target_memory_space is None:\n        target_memory_space = pltpu.ANY\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, send_sem, recv_sem):\n            del aliased_x_ref\n            axis_size = jax.lax.psum(1, axis_name)\n            left_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) - 1 + axis_size, axis_size)\n            right_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) + 1, axis_size)\n            if direction == 'right':\n                src_neighbor = left_neighbor\n                dst_neighbor = right_neighbor\n            else:\n                src_neighbor = right_neighbor\n                dst_neighbor = left_neighbor\n            barrier_sem = pltpu.get_barrier_semaphore()\n            pltpu.semaphore_signal(barrier_sem, device_id=src_neighbor, core_index=0)\n            pltpu.semaphore_wait(barrier_sem, 1)\n            pltpu.make_async_remote_copy(x_ref, o_ref, send_sem, recv_sem, device_id=dst_neighbor).start()\n        x, out, send_sem, recv_sem = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), target_memory_space(x.shape, x.dtype), pltpu.SemaphoreType.DMA(()), pltpu.SemaphoreType.DMA(())), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)), input_output_aliases={0: 0}, compiler_params=pltpu.TPUCompilerParams(collective_id=0, has_side_effects=True))(x)\n        return (x, (out, send_sem, recv_sem))\n\n    @jax.named_call\n    def send_done(x: jax.Array, future: Future) -> jax.Array:\n        _, send_sem, _ = future\n\n        def send_done_kernel(x_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, x_ref, send_sem).wait()\n        x = pl.pallas_call(send_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(x, send_sem)\n        return x\n\n    @jax.named_call\n    def recv_done(x: jax.Array, future: Future) -> jax.Array:\n        out, _, recv_sem = future\n\n        def send_done_kernel(x_ref, o_ref, send_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref, o_ref, send_sem).wait()\n        out = pl.pallas_call(send_done_kernel, out_shape=target_memory_space(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=target_memory_space), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=target_memory_space), input_output_aliases={1: 0})(x, out, recv_sem)\n        return out\n    return (copy_start, send_done, recv_done)"
  },
  {
    "test_code": "def test_bidi_collective_permute_loop(self):\n    mesh = jax.make_mesh((jax.device_count(),), ('x',))\n\n    @jax.jit\n    @partial(shard_map.shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'), check_rep=False)\n    def f(x):\n        assert x.shape[0] == 1\n        x = x[0]\n        copy_start, send_done, recv_done = make_bidi_collective_permute('x')\n\n        def body(_, x):\n            x, fut = copy_start(x)\n            x = send_done(x, fut)\n            y = recv_done(x, fut)\n            return y\n        y = jax.lax.fori_loop(0, jax.device_count() - 1, body, x)\n        return y[None]\n    x = jax.random.normal(jax.random.key(0), (jax.device_count(), 16, 128), dtype=jnp.float32)\n    y = f(x)\n    expected = jnp.concatenate([jnp.roll(x[:, :8], axis=0, shift=-1), jnp.roll(x[:, 8:], axis=0, shift=1)], axis=1)\n    np.testing.assert_array_equal(y, expected)",
    "assertions": [
      "assert x.shape[0] == 1"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_bidi_collective_permute(axis_name: str):\n\n    @jax.named_call\n    def copy_start(x: jax.Array) -> tuple[jax.Array, Future]:\n\n        def copy_start_kernel(x_ref, aliased_x_ref, o_ref, left_sems, right_sems):\n            del aliased_x_ref\n            axis_size = jax.lax.psum(1, axis_name)\n            left_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) - 1 + axis_size, axis_size)\n            right_neighbor = jax.lax.rem(jax.lax.axis_index(axis_name) + 1, axis_size)\n            barrier_sem = pltpu.get_barrier_semaphore()\n            pltpu.semaphore_signal(barrier_sem, device_id=left_neighbor, core_index=0)\n            pltpu.semaphore_signal(barrier_sem, device_id=right_neighbor, core_index=0)\n            pltpu.semaphore_wait(barrier_sem, 2)\n            assert x.shape[0] % 2 == 0, x.shape\n            pltpu.make_async_remote_copy(x_ref.at[pl.ds(0, x.shape[0] // 2)], o_ref.at[pl.ds(0, x.shape[0] // 2)], right_sems[0], right_sems[1], device_id=right_neighbor).start()\n            pltpu.make_async_remote_copy(x_ref.at[pl.ds(x.shape[0] // 2, x.shape[0] // 2)], o_ref.at[pl.ds(x.shape[0] // 2, x.shape[0] // 2)], left_sems[0], left_sems[1], device_id=left_neighbor).start()\n        x, out, left_sems, right_sems = pl.pallas_call(copy_start_kernel, out_shape=(jax.ShapeDtypeStruct(x.shape, x.dtype), pltpu.ANY(x.shape, x.dtype), (pltpu.SemaphoreType.DMA(()),) * 2, (pltpu.SemaphoreType.DMA(()),) * 2), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY)], out_specs=(pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), (pl.BlockSpec(memory_space=pltpu.SEMAPHORE),) * 2, (pl.BlockSpec(memory_space=pltpu.SEMAPHORE),) * 2), input_output_aliases={0: 0}, compiler_params=pltpu.TPUCompilerParams(collective_id=0, has_side_effects=False))(x)\n        return (x, (out, left_sems, right_sems))\n\n    @jax.named_call\n    def send_done(x: jax.Array, future: Future) -> jax.Array:\n        _, (send_left_sem, _), (send_right_sem, _) = future\n\n        def send_done_kernel(x_ref, send_left_sem, send_right_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref.at[x_ref.shape[0] // 2:], x_ref.at[x_ref.shape[0] // 2:], send_left_sem).wait()\n            pltpu.make_async_copy(x_ref.at[x_ref.shape[0] // 2:], x_ref.at[x_ref.shape[0] // 2:], send_right_sem).wait()\n        x = pl.pallas_call(send_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(x, send_left_sem, send_right_sem)\n        return x\n\n    @jax.named_call\n    def recv_done(x: jax.Array, future: Future) -> jax.Array:\n        out, (_, recv_left_sem), (_, recv_right_sem) = future\n\n        def recv_done_kernel(o_ref, x_ref, recv_left_sem, recv_right_sem, aliased_o_ref):\n            del aliased_o_ref\n            pltpu.make_async_copy(x_ref.at[o_ref.shape[0] // 2:], o_ref.at[o_ref.shape[0] // 2:], recv_left_sem).wait()\n            pltpu.make_async_copy(x_ref.at[o_ref.shape[0] // 2:], o_ref.at[o_ref.shape[0] // 2:], recv_right_sem).wait()\n        out = pl.pallas_call(recv_done_kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.ANY), pl.BlockSpec(memory_space=pltpu.SEMAPHORE), pl.BlockSpec(memory_space=pltpu.SEMAPHORE)], out_specs=pl.BlockSpec(memory_space=pltpu.ANY), input_output_aliases={0: 0})(out, x, recv_left_sem, recv_right_sem)\n        return out\n    return (copy_start, send_done, recv_done)"
  },
  {
    "test_code": "def test_basic_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_stateful_async_copy():\n\n    @jax.named_call\n    def copy_start(x_ref, o_ref) -> Future:\n\n        def copy_start_kernel(sem):\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        sem = pl.pallas_call(copy_start_kernel, out_shape=pltpu.SemaphoreType.DMA(()), out_specs=pl.BlockSpec(memory_space=pltpu.SEMAPHORE))()\n        return sem\n\n    @jax.named_call\n    def copy_done(x_ref, o_ref, future):\n        sem = future\n\n        def copy_done_kernel(sem):\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        () = pl.pallas_call(copy_done_kernel, out_shape=(), in_specs=[pl.BlockSpec(memory_space=pltpu.SEMAPHORE)])(sem)\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_multiple_stateful_async_copy(self):\n\n    @jax.jit\n    def f(x):\n        y = y2 = jnp.zeros_like(x)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_copy()\n            x_ref, y_ref, y2_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            fut2 = copy_start(x_ref, y2_ref)\n            copy_done(x_ref, y_ref, fut)\n            copy_done(x_ref, y2_ref, fut2)\n        _, y, y2 = state_discharge.run_state(body)((x, y, y2))\n        return (y, y2)\n    x = jax.random.normal(jax.random.key(0), (8, 128), dtype=jnp.float32)\n    y, y2 = f(x)\n    np.testing.assert_array_equal(y, x)\n    np.testing.assert_array_equal(y2, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_stateful_async_copy():\n\n    @jax.named_call\n    def copy_start(x_ref, o_ref) -> Future:\n\n        def copy_start_kernel(sem):\n            pltpu.make_async_copy(x_ref, o_ref, sem).start()\n        sem = pl.pallas_call(copy_start_kernel, out_shape=pltpu.SemaphoreType.DMA(()), out_specs=pl.BlockSpec(memory_space=pltpu.SEMAPHORE))()\n        return sem\n\n    @jax.named_call\n    def copy_done(x_ref, o_ref, future):\n        sem = future\n\n        def copy_done_kernel(sem):\n            pltpu.make_async_copy(x_ref, o_ref, sem).wait()\n        () = pl.pallas_call(copy_done_kernel, out_shape=(), in_specs=[pl.BlockSpec(memory_space=pltpu.SEMAPHORE)])(sem)\n    return (copy_start, copy_done)"
  },
  {
    "test_code": "def test_basic_stateful_async_slice(self):\n\n    @jax.jit\n    def f(x):\n        y = jnp.zeros(x.shape[1:], x.dtype)\n\n        def body(refs):\n            copy_start, copy_done = make_stateful_async_slice(2)\n            x_ref, y_ref = refs\n            fut = copy_start(x_ref, y_ref)\n            copy_done(x_ref, y_ref, fut)\n        _, y = state_discharge.run_state(body)((x, y))\n        return y\n    x = jax.random.normal(jax.random.key(0), (4, 8, 128), dtype=jnp.float32)\n    y = f(x)\n    np.testing.assert_array_equal(y, x[2])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_async_test.py",
    "function": "def make_stateful_async_slice(i: int):\n\n    @jax.named_call\n    def copy_start(x_ref, o_ref) -> Future:\n\n        def copy_start_kernel(sem):\n            pltpu.make_async_copy(x_ref.at[i], o_ref, sem).start()\n        sem = pl.pallas_call(copy_start_kernel, out_shape=pltpu.SemaphoreType.DMA(()), out_specs=pl.BlockSpec(memory_space=pltpu.SEMAPHORE))()\n        return sem\n\n    @jax.named_call\n    def copy_done(x_ref, o_ref, future):\n        sem = future\n\n        def copy_done_kernel(sem):\n            pltpu.make_async_copy(x_ref.at[i], o_ref, sem).wait()\n        () = pl.pallas_call(copy_done_kernel, out_shape=(), in_specs=[pl.BlockSpec(memory_space=pltpu.SEMAPHORE)])(sem)\n    return (copy_start, copy_done)"
  }
]