[
  {
    "test_code": "@jtu.skip_under_pytest('Test must run in an isolated process')\n@unittest.skipIf('XLA_PYTHON_CLIENT_ALLOCATOR' in os.environ, 'Test does not work if the python client allocator has been overriden')\ndef test_gpu_memory_allocation(self):\n    falsey_values = ('0', 'False', 'false')\n    preallocate = os.environ.get('XLA_PYTHON_CLIENT_PREALLOCATE', '1') not in falsey_values\n    device = jax.devices()[0]\n    mem_stats = device.memory_stats()\n    self.assertEqual(mem_stats['pool_bytes'], 0)\n    x = jax.lax.add(1, 2)\n    mem_stats = device.memory_stats()\n    if preallocate:\n        self.assertEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'])\n    else:\n        self.assertLessEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'] // 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/gpu_memory_flags_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "@jtu.skip_under_pytest('Test must run in an isolated process')\n@unittest.skipIf('XLA_PYTHON_CLIENT_ALLOCATOR' in os.environ, 'Test does not work if the python client allocator has been overriden')\ndef test_gpu_memory_allocation(self):\n    falsey_values = ('0', 'False', 'false')\n    preallocate = os.environ.get('XLA_PYTHON_CLIENT_PREALLOCATE', '1') not in falsey_values\n    device = jax.devices()[0]\n    mem_stats = device.memory_stats()\n    self.assertEqual(mem_stats['pool_bytes'], 0)\n    x = jax.lax.add(1, 2)\n    mem_stats = device.memory_stats()\n    if preallocate:\n        self.assertEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'])\n    else:\n        self.assertLessEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'] // 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/gpu_memory_flags_test.py",
    "function": "def add(self, x: jax.Array) -> jax.Array:\n    self.value += np.asarray(x)\n    return jax.device_put(self.value, x.sharding)"
  },
  {
    "test_code": "@jtu.skip_under_pytest('Test must run in an isolated process')\n@unittest.skipIf('XLA_PYTHON_CLIENT_ALLOCATOR' in os.environ, 'Test does not work if the python client allocator has been overriden')\ndef test_gpu_memory_allocation(self):\n    falsey_values = ('0', 'False', 'false')\n    preallocate = os.environ.get('XLA_PYTHON_CLIENT_PREALLOCATE', '1') not in falsey_values\n    device = jax.devices()[0]\n    mem_stats = device.memory_stats()\n    self.assertEqual(mem_stats['pool_bytes'], 0)\n    x = jax.lax.add(1, 2)\n    mem_stats = device.memory_stats()\n    if preallocate:\n        self.assertEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'])\n    else:\n        self.assertLessEqual(mem_stats['pool_bytes'], mem_stats['bytes_limit'] // 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/gpu_memory_flags_test.py",
    "function": "@jax.jit\ndef add(x):\n    return x * 2"
  }
]