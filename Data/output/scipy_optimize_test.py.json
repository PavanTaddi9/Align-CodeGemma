[
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2, dtype='float32')), (himmelblau, np.ones(2, dtype='float32')), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='BFGS', options=dict(maxiter=maxiter, gtol=1e-06))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='BFGS').x\n    self.assertAllClose(scipy_res, jax_res, atol=0.0002, rtol=0.0002, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2)), (himmelblau, np.zeros(2)), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(maxiter=maxiter, gtol=1e-07))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    with jtu.ignore_warning(category=DeprecationWarning, message='.*tostring.*is deprecated.*'):\n        scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='L-BFGS-B').x\n    if func.__name__ == 'matyas':\n        self.assertAllClose(jax_res, jnp.zeros_like(jax_res), atol=1e-07)\n        return\n    if func.__name__ == 'eggholder':\n        self.assertAllClose(jax_res, scipy_res, atol=0.001)\n        return\n    self.assertAllClose(jax_res, scipy_res, atol=2e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2, dtype='float32')), (himmelblau, np.ones(2, dtype='float32')), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='BFGS', options=dict(maxiter=maxiter, gtol=1e-06))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='BFGS').x\n    self.assertAllClose(scipy_res, jax_res, atol=0.0002, rtol=0.0002, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_fixes4594(self):\n    n = 2\n    A = jnp.eye(n) * 10000.0\n\n    def f(x):\n        return jnp.mean((A @ x) ** 2)\n    results = jax.scipy.optimize.minimize(f, jnp.ones(n), method='BFGS')\n    self.assertAllClose(results.x, jnp.zeros(n), atol=1e-06, rtol=1e-06)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2)), (himmelblau, np.zeros(2)), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(maxiter=maxiter, gtol=1e-07))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    with jtu.ignore_warning(category=DeprecationWarning, message='.*tostring.*is deprecated.*'):\n        scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='L-BFGS-B').x\n    if func.__name__ == 'matyas':\n        self.assertAllClose(jax_res, jnp.zeros_like(jax_res), atol=1e-07)\n        return\n    if func.__name__ == 'eggholder':\n        self.assertAllClose(jax_res, scipy_res, atol=0.001)\n        return\n    self.assertAllClose(jax_res, scipy_res, atol=2e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_complex_rosenbrock(self):\n    complex_dim = 5\n    f_re = rosenbrock(jnp)\n    init_re = jnp.zeros((2 * complex_dim,), dtype=complex)\n    expect_re = jnp.ones((2 * complex_dim,), dtype=complex)\n\n    def f(z):\n        x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n        return f_re(x_re)\n    init = init_re[:complex_dim] + 1j * init_re[complex_dim:]\n    expect = expect_re[:complex_dim] + 1j * expect_re[complex_dim:]\n\n    @jit\n    def min_op(z0):\n        result = jax.scipy.optimize.minimize(f, z0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(gtol=1e-06))\n        return result.x\n    jax_res = min_op(init)\n    self.assertAllClose(jax_res, expect, atol=2e-05)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2, dtype='float32')), (himmelblau, np.ones(2, dtype='float32')), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='BFGS', options=dict(maxiter=maxiter, gtol=1e-06))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='BFGS').x\n    self.assertAllClose(scipy_res, jax_res, atol=0.0002, rtol=0.0002, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2)), (himmelblau, np.zeros(2)), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(maxiter=maxiter, gtol=1e-07))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    with jtu.ignore_warning(category=DeprecationWarning, message='.*tostring.*is deprecated.*'):\n        scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='L-BFGS-B').x\n    if func.__name__ == 'matyas':\n        self.assertAllClose(jax_res, jnp.zeros_like(jax_res), atol=1e-07)\n        return\n    if func.__name__ == 'eggholder':\n        self.assertAllClose(jax_res, scipy_res, atol=0.001)\n        return\n    self.assertAllClose(jax_res, scipy_res, atol=2e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2, dtype='float32')), (himmelblau, np.ones(2, dtype='float32')), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='BFGS', options=dict(maxiter=maxiter, gtol=1e-06))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='BFGS').x\n    self.assertAllClose(scipy_res, jax_res, atol=0.0002, rtol=0.0002, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2)), (himmelblau, np.zeros(2)), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(maxiter=maxiter, gtol=1e-07))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    with jtu.ignore_warning(category=DeprecationWarning, message='.*tostring.*is deprecated.*'):\n        scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='L-BFGS-B').x\n    if func.__name__ == 'matyas':\n        self.assertAllClose(jax_res, jnp.zeros_like(jax_res), atol=1e-07)\n        return\n    if func.__name__ == 'eggholder':\n        self.assertAllClose(jax_res, scipy_res, atol=0.001)\n        return\n    self.assertAllClose(jax_res, scipy_res, atol=2e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2, dtype='float32')), (himmelblau, np.ones(2, dtype='float32')), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='BFGS', options=dict(maxiter=maxiter, gtol=1e-06))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='BFGS').x\n    self.assertAllClose(scipy_res, jax_res, atol=0.0002, rtol=0.0002, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jtu.sample_product(maxiter=[None], func_and_init=[(rosenbrock, np.zeros(2)), (himmelblau, np.zeros(2)), (matyas, np.ones(2) * 6.0), (eggholder, np.ones(2) * 100.0)])\ndef test_minimize(self, maxiter, func_and_init):\n    func, x0 = func_and_init\n\n    @jit\n    def min_op(x0):\n        result = jax.scipy.optimize.minimize(func(jnp), x0, method='l-bfgs-experimental-do-not-rely-on-this', options=dict(maxiter=maxiter, gtol=1e-07))\n        return result.x\n    jax_res = min_op(x0)\n    x0_f64 = x0.astype('float64')\n    with jtu.ignore_warning(category=DeprecationWarning, message='.*tostring.*is deprecated.*'):\n        scipy_res = scipy.optimize.minimize(func(np), x0_f64, method='L-BFGS-B').x\n    if func.__name__ == 'matyas':\n        self.assertAllClose(jax_res, jnp.zeros_like(jax_res), atol=1e-07)\n        return\n    if func.__name__ == 'eggholder':\n        self.assertAllClose(jax_res, scipy_res, atol=0.001)\n        return\n    self.assertAllClose(jax_res, scipy_res, atol=2e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/scipy_optimize_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  }
]