[
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(*args, signature=signature, optimize=optimize):\n    path, _ = jnp.einsum_path(signature, *args, optimize=optimize)\n    return jnp.einsum(signature, *args, optimize=path)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(*args, signature=signature, optimize=optimize):\n    path, _ = jnp.einsum_path(signature, *args, optimize=optimize)\n    return jnp.einsum(signature, *args, optimize=path)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "@jax.numpy_dtype_promotion('standard')\ndef np_fun(condlist, choicelist, default):\n    choicelist = [x if jnp.result_type(x) != jnp.bfloat16 else x.astype(np.float32) for x in choicelist]\n    dtype = jnp.result_type(default, *choicelist)\n    return np.select(condlist, [np.asarray(x, dtype=dtype) for x in choicelist], np.asarray(default, dtype=dtype))"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "@jax.numpy_dtype_promotion('standard')\ndef np_fun(condlist, choicelist, default):\n    choicelist = [x if jnp.result_type(x) != jnp.bfloat16 else x.astype(np.float32) for x in choicelist]\n    dtype = jnp.result_type(default, *choicelist)\n    return np.select(condlist, [np.asarray(x, dtype=dtype) for x in choicelist], np.asarray(default, dtype=dtype))"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "@jax.numpy_dtype_promotion('standard')\ndef np_fun(condlist, choicelist, default):\n    choicelist = [x if jnp.result_type(x) != jnp.bfloat16 else x.astype(np.float32) for x in choicelist]\n    dtype = jnp.result_type(default, *choicelist)\n    return np.select(condlist, [np.asarray(x).astype(dtype) for x in choicelist], np.asarray(default, dtype=dtype))"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "@jax.numpy_dtype_promotion('standard')\ndef np_fun(condlist, choicelist, default):\n    choicelist = [x if jnp.result_type(x) != jnp.bfloat16 else x.astype(np.float32) for x in choicelist]\n    dtype = jnp.result_type(default, *choicelist)\n    return np.select(condlist, [np.asarray(x).astype(dtype) for x in choicelist], np.asarray(default, dtype=dtype))"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(a, c):\n    try:\n        return jnp.choose(a, c, mode=mode)\n    except ValueError as err:\n        if mode == 'raise' and str(err).startswith('invalid entry'):\n            return -999\n        else:\n            raise"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    \"\"\"Test the set of inputs np.geomspace is well-defined on.\"\"\"\n    start, stop = self._GetArgsMaker(rng, [start_shape, stop_shape], [dtype, dtype])()\n    start, stop = jnp.broadcast_arrays(start, stop)\n    if dtype in complex_dtypes:\n        return (start, stop)\n    start = start * jnp.sign(start) * jnp.sign(stop)\n    return (start, stop)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def np_fun(*args):\n    args = [x if jnp.result_type(x) != jnp.bfloat16 else np.asarray(x, np.float32) for x in args]\n    return getattr(np, op)(*args, axis=axis, keepdims=keepdims)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def np_fun(*args):\n    args = [x if jnp.result_type(x) != jnp.bfloat16 else np.asarray(x, np.float32) for x in args]\n    return getattr(np, op)(*args, axis=axis, keepdims=keepdims)"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    x = jnp.array(rng(shape, dtype))\n    if out_dtype in unsigned_dtypes:\n        x = 10 * jnp.abs(x)\n    return [x]"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    x = jnp.array(rng(shape, dtype))\n    if out_dtype in unsigned_dtypes:\n        x = 10 * jnp.abs(x)\n    return [x]"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    factor_shape = shape[:-1] + (2 * shape[-1],)\n    a = rng(factor_shape, dtype)\n    return [np.matmul(a, jnp.conj(T(a)))]"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def args_maker():\n    factor_shape = shape[:-1] + (2 * shape[-1],)\n    a = rng(factor_shape, dtype)\n    return [np.matmul(a, jnp.conj(T(a)))]"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRoots(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = jnp.roots\n\n    def np_fun(arg):\n        return np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(x, indexer_with_dummies):\n    idx = type(indexer)(util.subvals(indexer_with_dummies, substitutes))\n    return jnp.asarray(x)[idx]"
  },
  {
    "test_code": "@jtu.sample_product(dtype=all_dtypes, length=[0, 3, 5], leading=[0, 2], trailing=[0, 2])\n@jtu.run_on_devices('cpu')\ndef testRootsNoStrip(self, dtype, length, leading, trailing):\n    rng = jtu.rand_some_zero(self.rng())\n\n    def args_maker():\n        p = rng((length,), dtype)\n        return [jnp.concatenate([jnp.zeros(leading, p.dtype), p, jnp.zeros(trailing, p.dtype)])]\n    jnp_fun = partial(jnp.roots, strip_zeros=False)\n\n    def np_fun(arg):\n        roots = np.roots(arg).astype(dtypes.to_complex_dtype(arg.dtype))\n        if len(roots) < len(arg) - 1:\n            roots = np.pad(roots, (0, len(arg) - len(roots) - 1), constant_values=complex(np.nan, np.nan))\n        return roots\n    args = args_maker()\n    np_roots = np_fun(*args)\n    jnp_roots = jnp_fun(*args)\n    self.assertSetsAllClose(np_roots, jnp_roots)\n    self._CompileAndCheck(jnp_fun, args_maker)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/polynomial_test.py",
    "function": "def jnp_fun(x, indexer_with_dummies):\n    idx = type(indexer)(util.subvals(indexer_with_dummies, substitutes))\n    return jnp.asarray(x)[idx]"
  }
]