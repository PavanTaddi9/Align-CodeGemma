[
  {
    "test_code": "@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_no_log_spam(self):\n    if jtu.is_cloud_tpu() and xla_bridge._backends:\n        raise self.skipTest('test requires fresh process on Cloud TPU because only one process can use the TPU at a time')\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    with tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8', suffix='.py') as f:\n        f.write(textwrap.dedent('\\n        import jax\\n        jax.device_count()\\n        f = jax.jit(lambda x: x + 1)\\n        f(1)\\n        f(2)\\n        jax.numpy.add(1, 1)\\n    '))\n        python = sys.executable\n        assert 'python' in python\n        proc = subprocess.run([python, f.name], capture_output=True)\n        lines = proc.stdout.split(b'\\n')\n        lines.extend(proc.stderr.split(b'\\n'))\n        allowlist = [b'', b'An NVIDIA GPU may be present on this machine, but a CUDA-enabled jaxlib is not installed. Falling back to cpu.']\n        lines = [l for l in lines if l not in allowlist]\n        self.assertEmpty(lines)",
    "assertions": [
      "assert 'python' in python"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_subprocess_stderr_info_logging(self):\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    program = '\\n    import jax  # this prints INFO logging from backend imports\\n    jax.jit(lambda x: x)(1)  # this prints logs to DEBUG (from compilation)\\n    '\n    program = re.sub('^\\\\s+', '', program, flags=re.MULTILINE)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=INFO {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    log_output = p.stderr\n    info_lines = log_output.split('\\n')\n    self.assertGreater(len(info_lines), 0)\n    self.assertIn('INFO', log_output)\n    self.assertNotIn('DEBUG', log_output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_subprocess_stderr_debug_logging(self):\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    program = '\\n    import jax  # this prints INFO logging from backend imports\\n    jax.jit(lambda x: x)(1)  # this prints logs to DEBUG (from compilation)\\n    '\n    program = re.sub('^\\\\s+', '', program, flags=re.MULTILINE)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=DEBUG {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    log_output = p.stderr\n    self.assertIn('INFO', log_output)\n    self.assertIn('DEBUG', log_output)\n    cmd = shlex.split(f\"env JAX_DEBUG_LOG_MODULES=jax {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    log_output = p.stderr\n    self.assertIn('DEBUG', log_output)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_subprocess_toggling_logging_level(self):\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    _separator = '---------------------------'\n    program = f'\\n    import sys\\n    import jax  # this prints INFO logging from backend imports\\n    jax.jit(lambda x: x)(1)  # this prints logs to DEBUG (from compilation)\\n    jax.config.update(\"jax_logging_level\", None)\\n    sys.stderr.write(\"{_separator}\")\\n    jax.jit(lambda x: x)(1)  # should not log anything now\\n    '\n    program = re.sub('^\\\\s+', '', program, flags=re.MULTILINE)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=DEBUG {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    log_output = p.stderr\n    m = re.search(_separator, log_output)\n    self.assertTrue(m is not None)\n    log_output_verbose = log_output[:m.start()]\n    log_output_silent = log_output[m.end():]\n    self.assertIn('Finished tracing + transforming <lambda> for pjit', log_output_verbose)\n    self.assertEqual(log_output_silent, '')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_subprocess_double_logging_absent(self):\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    program = '\\n    import jax  # this prints INFO logging from backend imports\\n    jax.config.update(\"jax_debug_log_modules\", \"jax._src.compiler,jax._src.dispatch\")\\n    jax.jit(lambda x: x)(1)  # this prints logs to DEBUG (from compilation)\\n    '\n    program = re.sub('^\\\\s+', '', program, flags=re.MULTILINE)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=DEBUG {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    log_output = p.stderr\n    self.assertNotEmpty(log_output)\n    log_lines = log_output.strip().split('\\n')\n    self.assertLen([line for line in log_lines if 'Finished tracing + transforming' in line], 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@unittest.skipIf(platform.system() == 'Windows', \"Subprocess test doesn't work on Windows\")\ndef test_subprocess_cpp_logging_level(self):\n    if sys.executable is None:\n        raise self.skipTest('test requires access to python binary')\n    program = '\\n    import sys\\n    import jax  # this prints INFO logging from backend imports\\n    jax.distributed.initialize(\"127.0.0.1:12345\", num_processes=1, process_id=0)\\n    '\n    program = re.sub('^\\\\s+', '', program, flags=re.MULTILINE)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=DEBUG {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    self.assertIn('Initializing CoordinationService', p.stderr)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=INFO {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    self.assertIn('Initializing CoordinationService', p.stderr)\n    cmd = shlex.split(f\"env JAX_LOGGING_LEVEL=WARNING {sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    self.assertNotIn('Initializing CoordinationService', p.stderr)\n    cmd = shlex.split(f\"{sys.executable} -c '{program}'\")\n    p = subprocess.run(cmd, capture_output=True, text=True)\n    if int(_default_TF_CPP_MIN_LOG_LEVEL) >= 1:\n        self.assertNotIn('Initializing CoordinationService', p.stderr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_debug_logging(self):\n    jax.jit(lambda x: x + 1)(1)\n    with capture_jax_logs() as log_output:\n        jax.jit(lambda x: x + 1)(1)\n    self.assertEmpty(log_output.getvalue())\n    with jax_debug_log_modules('jax'):\n        with capture_jax_logs() as log_output:\n            jax.jit(lambda x: x + 1)(1)\n        self.assertIn('Finished tracing + transforming', log_output.getvalue())\n        self.assertIn('Compiling <lambda>', log_output.getvalue())\n    with jax_debug_log_modules(''):\n        with capture_jax_logs() as log_output:\n            jax.jit(lambda x: x + 1)(1)\n        self.assertEmpty(log_output.getvalue())\n    with jax_debug_log_modules('jax._src.dispatch'):\n        with capture_jax_logs() as log_output:\n            jax.jit(lambda x: x + 1)(1)\n        self.assertIn('Finished tracing + transforming', log_output.getvalue())\n        self.assertNotIn('Compiling <lambda>', log_output.getvalue())\n    with jax_debug_log_modules(''):\n        with capture_jax_logs() as log_output:\n            jax.jit(lambda x: x + 1)(1)\n        self.assertEmpty(log_output.getvalue())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/logging_test.py",
    "function": "@contextlib.contextmanager\ndef jax_debug_log_modules(value):\n    original_value = jax.config.jax_debug_log_modules\n    jax.config.update('jax_debug_log_modules', value)\n    try:\n        yield\n    finally:\n        jax.config.update('jax_debug_log_modules', original_value)"
  }
]