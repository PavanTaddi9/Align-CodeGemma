[
  {
    "test_code": "@hp.given(hps.booleans(), _array_shapes(), _array_dtypes())\ndef test_all_gather_1d_mesh(self, is_vmem, shape, dtype):\n    if jax.device_count() < 2:\n        self.skipTest('Need more devices')\n    memory_space = pltpu.VMEM if is_vmem else pltpu.ANY\n    mesh_shape = (jax.device_count(),)\n    mesh = jax.sharding.Mesh(mesh_utils.create_device_mesh(mesh_shape, jax.devices()), ['x'])\n    leading, *rest = shape\n    shape = (mesh.shape['x'] * leading, *rest)\n    x = random.normal(random.key(0), shape, dtype=jnp.float32).astype(dtype)\n    x_sharded = jax.device_put(x, jax.sharding.NamedSharding(mesh, P('x')))\n    y = all_gather.all_gather(x_sharded, mesh=mesh, axis_name='x', memory_space=memory_space)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_all_gather_test.py",
    "function": "@hps.composite\ndef _array_dtypes(draw):\n    return draw(hps.sampled_from([jnp.float32, jnp.bfloat16, jnp.int32]))"
  },
  {
    "test_code": "@hp.given(hps.booleans(), _array_shapes(), _array_dtypes(), hps.sampled_from(['x', 'y']))\ndef test_all_gather_2d_mesh(self, is_vmem, shape, dtype, axis_name):\n    if jax.device_count() < 2:\n        self.skipTest('Need more devices')\n    if jax.device_count() % 2:\n        self.skipTest('Need an even number of devices')\n    memory_space = pltpu.VMEM if is_vmem else pltpu.ANY\n    mesh_shape = (2, jax.device_count() // 2)\n    mesh = jax.sharding.Mesh(mesh_utils.create_device_mesh(mesh_shape, jax.devices()), ['x', 'y'])\n    if axis_name == 'x':\n        sharding = jax.sharding.NamedSharding(mesh, P('x', None))\n    else:\n        sharding = jax.sharding.NamedSharding(mesh, P('y', None))\n    leading, *rest = shape\n    shape = (mesh.shape[axis_name] * leading, *rest)\n    x = random.normal(random.key(0), shape, dtype=jnp.float32).astype(dtype)\n    x_sharded = jax.device_put(x, sharding)\n    y = all_gather.all_gather(x_sharded, mesh=mesh, axis_name=axis_name, memory_space=memory_space)\n    np.testing.assert_array_equal(y, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_all_gather_test.py",
    "function": "@hps.composite\ndef _array_dtypes(draw):\n    return draw(hps.sampled_from([jnp.float32, jnp.bfloat16, jnp.int32]))"
  }
]