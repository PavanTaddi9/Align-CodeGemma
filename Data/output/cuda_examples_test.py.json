[
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "def test_fwd_random(self):\n    shape = (2, 3)\n    akey, bkey = jax.random.split(jax.random.key(0))\n    a = jax.random.normal(key=akey, shape=shape, dtype=jnp.float32)\n    b = jax.random.normal(key=bkey, shape=shape, dtype=jnp.float32)\n    observed = jax.jit(self.foo)(a, b)\n    expected = a * (b + 1)\n    self.assertAllClose(observed, expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_bwd_random(self):\n    shape = (2, 3)\n    akey, bkey = jax.random.split(jax.random.key(0))\n    a = jax.random.normal(key=akey, shape=shape, dtype=jnp.float32)\n    b = jax.random.normal(key=bkey, shape=shape, dtype=jnp.float32)\n    jtu.check_grads(f=jax.jit(self.foo), args=(a, b), order=1, modes=('rev',))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def foo(x):\n    i = jax.lax.axis_index('x')\n    return jnp.exp(x) + i.astype(x.dtype)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def foo(x):\n\n    def bar(y):\n        return jnp.multiply(x, y)\n    return jvp(bar, (3.0,), (1.0,))[1]"
  },
  {
    "test_code": "def test_bwd_random(self):\n    shape = (2, 3)\n    akey, bkey = jax.random.split(jax.random.key(0))\n    a = jax.random.normal(key=akey, shape=shape, dtype=jnp.float32)\n    b = jax.random.normal(key=bkey, shape=shape, dtype=jnp.float32)\n    jtu.check_grads(f=jax.jit(self.foo), args=(a, b), order=1, modes=('rev',))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def check_grads(f, args, order, atol=None, rtol=None, eps=None):\n    default_tol = 1e-06 if config.enable_x64.value else 0.01\n    atol = atol or default_tol\n    rtol = rtol or default_tol\n    eps = eps or default_tol\n    jtu.check_jvp(f, partial(jax.jvp, f), args, atol, rtol, eps)\n    jtu.check_vjp(f, partial(jax.vjp, f), args, atol, rtol, eps)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "def foo(x):\n    output = jnp.zeros_like(x, device=cpu_sharding)\n    _, _, cpu_x = jax.lax.while_loop(cond, inner, (0, x, output))\n    return cpu_x"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return jnp.exp(x)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.custom_vjp\ndef foo(x, y):\n    return x"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.custom_jvp\ndef sum(x):\n    return jnp.sum(x, axis=0)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@print_ir(np.empty([7], np.int32))\n@jax.jit\ndef foo(x):\n    return x + 2"
  },
  {
    "test_code": "def test_bwd_interpretable(self):\n    shape = (2, 3)\n    a = 2.0 * jnp.ones(shape, dtype=jnp.float32)\n    b = 3.0 * jnp.ones(shape, dtype=jnp.float32)\n\n    def loss(a, b):\n        return jnp.sum(self.foo(a, b))\n    da_observed, db_observed = jax.jit(jax.grad(loss, argnums=(0, 1)))(a, b)\n    da_expected = b + 1\n    db_expected = a\n    self.assertArraysEqual(da_observed, da_expected)\n    self.assertArraysEqual(db_observed, db_expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/examples/ffi/tests/cuda_examples_test.py",
    "function": "@jax.jit\ndef foo(n):\n    return self.pallas_call(kernel, out_shape=x, in_specs=[pl.BlockSpec((None, 8, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((None, 8, 128), lambda i: (i, 0, 0)), grid=(('i', n),))(x)"
  }
]