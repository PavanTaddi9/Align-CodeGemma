[
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfJittedFunctions(self):\n\n    @jax.jit\n    def f(x, y):\n        return x * y\n\n    @jax.jit\n    def g(z):\n        return f(z, z + 77)\n    expected = g(32)\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(32)\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@unittest.skipIf(cloudpickle is None, 'Requires cloudpickle')\ndef testPickleOfPmappedFunctions(self):\n\n    @jax.pmap\n    def f(x, y):\n        return x * y\n\n    @jax.pmap\n    def g(z):\n        return f(z, z + 77)\n    expected = g(jnp.asarray([[32]]))\n    s = cloudpickle.dumps(g)\n    del f, g\n    g_unpickled = pickle.loads(s)\n    actual = g_unpickled(jnp.asarray([[32]]))\n    self.assertEqual(expected, actual)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pickle_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  }
]