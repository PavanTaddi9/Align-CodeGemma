[
  {
    "test_code": "@jax.debug_nans(False)\ndef testJitComputationNaNContextManager(self):\n    A = jnp.array(0.0)\n    f = jax.jit(lambda x: 0.0 / x)\n    ans = f(A)\n    ans = f(A)\n    with self.assertRaises(FloatingPointError):\n        with jax.debug_nans(True):\n            ans = f(A)\n        ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef testCallDeoptimized(self, jit):\n\n    @jit\n    def f(x):\n        return jax.lax.cond(x == 1, lambda _: np.nan, lambda _: 2.0, operand=None)\n    f(2)\n    msg = 'invalid value \\\\(nan\\\\) encountered in .*cond.*'\n    with self.assertRaisesRegex(FloatingPointError, msg):\n        f(1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testShardMap(self):\n    mesh = jax.make_mesh((1,), ('x',))\n    f = shard_map(lambda x: 0.0 / x, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    f(jnp.array([1.0]))\n    with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in sharded computation'):\n        ans = f(jnp.array([0.0]))\n        ans.block_until_ready()\n    if jax.device_count() >= 2:\n        with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in sharded computation'):\n            ans = f(jnp.array([1.0, 0.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testPmap(self):\n    pmap_funcs = [api._cpp_pmap]\n    for pmap in pmap_funcs:\n        f = pmap(lambda x: 0.0 / x)\n        f(jnp.array([1.0]))\n        with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n            ans = f(jnp.array([0.0]))\n            ans.block_until_ready()\n        if jax.device_count() >= 2:\n            with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in parallel computation'):\n                ans = f(jnp.array([1.0, 0.0]))\n                ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.ignore_warning(message='.*is an experimental.*')\ndef testPjit(self):\n    if jax.device_count() < 2:\n        raise SkipTest('test requires >=2 devices')\n    p = jax.sharding.PartitionSpec('x')\n    f = pjit.pjit(lambda x: 0.0 / x, in_shardings=p, out_shardings=p)\n    with jax.sharding.Mesh(np.array(jax.local_devices()[:2]), ('x',)):\n        with self.assertRaises(FloatingPointError):\n            ans = f(jnp.array([0.0, 1.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.ignore_warning(message='.*is an experimental.*')\ndef testDebugNansPjitWithDonation(self):\n    if jax.device_count() < 2:\n        raise SkipTest('test requires >=2 devices')\n    p = jax.sharding.PartitionSpec('x')\n    f = pjit.pjit(lambda x: 0.0 / x, in_shardings=p, out_shardings=p, donate_argnums=(0,))\n    with jax.sharding.Mesh(np.array(jax.local_devices()[:2]), ('x',)):\n        with self.assertRaises(FloatingPointError):\n            ans = f(jnp.array([0.0, 1.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testDebugNansZeroDiv(self):\n    inp = jnp.zeros(())\n\n    def f(x, y):\n        return x / y\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        f(inp, inp)\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        jax.jit(f)(inp, inp)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testDebugNansInput(self):\n\n    @jax.jit\n    def f(x):\n        return x * 3.0\n    with self.assertRaisesRegex(FloatingPointError, 'the de-optimized function did not .*input'):\n        f(np.nan)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef testCallDeoptimized(self, jit):\n\n    @jit\n    def f(x):\n        return jax.lax.cond(x == 1, lambda _: np.inf, lambda _: 2.0, operand=None)\n    f(2)\n    msg = 'invalid value \\\\(inf\\\\) encountered in .*cond.*'\n    with self.assertRaisesRegex(FloatingPointError, msg):\n        f(1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testDebugNansDoesntReturnDeoptimizedResult(self):\n\n    @jax.jit\n    def f(x):\n        y = x + 2\n        return (jnp.nan, y)\n    with self.assertRaisesRegex(FloatingPointError, 'the de-optimized function did not .*literal'):\n        with jax.debug_nans(True):\n            f(3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jax.debug_nans(False)\ndef testJitComputationNaNContextManager(self):\n    A = jnp.array(0.0)\n    f = jax.jit(lambda x: 0.0 / x)\n    ans = f(A)\n    ans = f(A)\n    with self.assertRaises(FloatingPointError):\n        with jax.debug_nans(True):\n            ans = f(A)\n        ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef testCallDeoptimized(self, jit):\n\n    @jit\n    def f(x):\n        return jax.lax.cond(x == 1, lambda _: np.nan, lambda _: 2.0, operand=None)\n    f(2)\n    msg = 'invalid value \\\\(nan\\\\) encountered in .*cond.*'\n    with self.assertRaisesRegex(FloatingPointError, msg):\n        f(1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testShardMap(self):\n    mesh = jax.make_mesh((1,), ('x',))\n    f = shard_map(lambda x: 0.0 / x, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    f(jnp.array([1.0]))\n    with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in sharded computation'):\n        ans = f(jnp.array([0.0]))\n        ans.block_until_ready()\n    if jax.device_count() >= 2:\n        with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in sharded computation'):\n            ans = f(jnp.array([1.0, 0.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testPmap(self):\n    pmap_funcs = [api._cpp_pmap]\n    for pmap in pmap_funcs:\n        f = pmap(lambda x: 0.0 / x)\n        f(jnp.array([1.0]))\n        with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n            ans = f(jnp.array([0.0]))\n            ans.block_until_ready()\n        if jax.device_count() >= 2:\n            with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered in parallel computation'):\n                ans = f(jnp.array([1.0, 0.0]))\n                ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(message='.*is an experimental.*')\ndef testPjit(self):\n    if jax.device_count() < 2:\n        raise SkipTest('test requires >=2 devices')\n    p = jax.sharding.PartitionSpec('x')\n    f = pjit.pjit(lambda x: 0.0 / x, in_shardings=p, out_shardings=p)\n    with jax.sharding.Mesh(np.array(jax.local_devices()[:2]), ('x',)):\n        with self.assertRaises(FloatingPointError):\n            ans = f(jnp.array([0.0, 1.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(message='.*is an experimental.*')\ndef testDebugNansPjitWithDonation(self):\n    if jax.device_count() < 2:\n        raise SkipTest('test requires >=2 devices')\n    p = jax.sharding.PartitionSpec('x')\n    f = pjit.pjit(lambda x: 0.0 / x, in_shardings=p, out_shardings=p, donate_argnums=(0,))\n    with jax.sharding.Mesh(np.array(jax.local_devices()[:2]), ('x',)):\n        with self.assertRaises(FloatingPointError):\n            ans = f(jnp.array([0.0, 1.0]))\n            ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testDebugNansZeroDiv(self):\n    inp = jnp.zeros(())\n\n    def f(x, y):\n        return x / y\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        f(inp, inp)\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        jax.jit(f)(inp, inp)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testDebugNansInput(self):\n\n    @jax.jit\n    def f(x):\n        return x * 3.0\n    with self.assertRaisesRegex(FloatingPointError, 'the de-optimized function did not .*input'):\n        f(np.nan)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef testCallDeoptimized(self, jit):\n\n    @jit\n    def f(x):\n        return jax.lax.cond(x == 1, lambda _: np.inf, lambda _: 2.0, operand=None)\n    f(2)\n    msg = 'invalid value \\\\(inf\\\\) encountered in .*cond.*'\n    with self.assertRaisesRegex(FloatingPointError, msg):\n        f(1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testDebugNansDoesntReturnDeoptimizedResult(self):\n\n    @jax.jit\n    def f(x):\n        y = x + 2\n        return (jnp.nan, y)\n    with self.assertRaisesRegex(FloatingPointError, 'the de-optimized function did not .*literal'):\n        with jax.debug_nans(True):\n            f(3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testGradPmap(self):\n\n    @jax.jit\n    def f(x):\n        y = x ** 2\n        return jnp.log(y)\n    _, f_vjp = jax.vjp(jax.pmap(f), jnp.zeros([1]))\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in mul\\\\nWhen differentiating'):\n        ans, = f_vjp(jnp.ones([1]))\n        ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testGradShardMap(self):\n\n    @jax.jit\n    def f(x):\n        y = x ** 2\n        return jnp.log(y)\n    mesh = jax.make_mesh((1,), ('x',))\n    shmap_f = shard_map(f, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    _, f_vjp = jax.vjp(shmap_f, jnp.zeros([1]))\n    with self.assertRaisesRegex(FloatingPointError, 'Invalid value \\\\(nan\\\\) encountered'):\n        ans, = f_vjp(jnp.ones([1]))\n        ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testDebugNansPmapWithDonation(self):\n    a = jnp.zeros((1,))\n    with self.assertRaises(FloatingPointError):\n        ans = jax.pmap(lambda x: 0.0 / x, donate_argnums=(0,))(a)\n        ans.block_until_ready()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testDebugNansZeroDiv(self):\n    inp = jnp.zeros(())\n\n    def f(x, y):\n        return x / y\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        f(inp, inp)\n    with self.assertRaisesRegex(FloatingPointError, 'invalid value \\\\(nan\\\\) encountered in div'):\n        jax.jit(f)(inp, inp)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debug_nans_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  }
]