[
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(n, x):\n    return lax.broadcast_in_dim(x, (n,), ())"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(n, x):\n    return lax.broadcast_in_dim(x, (n,), ())"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(n, x):\n    return lax.broadcast_in_dim(x, (n,), ())"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(a, b):\n    m1, v1 = a\n    m2, v2 = b\n    return (m1 + m2, jsp.linalg.solve(m1, v2) + jsp.linalg.solve(m2, v1))"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(a, b):\n    m1, v1 = a\n    m2, v2 = b\n    return (m1 + m2, jsp.linalg.solve(m1, v2) + jsp.linalg.solve(m2, v1))"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(a, b):\n    m1, v1 = a\n    m2, v2 = b\n    return (m1 + m2, jsp.linalg.solve(m1, v2) + jsp.linalg.solve(m2, v1))"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose_with_example_out(jnp.ones(2))\ndef fn(r, x):\n    tracer_spy.append(r)\n    tracer_spy.append(x['c'])\n    return dict(b=x['c'] / r)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose_with_example_out(jnp.ones(2))\ndef fn(r, x):\n    tracer_spy.append(r)\n    tracer_spy.append(x['c'])\n    return dict(b=x['c'] / r)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose_with_example_out(jnp.ones(2))\ndef fn(r, x):\n    tracer_spy.append(r)\n    tracer_spy.append(x['c'])\n    return dict(b=x['c'] / r)"
  },
  {
    "test_code": "def test_jit(self):\n\n    def f(x):\n        return jax.jit(jnp.sin)(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((None, 1, 128, 128), lambda i, j, k, l, _: (i, j, k, l))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(2, 2, 4, 4), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    x_block_spec = in_block_specs[0]\n    self.assertEqual(x_block_spec.index_map(0, 0, 1, 2, ()), (0, 0, 1, 2))\n    self.assertEqual(x_block_spec.index_map(1, 2, 3, 3, ()), (1, 2, 3, 3))\n    x = jax.random.normal(jax.random.key(0), (1, 128, 128), dtype=np.float32)\n    sin_x = jnp.sin(x)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0, 0), scalar_prefetch_values, (), x), sin_x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(data, segment_ids):\n    return jax.ops.segment_sum(data, segment_ids, num_segments).sum()"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(data, segment_ids):\n    return jax.ops.segment_sum(data, segment_ids, num_segments).sum()"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(data, segment_ids):\n    return jax.ops.segment_sum(data, segment_ids, num_segments).sum()"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@compute_on('device_host')\ndef fn():\n    k = jax.random.key(0)\n    return jax.nn.initializers.lecun_normal()(k, (2, 2), jnp.float32)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@compute_on('device_host')\ndef fn():\n    k = jax.random.key(0)\n    return jax.nn.initializers.lecun_normal()(k, (2, 2), jnp.float32)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@compute_on('device_host')\ndef fn():\n    k = jax.random.key(0)\n    return jax.nn.initializers.lecun_normal()(k, (2, 2), jnp.float32)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(indices):\n    return jnp.equal(indices, jnp.arange(3)).astype(jnp.float32)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(indices):\n    return jnp.equal(indices, jnp.arange(3)).astype(jnp.float32)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(indices):\n    return jnp.equal(indices, jnp.arange(3)).astype(jnp.float32)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(key):\n    x = jnp.arange(113003)\n    x = with_sharding_constraint(x, P('data'))\n    y = jnp.arange(65536)\n    y = with_sharding_constraint(y.reshape(-1), P('data'))\n    z = jnp.concatenate([x, y], axis=0)\n    z = with_sharding_constraint(z, P('data'))\n    return (x, y, z)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(key):\n    x = jnp.arange(113003)\n    x = with_sharding_constraint(x, P('data'))\n    y = jnp.arange(65536)\n    y = with_sharding_constraint(y.reshape(-1), P('data'))\n    z = jnp.concatenate([x, y], axis=0)\n    z = with_sharding_constraint(z, P('data'))\n    return (x, y, z)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(key):\n    x = jnp.arange(113003)\n    x = with_sharding_constraint(x, P('data'))\n    y = jnp.arange(65536)\n    y = with_sharding_constraint(y.reshape(-1), P('data'))\n    z = jnp.concatenate([x, y], axis=0)\n    z = with_sharding_constraint(z, P('data'))\n    return (x, y, z)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(x):\n    R1 = jnp.array([[x[0], 0, 0], [0, x[0], 0], [0, 0, x[0]]])\n    R2 = jnp.array([[x[0], 0, 0], [0, x[1], 0], [0, 0, x[2]]])\n    H = jnp.eye(4)\n    H = H.at[:3, :3].set(R2.T)\n    pos = H @ jnp.concatenate([x, jnp.array([1.0])])\n    return (pos, R1)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(x):\n    R1 = jnp.array([[x[0], 0, 0], [0, x[0], 0], [0, 0, x[0]]])\n    R2 = jnp.array([[x[0], 0, 0], [0, x[1], 0], [0, 0, x[2]]])\n    H = jnp.eye(4)\n    H = H.at[:3, :3].set(R2.T)\n    pos = H @ jnp.concatenate([x, jnp.array([1.0])])\n    return (pos, R1)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.vmap\ndef fn(x):\n    R1 = jnp.array([[x[0], 0, 0], [0, x[0], 0], [0, 0, x[0]]])\n    R2 = jnp.array([[x[0], 0, 0], [0, x[1], 0], [0, 0, x[2]]])\n    H = jnp.eye(4)\n    H = H.at[:3, :3].set(R2.T)\n    pos = H @ jnp.concatenate([x, jnp.array([1.0])])\n    return (pos, R1)"
  },
  {
    "test_code": "def test_jit(self):\n\n    def f(x):\n        return jax.jit(jnp.sin)(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((None, 1, 128, 128), lambda i, j, k, l, _: (i, j, k, l))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(2, 2, 4, 4), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    x_block_spec = in_block_specs[0]\n    self.assertEqual(x_block_spec.index_map(0, 0, 1, 2, ()), (0, 0, 1, 2))\n    self.assertEqual(x_block_spec.index_map(1, 2, 3, 3, ()), (1, 2, 3, 3))\n    x = jax.random.normal(jax.random.key(0), (1, 128, 128), dtype=np.float32)\n    sin_x = jnp.sin(x)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0, 0), scalar_prefetch_values, (), x), sin_x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(x: jax.Array):\n    checkify.check(jnp.all(x > 0), 'x must be positive')\n    return x + 1"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(x: jax.Array):\n    checkify.check(jnp.all(x > 0), 'x must be positive')\n    return x + 1"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(x: jax.Array):\n    checkify.check(jnp.all(x > 0), 'x must be positive')\n    return x + 1"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x):\n    return x * x"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x):\n    return x * x"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x):\n    return x * x"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose(jnp.ones(2))\ndef fn(r, x):\n    return x / r"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose(jnp.ones(2))\ndef fn(r, x):\n    return x / r"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@custom_transpose(jnp.ones(2))\ndef fn(r, x):\n    return x / r"
  },
  {
    "test_code": "def test_jit(self):\n\n    def f(x):\n        return jax.jit(jnp.sin)(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((None, 1, 128, 128), lambda i, j, k, l, _: (i, j, k, l))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(2, 2, 4, 4), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    x_block_spec = in_block_specs[0]\n    self.assertEqual(x_block_spec.index_map(0, 0, 1, 2, ()), (0, 0, 1, 2))\n    self.assertEqual(x_block_spec.index_map(1, 2, 3, 3, ()), (1, 2, 3, 3))\n    x = jax.random.normal(jax.random.key(0), (1, 128, 128), dtype=np.float32)\n    sin_x = jnp.sin(x)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0, 0), scalar_prefetch_values, (), x), sin_x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_custom_jvp(self):\n\n    def f(x):\n        return jax.nn.relu(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((None, 1, 128, 128), lambda i, j, k, l, _: (i, j, k, l))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(2, 2, 4, 4), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    x_block_spec = in_block_specs[0]\n    self.assertEqual(x_block_spec.index_map(0, 0, 1, 2, ()), (0, 0, 1, 2))\n    self.assertEqual(x_block_spec.index_map(1, 2, 3, 3, ()), (1, 2, 3, 3))\n    x = jax.random.normal(jax.random.key(0), (1, 128, 128), dtype=np.float32)\n    relu_x = jax.nn.relu(x)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0, 0), scalar_prefetch_values, (), x), relu_x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.custom_jvp\ndef relu(x):\n    return jnp.maximum(x, 0)"
  },
  {
    "test_code": "def test_custom_jvp(self):\n\n    def f(x):\n        return jax.nn.relu(x)\n    x_type = jax.ShapeDtypeStruct((1, 1, 512, 512), jnp.float32)\n    block_spec = pl.BlockSpec((None, 1, 128, 128), lambda i, j, k, l, _: (i, l, k, j))\n    out_block_spec = block_spec_lib.push_block_spec(f, block_spec)(x_type)\n    self.assertEqual(out_block_spec.block_shape, block_spec.block_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.custom_jvp\ndef relu(x):\n    return jnp.maximum(x, 0)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(*args, split_transpose=False):\n    v, fn_transpose = jax.vjp(partial(loss, split_transpose=split_transpose), *args)\n    grads = fn_transpose(1.0)\n    return (*grads, v)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(*args, split_transpose=False):\n    v, fn_transpose = jax.vjp(partial(loss, split_transpose=split_transpose), *args)\n    grads = fn_transpose(1.0)\n    return (*grads, v)"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "def fn(*args, split_transpose=False):\n    v, fn_transpose = jax.vjp(partial(loss, split_transpose=split_transpose), *args)\n    grads = fn_transpose(1.0)\n    return (*grads, v)"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise(self, fn):\n\n    def f(x):\n        return fn(x)\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler(0))(new_values, in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (), x), fn(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x: int, static_y: BlackBox):\n    nonlocal num_called\n    num_called += 1\n    return x + static_y.value"
  },
  {
    "test_code": "@parameterized.parameters([jnp.exp, jnp.tanh])\ndef test_elementwise_bias(self, fn):\n    b = np.ones((512, 512), dtype=np.float32)\n\n    def f(x):\n        return fn(x) + b\n    in_type = jax.ShapeDtypeStruct((512, 512), jnp.float32)\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, in_type)\n    self.assertLen(new_values, 1)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, in_block_spec), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, in_type)\n    self.assertLen(value_block_specs, 1)\n    self.assertEqual(value_block_specs[0].block_shape, (128, 128))\n    self.assertEqual(value_block_specs[0].index_map(0, 1, 2), (0, 1))\n    self.assertEqual(in_block_spec.block_shape, (128, 128))\n    self.assertEqual(in_block_spec.index_map(0, 1, 2), (0, 1))\n    x = np.ones((128, 128), dtype=np.float32)\n    b = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, (b,), x), fn(x) + b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x: int, static_y: BlackBox):\n    nonlocal num_called\n    num_called += 1\n    return x + static_y.value"
  },
  {
    "test_code": "@parameterized.product(fn=[lax.mul, lax.add, lax.sub, lax.div, lax.max, lax.lt, lax.eq, lax.gt])\ndef test_binop(self, fn):\n\n    def f(x, y):\n        return fn(x, y)\n    in_type = (jax.ShapeDtypeStruct((512, 512), jnp.float32), jax.ShapeDtypeStruct((512, 512), jnp.float32))\n    f2, new_values, scalar_prefetch_values = block_spec_lib.get_fusion_values(f, *in_type)\n    self.assertEmpty(new_values)\n    self.assertEmpty(scalar_prefetch_values)\n    block_spec = pl.BlockSpec((128, 128), lambda i, j, k: (i, j))\n    kernel_fn, (value_block_specs, *in_block_specs), _ = block_spec_lib.pull_block_spec(f2, block_spec, grid=(1, 1, 1), scalar_prefetch_handler=block_spec_lib.make_scalar_prefetch_handler())(new_values, *in_type)\n    self.assertEmpty(value_block_specs)\n    self.assertLen(in_block_specs, 2)\n    x_block_spec, y_block_spec = in_block_specs\n    self.assertEqual(x_block_spec.block_shape, (128, 128))\n    self.assertEqual(x_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    self.assertEqual(y_block_spec.block_shape, (128, 128))\n    self.assertEqual(y_block_spec.index_map(0, 1, 2), block_spec.index_map(0, 1, 2))\n    x = np.ones((128, 128), dtype=np.float32)\n    y = np.ones((128, 128), dtype=np.float32)\n    np.testing.assert_array_equal(kernel_fn((0, 0, 0), scalar_prefetch_values, new_values, x, y), fn(x, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/fuser_block_spec_test.py",
    "function": "@jax.jit\ndef fn(x: int, static_y: BlackBox):\n    nonlocal num_called\n    num_called += 1\n    return x + static_y.value"
  }
]