[
  {
    "test_code": "def test_jit_abstracted_axes_return_polymorphic_shape2(self):\n    f = jax.jit(lambda n: jnp.ones(n))\n    with jax.enable_checks(False):\n        jaxpr = jax.make_jaxpr(f)(3)\n    a, = jaxpr.jaxpr.invars\n    e, = jaxpr.jaxpr.eqns\n    a_, = e.invars\n    self.assertIs(a, a_)\n    b, = e.outvars\n    a__, = b.aval.shape\n    self.assertIs(a, a__)\n    with jax.enable_checks(False):\n        jaxpr = jax.make_jaxpr(lambda: f(3))()\n    () = jaxpr.jaxpr.invars\n    e, = jaxpr.jaxpr.eqns\n    three, = e.invars\n    self.assertIsInstance(three, core.Literal)\n    self.assertEqual(three.val, 3)\n    b, = e.outvars\n    three_, = b.aval.shape\n    self.assertIsInstance(three_, int)\n    self.assertEqual(three_, 3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jit_basic(self):\n\n    @jax.jit\n    def f(i):\n        return jnp.sum(jnp.ones(i, dtype='float32'))\n    self.assertAllClose(f(3), jnp.array(3.0, dtype='float32'), check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jit_basic_2(self):\n    count = 0\n\n    @partial(jax.jit, abstracted_axes=('n',))\n    def f(x):\n        nonlocal count\n        count += 1\n        return jnp.sum(x)\n    x = f(np.arange(3))\n    y = f(np.arange(4))\n    self.assertAllClose(x, 3.0, check_dtypes=False)\n    self.assertAllClose(y, 6.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jit_polymorphic_output(self):\n    count = 0\n\n    @jax.jit\n    def f(i):\n        nonlocal count\n        count += 1\n        return jnp.ones(i, dtype='float32')\n    self.assertAllClose(f(3), np.ones(3, dtype='float32'), check_dtypes=True)\n    self.assertAllClose(f(4), np.ones(4, dtype='float32'), check_dtypes=True)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skip('TODO: need typechecking rule for concatenate')\ndef test_concatenate(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'n'},))\n    def f(x):\n        return jnp.concatenate([x, x, x], axis=0)\n    f(np.ones((5, 4), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_reshape(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'n'},))\n    def f(x):\n        return jnp.reshape(x, (2, -1))\n    f(np.ones((5, 4), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_nested(self):\n\n    @jax.jit\n    def nested_f(x):\n        return jnp.sin(x)\n\n    @partial(jax.jit, abstracted_axes=({0: 'h', 1: 'v'},))\n    def f(x):\n        return jnp.sin(x) + jax.jit(nested_f)(x)\n    f(np.ones((3, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_nested_arange(self):\n\n    def nested_f(x):\n        return jnp.arange(x.shape[0] * x.shape[1], dtype=x.dtype).reshape(x.shape)\n\n    @partial(jax.jit, abstracted_axes=({0: 'h', 1: 'w'},))\n    def f(x):\n        return x + jax.jit(nested_f)(x)\n    f(np.ones((3, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_transpose(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'h', 1: 'w'},))\n    def f(x):\n        return x.T\n    f(np.ones((3, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_matmul(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w', 1: 'w'},))\n    def f(x):\n        return jnp.matmul(x, x)\n    f(np.ones((5, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_matmul_shape_error(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'h', 1: 'w'},))\n    def f(x):\n        return jnp.matmul(x, x)\n    with self.assertRaisesRegex(TypeError, re.escape('dot_general requires contracting dimensions to have the same shape, got')):\n        f(np.ones((5, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skip('TODO: investigate failure')\ndef test_cond(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w', 1: 'w'},))\n    def f(x):\n        return lax.cond(True, lambda x: jnp.sin(x), lambda x: jnp.matmul(x, x), x)\n    f(np.ones((5, 5), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_arange(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w'},))\n    def f(x):\n        return jnp.arange(x.shape[0], dtype=x.dtype) + x\n    f(np.ones((5,), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_broadcast(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w'},))\n    def f(x):\n        return jnp.broadcast_to(x, (x.shape[0], x.shape[0]))\n    f(np.ones((5,), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_zeros(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w'},))\n    def f(x):\n        return jnp.zeros(x.shape[0], dtype=x.dtype) + x\n    f(np.ones((5,), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_stack(self):\n\n    @partial(jax.jit, abstracted_axes=({0: 'w'},))\n    def f(x):\n        return jnp.stack([jnp.sin(x), jnp.cos(x)])\n    f(np.ones((5,), dtype=np.float32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jit_dependent_pair_output(self):\n    count = 0\n\n    @jax.jit\n    def f(n):\n        nonlocal count\n        count += 1\n        return jnp.arange(2 * n)\n    x = f(3)\n    y = f(4)\n    self.assertAllClose(x, jnp.arange(2 * 3), check_dtypes=False)\n    self.assertAllClose(y, jnp.arange(2 * 4), check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skip('revising slicing logic')\ndef test_slicing_basic(self):\n    f = jax.jit(lambda x, n: jnp.sum(x[:n]))\n    with jax.enable_checks(False):\n        ans = f(jnp.arange(10), 3)\n    expected = jnp.sum(jnp.arange(10)[:3])\n    self.assertAllClose(ans, expected, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_bint_basic(self):\n    d = lax.convert_element_type(3, core.bint(5))\n    self.assertEqual(str(d), '3{\u22645}')\n\n    @jax.jit\n    def f(d):\n        jnp.sin(3.0)\n        return d\n    f(d)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_bint_iota(self):\n\n    def f(d):\n        return jnp.arange(d, dtype='int32')\n    y = f(lax.convert_element_type(3, core.bint(5)))\n    self.assertIsInstance(y, core.DArray)\n    self.assertAllClose(y._data, np.arange(5), check_dtypes=False)\n    d = lax.convert_element_type(3, core.bint(5))\n    y = jax.jit(f)(d)\n    self.assertIsInstance(y, core.DArray)\n    self.assertAllClose(y._data, np.arange(5), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_bint_compilation_cache(self):\n    count = 0\n\n    @jax.jit\n    def f(n):\n        nonlocal count\n        count += 1\n        return jnp.zeros(n)\n    f(lax.convert_element_type(3, core.bint(5)))\n    f(lax.convert_element_type(4, core.bint(5)))\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_bint_compilation_cache2(self):\n    count = 0\n\n    @partial(jax.jit, abstracted_axes=('n',))\n    def f(x):\n        nonlocal count\n        count += 1\n        return x.sum()\n    d = lax.convert_element_type(3, core.bint(5))\n    x = jnp.arange(d)\n    y = f(x)\n    self.assertEqual(y, 3)\n    self.assertEqual(count, 1)\n    d = lax.convert_element_type(4, core.bint(5))\n    x = jnp.arange(d)\n    y = f(x)\n    self.assertEqual(y, 6)\n    self.assertEqual(count, 1)\n    d = lax.convert_element_type(4, core.bint(6))\n    x = jnp.arange(d)\n    y = f(x)\n    self.assertEqual(y, 6)\n    self.assertEqual(count, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@unittest.skip('do we want to support this?')\ndef test_bint_add(self):\n    d = lax.convert_element_type(4, core.bint(6))\n    x = jnp.arange(d)\n\n    @jax.jit\n    def f(x):\n        return x + x\n    f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_slicing_basic_execute(self):\n\n    @partial(jax.jit, abstracted_axes=(None, 'n'))\n    def f(x):\n        return x[0]\n    y = f(jnp.arange(3 * 4).reshape(3, 4))\n    self.assertAllClose(y, jnp.array([0, 1, 2, 3]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dynamic_api_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  }
]