[
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparsifyWithConsts(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n\n    @self.sparsify\n    def func(x):\n        return jit(lambda x: jnp.sum(x, 1))(x)\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse)\n    self.assertAllClose(result_sparse.todense(), result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseSqueeze(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 1, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.squeeze, dimensions=(2,)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseRev(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.rev, dimensions=(1, 2)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparsifySparseXlaCall(self):\n\n    def func(M):\n        return 2 * M\n    M = jnp.arange(6).reshape(2, 3)\n    Msp = BCOO.fromdense(M)\n    out_dense = func(M)\n    out_sparse = self.sparsify(jit(func))(Msp)\n    self.assertArraysEqual(out_dense, out_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseForiLoop(self):\n\n    def func(M, x):\n        body_fun = lambda i, val: M @ val / M.shape[1]\n        return lax.fori_loop(0, 2, body_fun, x)\n    x = jnp.arange(5.0)\n    M = jnp.arange(25).reshape(5, 5)\n    M_bcoo = BCOO.fromdense(M)\n    with jax.numpy_dtype_promotion('standard'):\n        result_dense = func(M, x)\n        result_sparse = self.sparsify(func)(M_bcoo, x)\n    self.assertArraysAllClose(result_dense, result_sparse)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{fmt}', 'fmt': fmt} for fmt in ['BCSR', 'BCOO']))\ndef testToDense(self, fmt):\n    M = jnp.arange(4).reshape(2, 2)\n    if fmt == 'BCOO':\n        Msp = BCOO.fromdense(M)\n    elif fmt == 'BCSR':\n        Msp = BCSR.fromdense(M)\n    else:\n        raise ValueError(f'Unrecognized fmt={fmt!r}')\n\n    @self.sparsify\n    def func(M):\n        return todense(M) + 1\n    self.assertArraysEqual(func(M), M + 1)\n    self.assertArraysEqual(func(Msp), M + 1)\n    self.assertArraysEqual(jit(func)(M), M + 1)\n    self.assertArraysEqual(jit(func)(Msp), M + 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.slice(M, (0, 1, 2), (1, 3, 3))\n    expected = M[:1, 1:3, 2:3]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testSparseDynamicSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.dynamic_slice(M, (0, 1, 2), (1, 1, 3))\n    expected = M[:1, 1:2, 1:4]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparsifyWithConsts(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n\n    @self.sparsify\n    def func(x):\n        return jit(lambda x: jnp.sum(x, 1))(x)\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse)\n    self.assertAllClose(result_sparse.todense(), result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseSqueeze(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 1, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.squeeze, dimensions=(2,)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseRev(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.rev, dimensions=(1, 2)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparsifySparseXlaCall(self):\n\n    def func(M):\n        return 2 * M\n    M = jnp.arange(6).reshape(2, 3)\n    Msp = BCOO.fromdense(M)\n    out_dense = func(M)\n    out_sparse = self.sparsify(jit(func))(Msp)\n    self.assertArraysEqual(out_dense, out_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseForiLoop(self):\n\n    def func(M, x):\n        body_fun = lambda i, val: M @ val / M.shape[1]\n        return lax.fori_loop(0, 2, body_fun, x)\n    x = jnp.arange(5.0)\n    M = jnp.arange(25).reshape(5, 5)\n    M_bcoo = BCOO.fromdense(M)\n    with jax.numpy_dtype_promotion('standard'):\n        result_dense = func(M, x)\n        result_sparse = self.sparsify(func)(M_bcoo, x)\n    self.assertArraysAllClose(result_dense, result_sparse)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{fmt}', 'fmt': fmt} for fmt in ['BCSR', 'BCOO']))\ndef testToDense(self, fmt):\n    M = jnp.arange(4).reshape(2, 2)\n    if fmt == 'BCOO':\n        Msp = BCOO.fromdense(M)\n    elif fmt == 'BCSR':\n        Msp = BCSR.fromdense(M)\n    else:\n        raise ValueError(f'Unrecognized fmt={fmt!r}')\n\n    @self.sparsify\n    def func(M):\n        return todense(M) + 1\n    self.assertArraysEqual(func(M), M + 1)\n    self.assertArraysEqual(func(Msp), M + 1)\n    self.assertArraysEqual(jit(func)(M), M + 1)\n    self.assertArraysEqual(jit(func)(Msp), M + 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.slice(M, (0, 1, 2), (1, 3, 3))\n    expected = M[:1, 1:3, 2:3]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def testSparseDynamicSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.dynamic_slice(M, (0, 1, 2), (1, 1, 3))\n    expected = M[:1, 1:2, 1:4]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparsifyWithConsts(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n\n    @self.sparsify\n    def func(x):\n        return jit(lambda x: jnp.sum(x, 1))(x)\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse)\n    self.assertAllClose(result_sparse.todense(), result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseSqueeze(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 1, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.squeeze, dimensions=(2,)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseRev(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.rev, dimensions=(1, 2)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparsifySparseXlaCall(self):\n\n    def func(M):\n        return 2 * M\n    M = jnp.arange(6).reshape(2, 3)\n    Msp = BCOO.fromdense(M)\n    out_dense = func(M)\n    out_sparse = self.sparsify(jit(func))(Msp)\n    self.assertArraysEqual(out_dense, out_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseForiLoop(self):\n\n    def func(M, x):\n        body_fun = lambda i, val: M @ val / M.shape[1]\n        return lax.fori_loop(0, 2, body_fun, x)\n    x = jnp.arange(5.0)\n    M = jnp.arange(25).reshape(5, 5)\n    M_bcoo = BCOO.fromdense(M)\n    with jax.numpy_dtype_promotion('standard'):\n        result_dense = func(M, x)\n        result_sparse = self.sparsify(func)(M_bcoo, x)\n    self.assertArraysAllClose(result_dense, result_sparse)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{fmt}', 'fmt': fmt} for fmt in ['BCSR', 'BCOO']))\ndef testToDense(self, fmt):\n    M = jnp.arange(4).reshape(2, 2)\n    if fmt == 'BCOO':\n        Msp = BCOO.fromdense(M)\n    elif fmt == 'BCSR':\n        Msp = BCSR.fromdense(M)\n    else:\n        raise ValueError(f'Unrecognized fmt={fmt!r}')\n\n    @self.sparsify\n    def func(M):\n        return todense(M) + 1\n    self.assertArraysEqual(func(M), M + 1)\n    self.assertArraysEqual(func(Msp), M + 1)\n    self.assertArraysEqual(jit(func)(M), M + 1)\n    self.assertArraysEqual(jit(func)(Msp), M + 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.slice(M, (0, 1, 2), (1, 3, 3))\n    expected = M[:1, 1:3, 2:3]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testSparseDynamicSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.dynamic_slice(M, (0, 1, 2), (1, 1, 3))\n    expected = M[:1, 1:2, 1:4]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparsifyWithConsts(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n\n    @self.sparsify\n    def func(x):\n        return jit(lambda x: jnp.sum(x, 1))(x)\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse)\n    self.assertAllClose(result_sparse.todense(), result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseSqueeze(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 1, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.squeeze, dimensions=(2,)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseRev(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.rev, dimensions=(1, 2)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparsifySparseXlaCall(self):\n\n    def func(M):\n        return 2 * M\n    M = jnp.arange(6).reshape(2, 3)\n    Msp = BCOO.fromdense(M)\n    out_dense = func(M)\n    out_sparse = self.sparsify(jit(func))(Msp)\n    self.assertArraysEqual(out_dense, out_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseForiLoop(self):\n\n    def func(M, x):\n        body_fun = lambda i, val: M @ val / M.shape[1]\n        return lax.fori_loop(0, 2, body_fun, x)\n    x = jnp.arange(5.0)\n    M = jnp.arange(25).reshape(5, 5)\n    M_bcoo = BCOO.fromdense(M)\n    with jax.numpy_dtype_promotion('standard'):\n        result_dense = func(M, x)\n        result_sparse = self.sparsify(func)(M_bcoo, x)\n    self.assertArraysAllClose(result_dense, result_sparse)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{fmt}', 'fmt': fmt} for fmt in ['BCSR', 'BCOO']))\ndef testToDense(self, fmt):\n    M = jnp.arange(4).reshape(2, 2)\n    if fmt == 'BCOO':\n        Msp = BCOO.fromdense(M)\n    elif fmt == 'BCSR':\n        Msp = BCSR.fromdense(M)\n    else:\n        raise ValueError(f'Unrecognized fmt={fmt!r}')\n\n    @self.sparsify\n    def func(M):\n        return todense(M) + 1\n    self.assertArraysEqual(func(M), M + 1)\n    self.assertArraysEqual(func(Msp), M + 1)\n    self.assertArraysEqual(jit(func)(M), M + 1)\n    self.assertArraysEqual(jit(func)(Msp), M + 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.slice(M, (0, 1, 2), (1, 3, 3))\n    expected = M[:1, 1:3, 2:3]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testSparseDynamicSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.dynamic_slice(M, (0, 1, 2), (1, 1, 3))\n    expected = M[:1, 1:2, 1:4]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparsifyWithConsts(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n\n    @self.sparsify\n    def func(x):\n        return jit(lambda x: jnp.sum(x, 1))(x)\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse)\n    self.assertAllClose(result_sparse.todense(), result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseSqueeze(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 1, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.squeeze, dimensions=(2,)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseRev(self):\n    rng = jtu.rand_default(self.rng())\n    M_dense = rng((2, 3, 4), np.float32)\n    M_sparse = BCOO.fromdense(M_dense)\n    func = self.sparsify(partial(lax.rev, dimensions=(1, 2)))\n    result_dense = func(M_dense)\n    result_sparse = func(M_sparse).todense()\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparsifySparseXlaCall(self):\n\n    def func(M):\n        return 2 * M\n    M = jnp.arange(6).reshape(2, 3)\n    Msp = BCOO.fromdense(M)\n    out_dense = func(M)\n    out_sparse = self.sparsify(jit(func))(Msp)\n    self.assertArraysEqual(out_dense, out_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseForiLoop(self):\n\n    def func(M, x):\n        body_fun = lambda i, val: M @ val / M.shape[1]\n        return lax.fori_loop(0, 2, body_fun, x)\n    x = jnp.arange(5.0)\n    M = jnp.arange(25).reshape(5, 5)\n    M_bcoo = BCOO.fromdense(M)\n    with jax.numpy_dtype_promotion('standard'):\n        result_dense = func(M, x)\n        result_sparse = self.sparsify(func)(M_bcoo, x)\n    self.assertArraysAllClose(result_dense, result_sparse)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseCondSimple(self):\n\n    def func(x):\n        return lax.cond(False, lambda x: x, lambda x: 2 * x, x)\n    x = jnp.arange(5.0)\n    result_dense = func(x)\n    x_bcoo = BCOO.fromdense(x)\n    result_sparse = self.sparsify(func)(x_bcoo)\n    self.assertArraysAllClose(result_dense, result_sparse.todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseCondMismatchError(self):\n\n    @self.sparsify\n    def func(x, y):\n        return lax.cond(False, lambda x: x[0], lambda x: x[1], (x, y))\n    x = jnp.arange(5.0)\n    y = jnp.arange(5.0)\n    x_bcoo = BCOO.fromdense(x)\n    y_bcoo = BCOO.fromdense(y)\n    func(x, y)\n    func(x_bcoo, y_bcoo)\n    with self.assertRaisesRegex(TypeError, 'sparsified true_fun output must have same type structure as sparsified false_fun output.*'):\n        func(x_bcoo, y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{fmt}', 'fmt': fmt} for fmt in ['BCSR', 'BCOO']))\ndef testToDense(self, fmt):\n    M = jnp.arange(4).reshape(2, 2)\n    if fmt == 'BCOO':\n        Msp = BCOO.fromdense(M)\n    elif fmt == 'BCSR':\n        Msp = BCSR.fromdense(M)\n    else:\n        raise ValueError(f'Unrecognized fmt={fmt!r}')\n\n    @self.sparsify\n    def func(M):\n        return todense(M) + 1\n    self.assertArraysEqual(func(M), M + 1)\n    self.assertArraysEqual(func(Msp), M + 1)\n    self.assertArraysEqual(jit(func)(M), M + 1)\n    self.assertArraysEqual(jit(func)(Msp), M + 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.slice(M, (0, 1, 2), (1, 3, 3))\n    expected = M[:1, 1:3, 2:3]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testSparseDynamicSlice(self):\n    M = jnp.arange(24).reshape(2, 3, 4)\n    Msp = BCOO.fromdense(M)\n\n    @self.sparsify\n    def func(M):\n        return lax.dynamic_slice(M, (0, 1, 2), (1, 1, 3))\n    expected = M[:1, 1:2, 1:4]\n    self.assertArraysEqual(func(M), expected)\n    self.assertArraysEqual(func(Msp).todense(), expected)\n    self.assertArraysEqual(jit(func)(M), expected)\n    self.assertArraysEqual(jit(func)(Msp).todense(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def testWeakTypes(self):\n    M = jnp.arange(12, dtype='int32').reshape(3, 4)\n    Msp = BCOO.fromdense(M)\n    self.assertArraysEqual(operator.mul(2, M), self.sparsify(operator.mul)(2, Msp).todense(), check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef mul(x):\n    return x @ x.T"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jax.numpy_dtype_promotion('standard')\ndef testSparsify(self):\n    M_dense = jnp.arange(24).reshape(4, 6)\n    M_sparse = BCOO.fromdense(M_dense)\n    v = jnp.arange(M_dense.shape[0])\n\n    @self.sparsify\n    def func(x, v):\n        return -jnp.sin(jnp.pi * x).T @ (v + 1)\n    with jtu.ignore_warning(category=CuSparseEfficiencyWarning, message='bcoo_dot_general GPU lowering requires matrices with sorted indices*'):\n        result_sparse = func(M_sparse, v)\n    result_dense = func(M_dense, v)\n    self.assertAllClose(result_sparse, result_dense)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertNotIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testDropvar(self):\n\n    def inner(x):\n        return (x * 2, x * 3)\n\n    def f(x):\n        _, y = jit(inner)(x)\n        return y * 4\n    x_dense = jnp.arange(5)\n    x_sparse = BCOO.fromdense(x_dense)\n    self.assertArraysEqual(self.sparsify(f)(x_sparse).todense(), f(x_dense))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testPytreeInput(self):\n    f = self.sparsify(lambda x: x)\n    args = (jnp.arange(4), BCOO.fromdense(jnp.arange(4)))\n    out = f(args)\n    self.assertLen(out, 2)\n    self.assertArraysEqual(args[0], out[0])\n    self.assertBcooIdentical(args[1], out[1])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testSparseSum(self):\n    x = jnp.arange(20).reshape(4, 5)\n    xsp = BCOO.fromdense(x)\n\n    def f(x):\n        return (x.sum(), x.sum(0), x.sum(1), x.sum((0, 1)))\n    result_dense = f(x)\n    result_sparse = self.sparsify(f)(xsp)\n    assert len(result_dense) == len(result_sparse)\n    for res_dense, res_sparse in zip(result_dense, result_sparse):\n        if isinstance(res_sparse, BCOO):\n            res_sparse = res_sparse.todense()\n        self.assertArraysAllClose(res_dense, res_sparse)",
    "assertions": [
      "assert len(result_dense) == len(result_sparse)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(4,), (4,)], 'concatenate', 0), ([(4,), (4,)], 'stack', 0), ([(4,), (4,)], 'hstack', 0), ([(4,), (4,)], 'vstack', 0), ([(4,), (4,)], 'concatenate', 1), ([(4,), (4,)], 'stack', 1), ([(4,), (4,)], 'hstack', 1), ([(4,), (4,)], 'vstack', 1), ([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2), ([(2, 4), (4,), (3, 4)], 'vstack', 0), ([(1, 4), (4,), (1, 4)], 'vstack', 0)]])\ndef testSparseConcatenateBCOO(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shapes=shapes, func=func, n_batch=n_batch) for shapes, func, n_batch in [([(2, 4), (2, 4)], 'stack', 0), ([(2, 4), (3, 4)], 'vstack', 0), ([(2, 4), (2, 5)], 'hstack', 0), ([(2, 4), (3, 4)], 'vstack', 1), ([(2, 4), (2, 5)], 'hstack', 1), ([(2, 4), (3, 4)], 'vstack', 2), ([(2, 4), (2, 5)], 'hstack', 2)]])\ndef testSparseConcatenateBCSR(self, shapes, func, n_batch):\n    f = self.sparsify(getattr(jnp, func))\n    rng = jtu.rand_some_zero(self.rng())\n    arrs = [rng(shape, 'int32') for shape in shapes]\n    sparrs = [BCOO.fromdense(arr, n_batch=n_batch) for arr in arrs]\n    self.assertArraysEqual(f(arrs), f(sparrs).todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testSparseWhileLoop(self):\n\n    def cond_fun(params):\n        i, A = params\n        return i < 5\n\n    def body_fun(params):\n        i, A = params\n        return (i + 1, 2 * A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A))\n    A = jnp.arange(4)\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 2)\n    self.assertEqual(len(out_sparse), 2)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testSparseWhileLoopDuplicateIndices(self):\n\n    def cond_fun(params):\n        i, A, B = params\n        return i < 5\n\n    def body_fun(params):\n        i, A, B = params\n        return (i + 1, B, A)\n\n    def f(A):\n        return lax.while_loop(cond_fun, body_fun, (0, A, A))\n    A = jnp.arange(4).reshape((2, 2))\n    out_dense = f(A)\n    Asp = BCOO.fromdense(A)\n    out_sparse = self.sparsify(f)(Asp)\n    self.assertEqual(len(out_dense), 3)\n    self.assertEqual(len(out_sparse), 3)\n    self.assertArraysEqual(out_dense[0], out_dense[0])\n    self.assertArraysEqual(out_dense[1], out_sparse[1].todense())\n    self.assertArraysEqual(out_dense[2], out_sparse[2].todense())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def testTracerIsInstanceCheck(self):\n\n    @self.sparsify\n    def f(x):\n        self.assertIsInstance(x, SparseTracer)\n    f(jnp.arange(5))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/sparsify_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  }
]