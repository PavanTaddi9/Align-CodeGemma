[
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_scan(self):\n\n    def f_jax(xs, ys):\n        body_const = np.ones((2,), dtype=np.float32)\n\n        def body(res0, inputs):\n            x, y = inputs\n            return (res0 + x * y, body_const)\n        return lax.scan(body, 0.0, (xs, ys))\n    arg = np.arange(10, dtype=np.float32)\n    self.ConvertAndCompare(f_jax, arg, arg)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_partial_eval(self):\n\n    def f_jax(xs, ys):\n        body_const = np.ones((2,), dtype=np.float32)\n\n        def body(res0, inputs):\n            x, y = inputs\n            return (res0 + x * y, body_const)\n        c_out, _ = lax.scan(body, 0.0, (xs, ys))\n        return c_out\n    arg = np.arange(10, dtype=np.float32)\n    self.ConvertAndCompare(jax.grad(f_jax), arg, arg)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_remat(self):\n\n    def f_jax(xs):\n\n        @jax.remat\n        def body_fun(carry, x):\n            return (carry * x, xs)\n        res1, res2 = lax.scan(body_fun, 0.0, xs + 1.0)\n        return jnp.sum(res1) + jnp.sum(res2)\n    arg = np.arange(10, dtype=np.float32) + 1.0\n    self.TransformConvertAndCompare(f_jax, arg, None)\n    self.TransformConvertAndCompare(f_jax, arg, 'grad')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n    key = jax.random.key(0)\n    return jax.random.bits(key) + jax.random.bits(key)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    nonlocal num_traces\n    num_traces += 1\n    return x + x"
  },
  {
    "test_code": "def test_while(self):\n    cond_const = np.ones(3, dtype=np.float32)\n    body_const1 = np.full_like(cond_const, 1.0)\n    body_const2 = np.full_like(cond_const, 2.0)\n\n    def func(x):\n\n        def cond(idx_carry):\n            i, c = idx_carry\n            return i < jnp.sum(cond_const)\n\n        def body(idx_carry):\n            i, c = idx_carry\n            return (i + 1, c + body_const1 + body_const2)\n        return lax.while_loop(cond, body, (0, x))\n    self.ConvertAndCompare(func, cond_const)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.custom_jvp\ndef sum(x):\n    return jnp.sum(x, axis=0)"
  },
  {
    "test_code": "def test_scan_remat(self):\n\n    def f_jax(xs):\n\n        @jax.remat\n        def body_fun(carry, x):\n            return (carry * x, xs)\n        res1, res2 = lax.scan(body_fun, 0.0, xs + 1.0)\n        return jnp.sum(res1) + jnp.sum(res2)\n    arg = np.arange(10, dtype=np.float32) + 1.0\n    self.TransformConvertAndCompare(f_jax, arg, None)\n    self.TransformConvertAndCompare(f_jax, arg, 'grad')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.custom_jvp\ndef sum(x):\n    return jnp.sum(x, axis=0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(a, b):\n    with set_xla_metadata(key2='val2'):\n        return a + b"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(n):\n    token = lax.create_token(n)\n    token = lax.fori_loop(0, n, doubler, token)\n    return n"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.full_like(x, 2.0)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(b):\n    return jax.scipy.sparse.linalg.cg(matvec, (b, b))[0]"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n\n    @jax.jit\n    def g(x):\n        return x * y\n    return g(x) + g(y)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(Xtree, y):\n    if deep:\n        out = Xtree['deep']['X'] @ y\n    else:\n        out = Xtree['X'] @ y\n    if bias:\n        out += Xtree['list'][1][0]\n    out = jnp.sum(out)\n    if has_aux:\n        return (out, {'y': y.shape})\n    else:\n        return out"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    y = jnp.array([2, 5])\n    return lax.rev(x * y, (0,))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.argmax(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return x + c"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jnp.cos(jnp.sum(jnp.exp(-x)) ** 2)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, y):\n    z = jax.numpy.add(x, y)\n    return self.pallas_call(kernel, grid=(3,), in_specs=[pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0))], out_specs=pl.BlockSpec((1, 128, 128), lambda i: (i, 0, 0)), out_shape=x, compiler_params=pltpu.TPUCompilerParams(allow_input_fusion=[True]))(z)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    return pl.pallas_call(kernel, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), grid=(iters,), in_specs=(pl.BlockSpec(x.shape, lambda i: (0, 0)),), out_specs=pl.BlockSpec(x.shape, lambda i: (0, 0)), interpret=mosaic_interpret.TPUInterpretParams())(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros_like(x)\n\n    def inner(refs):\n        x_ref, y_ref = refs\n\n        @pl.core_map(mesh)\n        def _():\n            num_cores = jax.lax.psum(1, 'x')\n            slc_size = 16 // num_cores\n\n            def alloc(x_vmem_ref, y_vmem_ref, sem):\n                core_index = jax.lax.axis_index('x')\n                slc = pl.ds(core_index * slc_size, slc_size)\n                pltpu.async_copy(x_ref.at[slc], x_vmem_ref, sem).wait()\n                y = x_vmem_ref[...] + jax.lax.axis_index('x')\n                y_vmem_ref[...] = y\n                pltpu.async_copy(y_vmem_ref, y_ref.at[slc], sem).wait()\n            pl.run_scoped(alloc, pltpu.VMEM((slc_size, 128), x_ref.dtype), pltpu.VMEM((slc_size, 128), y_ref.dtype), pltpu.SemaphoreType.DMA)\n    _, y = pl.run_state(inner)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x):\n    return jax.nn.relu(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros(x.shape[1:], x.dtype)\n\n    def body(refs):\n        copy_start, copy_done = make_stateful_async_slice(2)\n        x_ref, y_ref = refs\n        fut = copy_start(x_ref, y_ref)\n        copy_done(x_ref, y_ref, fut)\n    _, y = state_discharge.run_state(body)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros(x.shape[1:], x.dtype)\n\n    def body(refs):\n        copy_start, copy_done = make_stateful_async_slice(2)\n        x_ref, y_ref = refs\n        fut = copy_start(x_ref, y_ref)\n        copy_done(x_ref, y_ref, fut)\n    _, y = state_discharge.run_state(body)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros(x.shape[1:], x.dtype)\n\n    def body(refs):\n        copy_start, copy_done = make_stateful_async_slice(2)\n        x_ref, y_ref = refs\n        fut = copy_start(x_ref, y_ref)\n        copy_done(x_ref, y_ref, fut)\n    _, y = state_discharge.run_state(body)((x, y))\n    return y"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros(x.shape[1:], x.dtype)\n\n    def body(refs):\n        copy_start, copy_done = make_stateful_async_slice(2)\n        x_ref, y_ref = refs\n        fut = copy_start(x_ref, y_ref)\n        copy_done(x_ref, y_ref, fut)\n    _, y = state_discharge.run_state(body)((x, y))\n    return y"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = jnp.zeros(x.shape[1:], x.dtype)\n\n    def body(refs):\n        copy_start, copy_done = make_stateful_async_slice(2)\n        x_ref, y_ref = refs\n        fut = copy_start(x_ref, y_ref)\n        copy_done(x_ref, y_ref, fut)\n    _, y = state_discharge.run_state(body)((x, y))\n    return y"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, *, eager=False):\n\n    def copy_one(x_ref, o_ref):\n        o_ref[...] = x_ref[...]\n    grid = (2, 2)\n    block_shape = (x.shape[0] // grid[0], x.shape[1] // grid[1])\n    return pl.pallas_call(copy_one, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(block_shape, lambda i, j: (i, j))], out_specs=pl.BlockSpec(block_shape, lambda i, j: (i, j)), grid=grid, interpret=eager and jtu.test_device_matches(['cpu']))(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, *, eager=False):\n\n    def copy_one(x_ref, o_ref):\n        o_ref[...] = x_ref[...]\n    grid = (2, 2)\n    block_shape = (x.shape[0] // grid[0], x.shape[1] // grid[1])\n    return pl.pallas_call(copy_one, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(block_shape, lambda i, j: (i, j))], out_specs=pl.BlockSpec(block_shape, lambda i, j: (i, j)), grid=grid, interpret=eager and jtu.test_device_matches(['cpu']))(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, *, eager=False):\n\n    def copy_one(x_ref, o_ref):\n        o_ref[...] = x_ref[...]\n    grid = (2, 2)\n    block_shape = (x.shape[0] // grid[0], x.shape[1] // grid[1])\n    return pl.pallas_call(copy_one, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(block_shape, lambda i, j: (i, j))], out_specs=pl.BlockSpec(block_shape, lambda i, j: (i, j)), grid=grid, interpret=eager and jtu.test_device_matches(['cpu']))(x)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, *, eager=False):\n\n    def copy_one(x_ref, o_ref):\n        o_ref[...] = x_ref[...]\n    grid = (2, 2)\n    block_shape = (x.shape[0] // grid[0], x.shape[1] // grid[1])\n    return pl.pallas_call(copy_one, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(block_shape, lambda i, j: (i, j))], out_specs=pl.BlockSpec(block_shape, lambda i, j: (i, j)), grid=grid, interpret=eager and jtu.test_device_matches(['cpu']))(x)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(x, *, eager=False):\n\n    def copy_one(x_ref, o_ref):\n        o_ref[...] = x_ref[...]\n    grid = (2, 2)\n    block_shape = (x.shape[0] // grid[0], x.shape[1] // grid[1])\n    return pl.pallas_call(copy_one, out_shape=jax.ShapeDtypeStruct(x.shape, x.dtype), in_specs=[pl.BlockSpec(block_shape, lambda i, j: (i, j))], out_specs=pl.BlockSpec(block_shape, lambda i, j: (i, j)), grid=grid, interpret=eager and jtu.test_device_matches(['cpu']))(x)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct(out_shape, jnp.float32))\ndef f(x_ref, o_ref):\n    x = x_ref[...]\n    o_ref[...] = jax.lax.broadcast_in_dim(x, out_shape, dims)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct(out_shape, jnp.float32))\ndef f(x_ref, o_ref):\n    x = x_ref[...]\n    o_ref[...] = jax.lax.broadcast_in_dim(x, out_shape, dims)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct(out_shape, jnp.float32))\ndef f(x_ref, o_ref):\n    x = x_ref[...]\n    o_ref[...] = jax.lax.broadcast_in_dim(x, out_shape, dims)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct(out_shape, jnp.float32))\ndef f(x_ref, o_ref):\n    x = x_ref[...]\n    o_ref[...] = jax.lax.broadcast_in_dim(x, out_shape, dims)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct(out_shape, jnp.float32))\ndef f(x_ref, o_ref):\n    x = x_ref[...]\n    o_ref[...] = jax.lax.broadcast_in_dim(x, out_shape, dims)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n\n    @pl.run_state\n    def inner(y_ref):\n\n        @pl.core_map(mesh)\n        def kernel():\n\n            def scoped(barrier):\n                plgpu.barrier_arrive(barrier)\n                plgpu.barrier_wait(barrier)\n                wg_idx = jax.lax.axis_index('wg')\n                y_ref[wg_idx] = jnp.broadcast_to(wg_idx, (128,))\n            pl.run_scoped(scoped, plgpu.Barrier(num_arrivals=2))\n    y_init = jnp.zeros((2, 128), np.int32)\n    return inner(y_init)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n\n    @pl.run_state\n    def inner(y_ref):\n\n        @pl.core_map(mesh)\n        def kernel():\n\n            def scoped(barrier):\n                plgpu.barrier_arrive(barrier)\n                plgpu.barrier_wait(barrier)\n                wg_idx = jax.lax.axis_index('wg')\n                y_ref[wg_idx] = jnp.broadcast_to(wg_idx, (128,))\n            pl.run_scoped(scoped, plgpu.Barrier(num_arrivals=2))\n    y_init = jnp.zeros((2, 128), np.int32)\n    return inner(y_init)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n\n    @pl.run_state\n    def inner(y_ref):\n\n        @pl.core_map(mesh)\n        def kernel():\n\n            def scoped(barrier):\n                plgpu.barrier_arrive(barrier)\n                plgpu.barrier_wait(barrier)\n                wg_idx = jax.lax.axis_index('wg')\n                y_ref[wg_idx] = jnp.broadcast_to(wg_idx, (128,))\n            pl.run_scoped(scoped, plgpu.Barrier(num_arrivals=2))\n    y_init = jnp.zeros((2, 128), np.int32)\n    return inner(y_init)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n\n    @pl.run_state\n    def inner(y_ref):\n\n        @pl.core_map(mesh)\n        def kernel():\n\n            def scoped(barrier):\n                plgpu.barrier_arrive(barrier)\n                plgpu.barrier_wait(barrier)\n                wg_idx = jax.lax.axis_index('wg')\n                y_ref[wg_idx] = jnp.broadcast_to(wg_idx, (128,))\n            pl.run_scoped(scoped, plgpu.Barrier(num_arrivals=2))\n    y_init = jnp.zeros((2, 128), np.int32)\n    return inner(y_init)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f():\n\n    @pl.run_state\n    def inner(y_ref):\n\n        @pl.core_map(mesh)\n        def kernel():\n\n            def scoped(barrier):\n                plgpu.barrier_arrive(barrier)\n                plgpu.barrier_wait(barrier)\n                wg_idx = jax.lax.axis_index('wg')\n                y_ref[wg_idx] = jnp.broadcast_to(wg_idx, (128,))\n            pl.run_scoped(scoped, plgpu.Barrier(num_arrivals=2))\n    y_init = jnp.zeros((2, 128), np.int32)\n    return inner(y_init)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), jnp.float64))\ndef f(x_ref, y_ref):\n\n    def body(i, acc):\n        return acc + x_ref[...] + i * 0\n    y_ref[...] = lax.fori_loop(0, 3, body, jnp.zeros((4,), jnp.float64))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), jnp.float64))\ndef f(x_ref, y_ref):\n\n    def body(i, acc):\n        return acc + x_ref[...] + i * 0\n    y_ref[...] = lax.fori_loop(0, 3, body, jnp.zeros((4,), jnp.float64))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), jnp.float64))\ndef f(x_ref, y_ref):\n\n    def body(i, acc):\n        return acc + x_ref[...] + i * 0\n    y_ref[...] = lax.fori_loop(0, 3, body, jnp.zeros((4,), jnp.float64))"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), jnp.float64))\ndef f(x_ref, y_ref):\n\n    def body(i, acc):\n        return acc + x_ref[...] + i * 0\n    y_ref[...] = lax.fori_loop(0, 3, body, jnp.zeros((4,), jnp.float64))"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@functools.partial(self.pallas_call, out_shape=jax.ShapeDtypeStruct((4,), jnp.float64))\ndef f(x_ref, y_ref):\n\n    def body(i, acc):\n        return acc + x_ref[...] + i * 0\n    y_ref[...] = lax.fori_loop(0, 3, body, jnp.zeros((4,), jnp.float64))"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: t + 1.0, lambda f: f, x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_multiple_results(self):\n\n    def f_jax(pred, x):\n        return lax.cond(pred, lambda t: (t + 1.0, 1.0), lambda f: (f + 2.0, 2.0), x)\n    self.ConvertAndCompare(f_jax, jnp.bool_(True), 1.0)\n    self.ConvertAndCompare(f_jax, jnp.bool_(False), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_partial_eval(self):\n\n    def f(x):\n        res = lax.cond(True, lambda op: op * x, lambda op: op + x, x)\n        return res\n    self.ConvertAndCompare(jax.grad(f), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_units(self):\n\n    def g(x):\n        return lax.cond(True, lambda x: x, lambda y: y, x)\n    self.ConvertAndCompare(g, 0.7)\n    self.ConvertAndCompare(jax.grad(g), 0.7)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def cond(state):\n    i, s = state\n    return jnp.logical_and(i < 1024, s < 1024)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    for i in range(SIZE):\n        x = g(x, x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    for i in range(SIZE):\n        x = g(x, x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    for i in range(SIZE):\n        x = g(x, x)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    for i in range(SIZE):\n        x = g(x, x)\n    return x"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "@jax.jit\ndef f(x):\n    for i in range(SIZE):\n        x = g(x, x)\n    return x"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside cond.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(a, b):\n    c = jnp.dot(a, b)\n    return jnp.tanh(c)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_cond_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside cond.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.cond(True, f, lambda y: y, x)\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(a, b):\n    c = jnp.dot(a, b)\n    return jnp.tanh(c)"
  },
  {
    "test_code": "@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype .* requested in array is not available')\ndef test_while_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside while.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.while_loop(lambda carry: carry[0] < 10, lambda carry: (carry[0] + 1.0, f(carry[1])), (0.0, x))\n    arg = 0.7\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(a, b):\n    c = jnp.dot(a, b)\n    return jnp.tanh(c)"
  },
  {
    "test_code": "def test_scan_custom_jvp(self):\n    \"\"\"Conversion of function with custom JVP, inside scan.\n    This exercises the custom_jvp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_jvp\n    def f(x):\n        return x * x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        x, = primals\n        x_dot, = tangents\n        primal_out = f(x)\n        tangent_out = 3.0 * x * x_dot\n        return (primal_out, tangent_out)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'jvp')\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'jvp_vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(a, b):\n    c = jnp.dot(a, b)\n    return jnp.tanh(c)"
  },
  {
    "test_code": "def test_scan_custom_vjp(self):\n    \"\"\"Conversion of function with custom VJP, inside scan.\n    This exercises the custom_vjp_call_jaxpr primitives.\"\"\"\n\n    @jax.custom_vjp\n    def f(x):\n        return x * x\n\n    def f_fwd(x):\n        return (f(x), 3.0 * x)\n\n    def f_bwd(residual, ct_b):\n        return (residual * ct_b,)\n    f.defvjp(f_fwd, f_bwd)\n\n    def g(x):\n        return lax.scan(lambda carry, inp: (carry + f(inp), 0.0), np.full(x.shape[1:], 0.0), x)[0]\n    arg = np.full((5,), 0.7)\n    self.TransformConvertAndCompare(g, arg, None)\n    self.TransformConvertAndCompare(g, arg, 'vmap')\n    self.TransformConvertAndCompare(g, arg, 'grad')\n    self.TransformConvertAndCompare(g, arg, 'grad_vmap')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/jax/experimental/jax2tf/tests/control_flow_ops_test.py",
    "function": "def f(a, b):\n    c = jnp.dot(a, b)\n    return jnp.tanh(c)"
  }
]