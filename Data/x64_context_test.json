[
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef test_make_array(self, jit):\n    func = jit(lambda: jnp.array(np.float64(0)))\n    dtype_start = func().dtype\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')\n    self.assertEqual(func().dtype, dtype_start)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION, enable_or_disable=[enable_x64, disable_x64])\ndef test_correctly_capture_default(self, jit, enable_or_disable):\n    with enable_or_disable():\n        func = jit(lambda: jnp.array(np.float64(0)))\n        func()\n    expected_dtype = 'float64' if jax.config._read('jax_enable_x64') else 'float32'\n    self.assertEqual(func().dtype, expected_dtype)\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef test_make_array(self, jit):\n    func = jit(lambda: jnp.array(np.float64(0)))\n    dtype_start = func().dtype\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')\n    self.assertEqual(func().dtype, dtype_start)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION, enable_or_disable=[enable_x64, disable_x64])\ndef test_correctly_capture_default(self, jit, enable_or_disable):\n    with enable_or_disable():\n        func = jit(lambda: jnp.array(np.float64(0)))\n        func()\n    expected_dtype = 'float64' if jax.config._read('jax_enable_x64') else 'float32'\n    self.assertEqual(func().dtype, expected_dtype)\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef test_make_array(self, jit):\n    func = jit(lambda: jnp.array(np.float64(0)))\n    dtype_start = func().dtype\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')\n    self.assertEqual(func().dtype, dtype_start)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION, enable_or_disable=[enable_x64, disable_x64])\ndef test_correctly_capture_default(self, jit, enable_or_disable):\n    with enable_or_disable():\n        func = jit(lambda: jnp.array(np.float64(0)))\n        func()\n    expected_dtype = 'float64' if jax.config._read('jax_enable_x64') else 'float32'\n    self.assertEqual(func().dtype, expected_dtype)\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION)\ndef test_make_array(self, jit):\n    func = jit(lambda: jnp.array(np.float64(0)))\n    dtype_start = func().dtype\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')\n    self.assertEqual(func().dtype, dtype_start)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jtu.sample_product(jit=jtu.JIT_IMPLEMENTATION, enable_or_disable=[enable_x64, disable_x64])\ndef test_correctly_capture_default(self, jit, enable_or_disable):\n    with enable_or_disable():\n        func = jit(lambda: jnp.array(np.float64(0)))\n        func()\n    expected_dtype = 'float64' if jax.config._read('jax_enable_x64') else 'float32'\n    self.assertEqual(func().dtype, expected_dtype)\n    with enable_x64():\n        self.assertEqual(func().dtype, 'float64')\n    with disable_x64():\n        self.assertEqual(func().dtype, 'float32')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\n@jax.debug_key_reuse(False)\n@jtu.ignore_warning(category=UserWarning, message='Explicitly requested dtype float64  is not available')\ndef test_jit_cache(self):\n    if jtu.test_device_matches(['tpu']):\n        self.skipTest('64-bit random not available on TPU')\n    f = partial(random.uniform, random.PRNGKey(0), (1,), 'float64', -1, 1)\n    with disable_x64():\n        for _ in range(2):\n            f()\n    with enable_x64():\n        for _ in range(2):\n            f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/x64_context_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  }
]