[
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_custom_tangent_dtype_with_scan(self):\n    from jax._src import core\n\n    class ScalesTyRules:\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n        allow_conversion: bool = True\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n        @staticmethod\n        def tangent_dtype(dtype):\n            return dtype\n\n    class scale_dtype(dtypes.extended):\n        pass\n\n    @dataclasses.dataclass(frozen=True)\n    class scale_dtype(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        _rules: type = ScalesTyRules\n        type: type = scale_dtype\n\n        def __repr__(self) -> str:\n            nbits = dtypes.finfo(self.float_dtype).bits\n            return f'scale{nbits}'\n        name = property(__repr__)\n    f32 = jnp.dtype('float32')\n    sc32 = scale_dtype(f32)\n\n    def outer(x, scale_f32):\n        scale = jax.lax.convert_element_type(scale_f32, sc32)\n\n        def body_fun(carry, _):\n            carry = inner(carry, scale)\n            return (carry, None)\n        x, _ = jax.lax.scan(body_fun, x, None, length=3)\n        return x\n\n    @jax.custom_vjp\n    def inner(carry, scale):\n        del scale\n        return carry\n\n    def inner_fwd(carry, scale):\n        return (inner(carry, scale), scale)\n\n    def inner_bwd(prev_scale, grads):\n        prev_scale_f32 = jax.lax.convert_element_type(prev_scale, f32)\n        new_scale_f32 = 1.0 / 2 * (prev_scale_f32 + jnp.max(grads))\n        new_scale = jax.lax.convert_element_type(new_scale_f32, sc32)\n        return (grads, new_scale)\n    inner.defvjp(inner_fwd, inner_bwd)\n    scale = jnp.float32(1.0)\n    _, new_scale = jax.jit(jax.grad(outer, (0, 1)))(jnp.float32(3.14), scale)\n    self.assertAllClose(new_scale, jnp.float32(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_custom_tangent_dtype(self):\n    from jax._src import core\n\n    class scale(dtypes.extended):\n        pass\n\n    class ScalesTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(dtype) -> core.ShapedArray:\n            return core.ShapedArray((), dtype.float_dtype)\n\n        @staticmethod\n        def global_sharded_result_handler(aval, sharding, committed, is_from_xla):\n            raise NotImplementedError('convert back under the jit')\n\n        @staticmethod\n        def add(dt, x, y):\n            fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n            toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n            return toscale(jax.lax.max(fromscale(x), fromscale(y)))\n\n        @staticmethod\n        def zero(dt):\n            neginf = np.array(-np.inf if dtypes.supports_inf(dt.float_dtype) else dtypes.finfo(dt.float_dtype).min, dt.float_dtype)\n            return jax.lax.convert_element_type(neginf, dt)\n\n    @dataclasses.dataclass(frozen=True)\n    class ScaleTy(dtypes.ExtendedDType):\n        float_dtype: dtypes.DType\n        name: str = 'scale'\n        _rules: type = ScalesTyRules\n        type: type = scale\n\n    @jax.custom_vjp\n    def g(x):\n        return x\n\n    def g_fwd(x):\n        return (x, None)\n\n    def g_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ScaleTy(dtypes.float8_e5m2))\n        return (ct,)\n    g.defvjp(g_fwd, g_bwd)\n\n    @jax.custom_vjp\n    def convert(x):\n        return x\n\n    def convert_fwd(x):\n        return (x, None)\n\n    def convert_bwd(_, ct):\n        ct = jax.lax.convert_element_type(ct, ct.dtype.float_dtype)\n        return (ct,)\n    convert.defvjp(convert_fwd, convert_bwd)\n\n    @jax.jit\n    def f(x):\n        x = convert(x)\n        x = g(x) + g(x)\n        return x\n    x = jnp.array(3.0, dtypes.float8_e5m2)\n    out = jax.grad(f)(x)\n    self.assertAllClose(out, 1.0, check_dtypes=False)\n    self.assertTrue(dtypes.issubdtype(ScaleTy(dtypes.float8_e5m2), scale))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_type={type_.__name__}', 'type_': type_} for type_ in python_scalar_types))\ndef testDefaultTypes(self, type_):\n    expected_dtype = dtypes.canonicalize_dtype(dtypes.python_scalar_dtypes[type_])\n    for f in [jnp.array, jax.jit(jnp.array), jax.jit(lambda x: x)]:\n        y = f(type_(0))\n        self.assertTrue(isinstance(y, jax.Array), msg=(f, y))\n        self.assertEqual(y.dtype, expected_dtype, msg=(f, y))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters(itertools.product([(), (2,), (3, 4)], repeat=2))\ndef test_edtype_conversion(self, shape_prefix, shape_suffix):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=shape_suffix, dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    def f(x):\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n        x = jax.lax.convert_element_type(x, dtype)\n        self.assertEqual(x.shape, shape_prefix)\n        self.assertEqual(x.dtype, dtype)\n        x = jax.lax.convert_element_type(x, 'int32')\n        self.assertEqual(x.shape, shape_prefix + shape_suffix)\n        self.assertEqual(x.dtype, jnp.dtype('int32'))\n    f(jnp.zeros(shape_prefix + shape_suffix, dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_edtype_conversion_errors(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype = DType()\n\n    class scalar2(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType2(dtypes.ExtendedDType):\n        name = 'dt2'\n        type = scalar2\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(3,), dtype='int32'), allow_conversion=True)\n    dtype2 = DType2()\n\n    @jax.jit\n    def f(x):\n        y = jax.lax.convert_element_type(x, dtype)\n        with self.assertRaisesRegex(ValueError, 'cannot directly'):\n            jax.lax.convert_element_type(y, dtype2)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x.astype('float32'), dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, :2], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(x[:, 0], dtype)\n        with self.assertRaisesRegex(ValueError, 'can only convert'):\n            jax.lax.convert_element_type(y, 'float32')\n    f(jnp.zeros((5, 3), dtype='int32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_edtype_conversion_autodiff(self):\n\n    class scalar(dtypes.extended):\n        ...\n\n    @dataclasses.dataclass(frozen=True)\n    class DType(dtypes.ExtendedDType):\n        name = 'dt'\n        type = scalar\n        _rules = types.SimpleNamespace(physical_element_aval=lambda _: types.SimpleNamespace(shape=(), dtype='float32'), tangent_dtype=lambda dtype: jnp.dtype('bfloat16'), allow_conversion=True)\n    dtype = DType()\n\n    @jax.jit\n    @jax.grad\n    def f(x):\n        x = jax.lax.convert_element_type(x, dtype)\n\n        @jax.custom_jvp\n        def g(x):\n            return x\n\n        @g.defjvp\n        def g_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, dtype)\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('bfloat16'))\n            return (x, x_dot)\n        x = g(x)\n        x = jax.lax.convert_element_type(x, 'float32')\n\n        @jax.custom_jvp\n        def h(x):\n            return x\n\n        @h.defjvp\n        def h_jvp(primals, tangents):\n            (x,), (x_dot,) = (primals, tangents)\n            self.assertEqual(x.shape, (5,))\n            self.assertEqual(x.dtype, jnp.dtype('float32'))\n            self.assertEqual(x_dot.shape, (5,))\n            self.assertEqual(x_dot.dtype, jnp.dtype('float32'))\n            return (x, x_dot)\n        x = h(x)\n        return 0.0\n    f(jnp.zeros(5, dtype='float32'))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_extended_dtypes_at_rest(self, jit):\n    from jax._src import core\n    from jax._src.interpreters import pxla\n\n    class foo(dtypes.extended):\n        pass\n\n    class FooTyRules:\n        allow_conversion: bool = True\n\n        @staticmethod\n        def physical_element_aval(foo_dtype):\n            return core.ShapedArray((), dtypes.dtype('float32'))\n\n        @staticmethod\n        def global_sharded_result_handler(aval, out_sharding, committed):\n            phys_sharding = out_sharding\n            phys_aval = core.physical_aval(aval)\n            phys_handler_maker = pxla.global_result_handlers[core.ShapedArray]\n            phys_handler = phys_handler_maker(phys_aval, phys_sharding, committed)\n            return lambda bufs: earray.EArray(aval, phys_handler(bufs))\n\n    @dataclasses.dataclass(frozen=True)\n    class FooTy(dtypes.ExtendedDType):\n        name: str = 'foo'\n        _rules: type = FooTyRules\n        type: type = foo\n\n    def f(x):\n        return jax.lax.convert_element_type(x, FooTy())\n    if jit:\n        f = jax.jit(f)\n    x = f(jnp.arange(3, dtype='float32'))\n    self.assertIsInstance(x.dtype, FooTy)\n\n    def g(x):\n        self.assertIsInstance(x.dtype, FooTy)\n        return x\n    if jit:\n        g = jax.jit(g)\n    y = g(x)\n    self.assertIsInstance(y.dtype, FooTy)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{typ}', 'typ': typ} for typ in [bool, int, float, complex]))\ndef testScalarWeakTypes(self, typ):\n    val = typ(0)\n    result1 = jnp.array(val)\n    result2 = jax.jit(jnp.array)(val)\n    self.assertEqual(result1.aval, result2.aval)\n    with jax.numpy_dtype_promotion('standard'):\n        f = lambda x: x / 2\n        result1 = jnp.array(f(val))\n        result2 = jax.jit(f)(val)\n    self.assertEqual(result1.aval, result2.aval)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/dtypes_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  }
]