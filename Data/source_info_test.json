[
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def add(self, x: jax.Array) -> jax.Array:\n    self.value += np.asarray(x)\n    return jax.device_put(self.value, x.sharding)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_inline_jit_location_uses_callee_location(self):\n\n    @partial(jax.jit, inline=True)\n    def f(x):\n        return lax.add(x, 3)\n\n    def g(x):\n        return lax.add(f(x), 4)\n\n    def h(x):\n        return lax.add(f(x), 5)\n    for fn in (g, h):\n        lines, fn_startline = inspect.getsourcelines(fn)\n        fn_endline = fn_startline + len(lines)\n        jaxpr = jax.make_jaxpr(fn)(2)\n        for eqn in jaxpr.eqns:\n            frame = source_info_util.user_frame(eqn.source_info)\n            assert frame is not None, eqn\n            self.assertLessEqual(fn_startline, frame.start_line)\n            self.assertLessEqual(frame.end_line, fn_endline)",
    "assertions": [
      "assert frame is not None, eqn"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/source_info_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  }
]