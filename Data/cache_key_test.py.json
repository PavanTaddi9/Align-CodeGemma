[
  {
    "test_code": "def test_custom_partitioning_ptr_removal(self):\n\n    def _partition(mesh, arg_shapes, result_shape):\n        arg_shardings = jax.tree.map(lambda x: x.sharding, arg_shapes)\n        result_shardings = NamedSharding(mesh, arg_shapes[0].sharding.spec)\n        return (mesh, jax.numpy.add, result_shardings, arg_shardings)\n\n    def _infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return NamedSharding(mesh, arg_shapes[0].sharding.spec)\n\n    @custom_partitioning\n    def _cp_add(x, y):\n        return jax.numpy.add(x, y)\n    _cp_add.def_partition(infer_sharding_from_operands=_infer_sharding_from_operands, partition=_partition)\n    devices = np.asarray(jax.devices())\n    with Mesh(devices, ('x',)) as m:\n        computation = jax.jit(_cp_add, in_shardings=(NamedSharding(m, P('x')), NamedSharding(m, P('x'))), out_shardings=NamedSharding(m, P('x'))).lower(jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32), jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32)).compiler_ir()\n        pattern = 'stablehlo\\\\.custom_call @CustomSPMDPartitioning\\\\((.*?)\\\\) \\\\{(.*?backend_config\\\\s*=\\\\s*\"([^\"]*)\".*?)\\\\}'\n        with computation.context:\n            updated_module = cache_key._remove_callbacks(type_cast(ir.Module, computation.operation.clone()), ignore_callbacks=cache_key.IgnoreCallbacks.ALL)\n            bcs = [match[2] for match in re.findall(pattern, str(updated_module), re.DOTALL)]\n            for bc in bcs:\n                self.assertEqual(bc, 'REMOVED')\n        compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n        backend = xla_bridge.get_backend()\n        hash_without_callback_ptrs = cache_key.get(computation, devices, compile_options, backend, ignore_callbacks=cache_key.IgnoreCallbacks.CUSTOM_PARTITIONING)\n        expected_hash = cache_key.get(updated_module, devices, compile_options, backend)\n        self.assertEqual(expected_hash, hash_without_callback_ptrs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "@parameterized.parameters([False, True])\n@jtu.thread_unsafe_test()\ndef test_identical_computations_different_metadata(self, include_metadata):\n    f = lambda x, y: lax.mul(lax.add(x, y), 2)\n    g = lambda x, y: lax.mul(lax.add(x, y), 2)\n    assert id(f) != id(g)\n    computation1 = jax.jit(f).lower(1, 1).compiler_ir()\n    computation2 = jax.jit(g).lower(2, 3).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    with config.compilation_cache_include_metadata_in_key(include_metadata):\n        key1 = cache_key.get(computation1, devices, compile_options, backend)\n        key2 = cache_key.get(computation2, devices, compile_options, backend)\n    self.assertEqual(include_metadata, key1 != key2)",
    "assertions": [
      "assert id(f) != id(g)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "def test_same_key(self):\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    self.assertEqual(cache_key.get(computation, devices, compile_options, backend), cache_key.get(computation, devices, compile_options, backend))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_different_key(self):\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options_not_filled = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    compile_options_filled = self.filled_compile_options()\n    backend = xla_bridge.get_backend()\n    self.assertNotEqual(cache_key.get(computation, devices, compile_options_not_filled, backend), cache_key.get(computation, devices, compile_options_filled, backend))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_custom_hook(self):\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    original_custom_hook = cache_key.custom_hook\n    cache_key.custom_hook = lambda: 'hook1'\n    key1 = cache_key.get(computation, devices, compile_options, backend)\n    cache_key.custom_hook = lambda: 'hook2'\n    key2 = cache_key.get(computation, devices, compile_options, backend)\n    cache_key.custom_hook = original_custom_hook\n    self.assertNotEqual(key1, key2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_different_computations(self):\n    computation1 = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    computation2 = jax.jit(lambda x, y: x * y).lower(2, 2).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    self.assertNotEqual(cache_key.get(computation1, devices, compile_options, backend), cache_key.get(computation2, devices, compile_options, backend))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_custom_partitioning_ptr_removal(self):\n\n    def _partition(mesh, arg_shapes, result_shape):\n        arg_shardings = jax.tree.map(lambda x: x.sharding, arg_shapes)\n        result_shardings = NamedSharding(mesh, arg_shapes[0].sharding.spec)\n        return (mesh, jax.numpy.add, result_shardings, arg_shardings)\n\n    def _infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return NamedSharding(mesh, arg_shapes[0].sharding.spec)\n\n    @custom_partitioning\n    def _cp_add(x, y):\n        return jax.numpy.add(x, y)\n    _cp_add.def_partition(infer_sharding_from_operands=_infer_sharding_from_operands, partition=_partition)\n    devices = np.asarray(jax.devices())\n    with Mesh(devices, ('x',)) as m:\n        computation = jax.jit(_cp_add, in_shardings=(NamedSharding(m, P('x')), NamedSharding(m, P('x'))), out_shardings=NamedSharding(m, P('x'))).lower(jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32), jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32)).compiler_ir()\n        pattern = 'stablehlo\\\\.custom_call @CustomSPMDPartitioning\\\\((.*?)\\\\) \\\\{(.*?backend_config\\\\s*=\\\\s*\"([^\"]*)\".*?)\\\\}'\n        with computation.context:\n            updated_module = cache_key._remove_callbacks(type_cast(ir.Module, computation.operation.clone()), ignore_callbacks=cache_key.IgnoreCallbacks.ALL)\n            bcs = [match[2] for match in re.findall(pattern, str(updated_module), re.DOTALL)]\n            for bc in bcs:\n                self.assertEqual(bc, 'REMOVED')\n        compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n        backend = xla_bridge.get_backend()\n        hash_without_callback_ptrs = cache_key.get(computation, devices, compile_options, backend, ignore_callbacks=cache_key.IgnoreCallbacks.CUSTOM_PARTITIONING)\n        expected_hash = cache_key.get(updated_module, devices, compile_options, backend)\n        self.assertEqual(expected_hash, hash_without_callback_ptrs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "@jtu.skip_on_devices('cpu')\ndef test_host_callbacks_ptrs_removed(self):\n\n    def _host_callback(x, y):\n        jax.debug.print('x={x[0]} y={y[0]}', x=x, y=y)\n    computation = jax.jit(_host_callback).lower(jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32), jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32)).compiler_ir()\n    pattern = '(.*?backend_config\\\\s*=\\\\s*\"([^\"]*)\".*?)'\n    with computation.context:\n        updated_module = cache_key._remove_callbacks(type_cast(ir.Module, computation.operation.clone()), ignore_callbacks=cache_key.IgnoreCallbacks.ALL)\n        bcs = [match[1] for match in re.findall(pattern, str(updated_module), re.DOTALL)]\n        for bc in bcs:\n            self.assertEqual(bc, 'REMOVED')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_different_device_assignment(self):\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options_1 = compiler.get_compile_options(num_replicas=1, num_partitions=1, device_assignment=np.array([[0]]))\n    compile_options_2 = compiler.get_compile_options(num_replicas=1, num_partitions=1, device_assignment=np.array([[1]]))\n    backend = xla_bridge.get_backend()\n    hash_1 = cache_key.get(computation, devices, compile_options_1, backend)\n    hash_2 = cache_key.get(computation, devices, compile_options_2, backend)\n    if backend.platform == 'gpu':\n        self.assertEqual(hash_1, hash_2)\n    else:\n        self.assertNotEqual(hash_1, hash_2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "@parameterized.parameters([False, True])\n@jtu.thread_unsafe_test()\ndef test_identical_computations_different_metadata(self, include_metadata):\n    f = lambda x, y: lax.mul(lax.add(x, y), 2)\n    g = lambda x, y: lax.mul(lax.add(x, y), 2)\n    assert id(f) != id(g)\n    computation1 = jax.jit(f).lower(1, 1).compiler_ir()\n    computation2 = jax.jit(g).lower(2, 3).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    with config.compilation_cache_include_metadata_in_key(include_metadata):\n        key1 = cache_key.get(computation1, devices, compile_options, backend)\n        key2 = cache_key.get(computation2, devices, compile_options, backend)\n    self.assertEqual(include_metadata, key1 != key2)",
    "assertions": [
      "assert id(f) != id(g)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\ndef test_xla_flags(self):\n    if jtu.is_device_tpu(version=4):\n        raise unittest.SkipTest('TODO(b/240151176)')\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    orig_xla_flags = os.getenv('XLA_FLAGS')\n    orig_argv = sys.argv\n    try:\n        os.environ['XLA_FLAGS'] = '--xla_gpu_autotune_level=0'\n        key1 = cache_key.get(computation, devices, compile_options, backend)\n        os.environ['XLA_FLAGS'] = '--xla_gpu_autotune_level=1'\n        key2 = cache_key.get(computation, devices, compile_options, backend)\n        self.assertNotEqual(key1, key2)\n        os.environ['XLA_FLAGS'] = '--xla_gpu_autotune_level=0'\n        key3 = cache_key.get(computation, devices, compile_options, backend)\n        self.assertEqual(key1, key3)\n        os.environ['XLA_FLAGS'] = '--xla_gpu_autotune_level=0 --xla_force_host_platform_device_count=8'\n        key4 = cache_key.get(computation, devices, compile_options, backend)\n        self.assertEqual(key1, key4)\n        del os.environ['XLA_FLAGS']\n        sys.argv.append('--xla_gpu_autotune_level=0')\n        key5 = cache_key.get(computation, devices, compile_options, backend)\n        self.assertEqual(key1, key5)\n        sys.argv.append('--xla_force_host_platform_device_count=8')\n        self.assertEqual(key1, key5)\n    finally:\n        if orig_xla_flags is not None:\n            os.environ['XLA_FLAGS'] = orig_xla_flags\n        elif os.getenv('XLA_FLAGS') is not None:\n            del os.environ['XLA_FLAGS']\n        sys.argv = orig_argv",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\ndef test_libtpu_init_args(self):\n    if jtu.is_device_tpu(version=4):\n        raise unittest.SkipTest('TODO(b/240151176)')\n    computation = jax.jit(lambda x, y: x + y).lower(1, 1).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    orig_libtpu_init_args = os.getenv('LIBTPU_INIT_ARGS')\n    orig_argv = sys.argv\n    try:\n        os.environ['LIBTPU_INIT_ARGS'] = '--xla_spmd_threshold_for_windowed_einsum_mib=0'\n        key1 = cache_key.get(computation, devices, compile_options, backend)\n        os.environ['LIBTPU_INIT_ARGS'] = '--xla_spmd_threshold_for_windowed_einsum_mib=1'\n        key2 = cache_key.get(computation, devices, compile_options, backend)\n        self.assertNotEqual(key1, key2)\n    finally:\n        if orig_libtpu_init_args is not None:\n            os.environ['LIBTPU_INIT_ARGS'] = orig_libtpu_init_args\n        elif os.getenv('LIBTPU_INIT_ARGS') is not None:\n            del os.environ['LIBTPU_INIT_ARGS']\n        sys.argv = orig_argv",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "@parameterized.parameters([False, True])\n@jtu.thread_unsafe_test()\ndef test_identical_computations_different_metadata(self, include_metadata):\n    f = lambda x, y: lax.mul(lax.add(x, y), 2)\n    g = lambda x, y: lax.mul(lax.add(x, y), 2)\n    assert id(f) != id(g)\n    computation1 = jax.jit(f).lower(1, 1).compiler_ir()\n    computation2 = jax.jit(g).lower(2, 3).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    with config.compilation_cache_include_metadata_in_key(include_metadata):\n        key1 = cache_key.get(computation1, devices, compile_options, backend)\n        key2 = cache_key.get(computation2, devices, compile_options, backend)\n    self.assertEqual(include_metadata, key1 != key2)",
    "assertions": [
      "assert id(f) != id(g)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "@jax.jit\ndef mul(x):\n    return x @ x.T"
  },
  {
    "test_code": "def test_custom_partitioning_ptr_removal(self):\n\n    def _partition(mesh, arg_shapes, result_shape):\n        arg_shardings = jax.tree.map(lambda x: x.sharding, arg_shapes)\n        result_shardings = NamedSharding(mesh, arg_shapes[0].sharding.spec)\n        return (mesh, jax.numpy.add, result_shardings, arg_shardings)\n\n    def _infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return NamedSharding(mesh, arg_shapes[0].sharding.spec)\n\n    @custom_partitioning\n    def _cp_add(x, y):\n        return jax.numpy.add(x, y)\n    _cp_add.def_partition(infer_sharding_from_operands=_infer_sharding_from_operands, partition=_partition)\n    devices = np.asarray(jax.devices())\n    with Mesh(devices, ('x',)) as m:\n        computation = jax.jit(_cp_add, in_shardings=(NamedSharding(m, P('x')), NamedSharding(m, P('x'))), out_shardings=NamedSharding(m, P('x'))).lower(jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32), jax.ShapeDtypeStruct([1024], dtype=jax.numpy.float32)).compiler_ir()\n        pattern = 'stablehlo\\\\.custom_call @CustomSPMDPartitioning\\\\((.*?)\\\\) \\\\{(.*?backend_config\\\\s*=\\\\s*\"([^\"]*)\".*?)\\\\}'\n        with computation.context:\n            updated_module = cache_key._remove_callbacks(type_cast(ir.Module, computation.operation.clone()), ignore_callbacks=cache_key.IgnoreCallbacks.ALL)\n            bcs = [match[2] for match in re.findall(pattern, str(updated_module), re.DOTALL)]\n            for bc in bcs:\n                self.assertEqual(bc, 'REMOVED')\n        compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n        backend = xla_bridge.get_backend()\n        hash_without_callback_ptrs = cache_key.get(computation, devices, compile_options, backend, ignore_callbacks=cache_key.IgnoreCallbacks.CUSTOM_PARTITIONING)\n        expected_hash = cache_key.get(updated_module, devices, compile_options, backend)\n        self.assertEqual(expected_hash, hash_without_callback_ptrs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def add(self, x: jax.Array) -> jax.Array:\n    self.value += np.asarray(x)\n    return jax.device_put(self.value, x.sharding)"
  },
  {
    "test_code": "@parameterized.parameters([False, True])\n@jtu.thread_unsafe_test()\ndef test_identical_computations_different_metadata(self, include_metadata):\n    f = lambda x, y: lax.mul(lax.add(x, y), 2)\n    g = lambda x, y: lax.mul(lax.add(x, y), 2)\n    assert id(f) != id(g)\n    computation1 = jax.jit(f).lower(1, 1).compiler_ir()\n    computation2 = jax.jit(g).lower(2, 3).compiler_ir()\n    devices = np.array([[jax.local_devices()[0]]])\n    compile_options = compiler.get_compile_options(num_replicas=1, num_partitions=1)\n    backend = xla_bridge.get_backend()\n    with config.compilation_cache_include_metadata_in_key(include_metadata):\n        key1 = cache_key.get(computation1, devices, compile_options, backend)\n        key2 = cache_key.get(computation2, devices, compile_options, backend)\n    self.assertEqual(include_metadata, key1 != key2)",
    "assertions": [
      "assert id(f) != id(g)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/cache_key_test.py",
    "function": "def add(self, x: jax.Array) -> jax.Array:\n    self.value += np.asarray(x)\n    return jax.device_put(self.value, x.sharding)"
  }
]