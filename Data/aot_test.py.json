[
  {
    "test_code": "@jtu.run_on_devices('tpu', 'gpu')\ndef test_pickle_pjit_lower(self):\n\n    def fun(x):\n        return x * x\n    with jax.sharding.Mesh(np.array(jax.devices()), ('data',)):\n        lowered = pjit(fun, in_shardings=P('data'), out_shardings=P(None, 'data')).lower(core.ShapedArray(shape=(8, 8), dtype=np.float32))\n\n    def verify_serialization(lowered):\n        serialized, in_tree, out_tree = serialize(lowered.compile())\n        compiled = deserialize_and_load(serialized, in_tree, out_tree)\n        self.assertEqual(compiled.as_text(), lowered.compile().as_text())\n    verify_serialization(lowered)\n    verify_serialization(jax.jit(lambda x: x * x).lower(np.arange(100)))\n    verify_serialization(jax.pmap(lambda x: x * x).lower(np.zeros((len(jax.devices()), 4), dtype=np.float32)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_lower_as_text_with_and_without_debug_info(self):\n\n    def my_function(x):\n        return jnp.sin(x)\n    lowered = jax.jit(my_function).lower(42.0)\n    stablehlo = lowered.as_text('stablehlo', debug_info=True)\n    self.assertRegex(stablehlo, 'sine.* loc')\n    stablehlo = lowered.as_text('stablehlo')\n    self.assertNotRegex(stablehlo, 'sine.* loc')\n    hlo = lowered.as_text('hlo', debug_info=True)\n    self.assertRegex(hlo, 'sine.*metadata=.*source_file=.*')\n    hlo = lowered.as_text('hlo')\n    self.assertNotRegex(hlo, 'sine.*metadata=.*source_file=.*')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "@jtu.run_on_devices('tpu', 'gpu')\ndef test_pickle_pjit_lower(self):\n\n    def fun(x):\n        return x * x\n    with jax.sharding.Mesh(np.array(jax.devices()), ('data',)):\n        lowered = pjit(fun, in_shardings=P('data'), out_shardings=P(None, 'data')).lower(core.ShapedArray(shape=(8, 8), dtype=np.float32))\n\n    def verify_serialization(lowered):\n        serialized, in_tree, out_tree = serialize(lowered.compile())\n        compiled = deserialize_and_load(serialized, in_tree, out_tree)\n        self.assertEqual(compiled.as_text(), lowered.compile().as_text())\n    verify_serialization(lowered)\n    verify_serialization(jax.jit(lambda x: x * x).lower(np.arange(100)))\n    verify_serialization(jax.pmap(lambda x: x * x).lower(np.zeros((len(jax.devices()), 4), dtype=np.float32)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_topology_pjit_serialize(self):\n    try:\n        aot_topo = topologies.get_topology_desc(platform=jax.devices()[0].platform)\n    except NotImplementedError:\n        raise unittest.SkipTest('PJRT Topology not supported')\n    if jtu.TEST_WITH_PERSISTENT_COMPILATION_CACHE.value:\n        raise unittest.SkipTest('Compilation caching not yet supported.')\n\n    @jax.jit\n    def fn(x):\n        return x * x\n\n    def lower_and_load(mesh):\n        s = jax.sharding.NamedSharding(mesh, P('x', 'y'))\n        x_shape = jax.ShapeDtypeStruct(shape=(16, 16), dtype=jnp.dtype('float32'), sharding=s)\n        lowered = fn.lower(x_shape)\n        serialized, in_tree, out_tree = serialize(lowered.compile())\n        compiled = deserialize_and_load(serialized, in_tree, out_tree)\n        return compiled\n    ref_topo = topologies.get_attached_topology()\n    n = max(1, len(ref_topo.devices) // 2)\n    mesh_shape = (len(ref_topo.devices) // n, n)\n    ref_mesh = topologies.make_mesh(ref_topo, mesh_shape, ('x', 'y'))\n    aot_mesh = topologies.make_mesh(aot_topo, mesh_shape, ('x', 'y'))\n    self.assertEqual(lower_and_load(ref_mesh).as_text(), lower_and_load(aot_mesh).as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lower_as_text_with_and_without_debug_info(self):\n\n    def my_function(x):\n        return jnp.sin(x)\n    lowered = jax.jit(my_function).lower(42.0)\n    stablehlo = lowered.as_text('stablehlo', debug_info=True)\n    self.assertRegex(stablehlo, 'sine.* loc')\n    stablehlo = lowered.as_text('stablehlo')\n    self.assertNotRegex(stablehlo, 'sine.* loc')\n    hlo = lowered.as_text('hlo', debug_info=True)\n    self.assertRegex(hlo, 'sine.*metadata=.*source_file=.*')\n    hlo = lowered.as_text('hlo')\n    self.assertNotRegex(hlo, 'sine.*metadata=.*source_file=.*')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lower_as_text_with_and_without_debug_info(self):\n\n    def my_function(x):\n        return jnp.sin(x)\n    lowered = jax.jit(my_function).lower(42.0)\n    stablehlo = lowered.as_text('stablehlo', debug_info=True)\n    self.assertRegex(stablehlo, 'sine.* loc')\n    stablehlo = lowered.as_text('stablehlo')\n    self.assertNotRegex(stablehlo, 'sine.* loc')\n    hlo = lowered.as_text('hlo', debug_info=True)\n    self.assertRegex(hlo, 'sine.*metadata=.*source_file=.*')\n    hlo = lowered.as_text('hlo')\n    self.assertNotRegex(hlo, 'sine.*metadata=.*source_file=.*')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/aot_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  }
]