[
  {
    "test_code": "def test_fori_loop_with_dynamic_indices_cannot_unroll(self):\n    \"\"\"Test that we can't unroll dynamic fori_loops.\"\"\"\n    body = lambda i, c: c + 1\n    init = jnp.float32(10)\n\n    @jax.jit\n    def f(upper):\n        return lax.fori_loop(np.int16(0), upper, body, init, unroll=3)\n    with self.assertRaisesRegex(ValueError, 'Can only use `unroll`'):\n        f(10)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testCondPredIsNone(self):\n\n    def f(pred, x):\n        return lax.cond(pred, lambda x: x + 1, lambda x: x + 2, x)\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: f(None, 1.0))\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: jax.jit(f)(None, 1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testOneBranchSwitch(self):\n    branch = lambda x: -x\n    f = lambda i, x: lax.switch(i, [branch], x)\n    x = 7.0\n    self.assertEqual(f(-1, x), branch(x))\n    self.assertEqual(f(0, x), branch(x))\n    self.assertEqual(f(1, x), branch(x))\n    cf = jax.jit(f)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))\n    cf = jax.jit(f, static_argnums=0)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testCondJit(self):\n\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testSwitchJit(self):\n    branches = [lambda x: 3.0 * x, lambda x: jnp.sin(x), lambda x: -x]\n\n    def f(x):\n        idx = lax.convert_element_type(x // 1, np.int32)\n        return lax.switch(idx, branches, x)\n    for x in [-1.0, 0.0, 1.0, 2.0, 3.0]:\n        y = jax.jit(f)(x)\n        expected = f(x)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitDisabled(self, cond):\n\n    def f_ref(x):\n        return 3.0 * x if x < 2 else jnp.sin(x)\n\n    def f(x):\n        return cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    with jax.disable_jit():\n        y = f(1.0)\n        expected = f_ref(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)\n    with jax.disable_jit():\n        y = jax.jit(f)(1.0)\n        expected = f(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n\n    def f_ref(x):\n        if x < 2:\n            return np.array([1.0, 2.0]) * x\n        else:\n            return np.array([3.0, 4.0]) * np.sin(x)\n    y = f(1.0)\n    expected = f_ref(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = f(4.0)\n    expected = f_ref(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef testIssue1263(self):\n\n    def f(rng, x):\n        cond = random.bernoulli(rng)\n        return lax.cond(cond, x, lambda x: x, jnp.abs(x) - 1.0, lambda x: x)\n\n    def body_fn(i, state):\n        rng, x = state\n        key, subkey = random.split(rng)\n        return (key, f(subkey, x))\n\n    def g(rng, x):\n        return lax.fori_loop(0, 10, body_fn, (rng, x))\n    jax.vmap(g)(random.split(random.PRNGKey(0), 3), jnp.ones((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def testWhileJVPViaForiLoop(self):\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * 2, x)\n    self.assertAllClose(f(2.0), 16.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (16.0, 8.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * (i + 1), x)\n    self.assertAllClose(f(2.0), 12.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (12.0, 6.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_xla_cpu_gpu_loop_cond_bug(self):\n\n    def deriv(f):\n        return lambda x, *args: jax.linearize(lambda x: f(x, *args), x)[1](1.0)\n\n    def _while_loop(cond_fun, body_fun, init_val, max_iter):\n\n        def _iter(val):\n            next_val = body_fun(val)\n            next_cond = True\n            return (next_val, next_cond)\n\n        def _fun(tup, _):\n            val, cond = tup\n            return (jax.lax.cond(cond, _iter, lambda x: (x, False), val), _)\n        init = (init_val, cond_fun(init_val))\n        return jax.lax.scan(_fun, init, None, length=max_iter)[0][0]\n\n    def my_pow(x, y):\n\n        def body_fun(val):\n            return val * x\n\n        def cond_fun(val):\n            return True\n        return _while_loop(cond_fun, body_fun, 1.0, y)\n    self.assertAllClose(deriv(my_pow)(3.0, 1), 1.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_platform_dependent(self):\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, default=jnp.cos)\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_platform_dependent_no_args(self):\n\n    def f(x):\n        return lax.platform_dependent(cpu=lambda: jnp.sin(x), default=lambda: jnp.cos(x))\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_platform_dependent_with_non_existent_custom_call(self):\n    if not jtu.test_device_matches(['cpu']):\n        self.skipTest('Only for CPU')\n\n    def f(x):\n        x1 = lax.platform_dependent(x, cpu=jnp.sin, other=prim_non_existent_custom_call.bind)\n        x2 = lax.platform_dependent(x, cpu=jnp.sin, default=prim_non_existent_custom_call.bind)\n        x3 = lax.platform_dependent(x, other=prim_non_existent_custom_call.bind, default=jnp.sin)\n        return x1 + x2 + x3\n    x = np.arange(3, dtype=np.float32)\n    hlo = str(jax.jit(f).lower(x).compiler_ir())\n    occurrences = re.findall(prim_non_existent_custom_call.name, hlo)\n    self.assertLen(occurrences, 3)\n    res_eager = f(x)\n    self.assertAllClose(res_eager, 3.0 * np.sin(x))\n    res_jit = jax.jit(f)(x)\n    self.assertAllClose(res_jit, 3 * np.sin(x))\n    res_vmap = jax.vmap(f)(x)\n    self.assertAllClose(res_vmap, 3.0 * np.sin(x))\n    _, res_jvp = jax.jvp(f, (x,), (np.full(x.shape, 0.1, dtype=x.dtype),))\n    self.assertAllClose(res_jvp, 0.3 * np.cos(x))\n    res_grad = jax.grad(f)(1.0)\n    self.assertAllClose(res_grad, 3.0 * np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_platform_dependent_multiple_identical_branches(self):\n    x = np.arange(3, dtype=np.float32)\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, tpu=jnp.sin, default=lambda x: x)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() in ['cpu', 'tpu'] else x)\n    stablehlo = jax.jit(f).lower(x).as_text()\n    sines = re.findall('stablehlo.sine', stablehlo)\n    self.assertEqual(1, len(sines))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_scan_length_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), n))\n    with self.assertRaisesRegex(core.ConcretizationTypeError, 'The `length` argument to `scan` expects a concrete `int` value.*'):\n        f(3, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_scan_unroll_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), 10, unroll=n))\n    msg = 'The `unroll` argument to `scan` expects a concrete `int` or `bool` value.*'\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(3, 1.0)\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(True, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_fori_loop_with_dynamic_indices_cannot_unroll(self):\n    \"\"\"Test that we can't unroll dynamic fori_loops.\"\"\"\n    body = lambda i, c: c + 1\n    init = jnp.float32(10)\n\n    @jax.jit\n    def f(upper):\n        return lax.fori_loop(np.int16(0), upper, body, init, unroll=3)\n    with self.assertRaisesRegex(ValueError, 'Can only use `unroll`'):\n        f(10)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testCondPredIsNone(self):\n\n    def f(pred, x):\n        return lax.cond(pred, lambda x: x + 1, lambda x: x + 2, x)\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: f(None, 1.0))\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: jax.jit(f)(None, 1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testOneBranchSwitch(self):\n    branch = lambda x: -x\n    f = lambda i, x: lax.switch(i, [branch], x)\n    x = 7.0\n    self.assertEqual(f(-1, x), branch(x))\n    self.assertEqual(f(0, x), branch(x))\n    self.assertEqual(f(1, x), branch(x))\n    cf = jax.jit(f)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))\n    cf = jax.jit(f, static_argnums=0)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testCondJit(self):\n\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testSwitchJit(self):\n    branches = [lambda x: 3.0 * x, lambda x: jnp.sin(x), lambda x: -x]\n\n    def f(x):\n        idx = lax.convert_element_type(x // 1, np.int32)\n        return lax.switch(idx, branches, x)\n    for x in [-1.0, 0.0, 1.0, 2.0, 3.0]:\n        y = jax.jit(f)(x)\n        expected = f(x)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitDisabled(self, cond):\n\n    def f_ref(x):\n        return 3.0 * x if x < 2 else jnp.sin(x)\n\n    def f(x):\n        return cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    with jax.disable_jit():\n        y = f(1.0)\n        expected = f_ref(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)\n    with jax.disable_jit():\n        y = jax.jit(f)(1.0)\n        expected = f(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n\n    def f_ref(x):\n        if x < 2:\n            return np.array([1.0, 2.0]) * x\n        else:\n            return np.array([3.0, 4.0]) * np.sin(x)\n    y = f(1.0)\n    expected = f_ref(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = f(4.0)\n    expected = f_ref(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef testIssue1263(self):\n\n    def f(rng, x):\n        cond = random.bernoulli(rng)\n        return lax.cond(cond, x, lambda x: x, jnp.abs(x) - 1.0, lambda x: x)\n\n    def body_fn(i, state):\n        rng, x = state\n        key, subkey = random.split(rng)\n        return (key, f(subkey, x))\n\n    def g(rng, x):\n        return lax.fori_loop(0, 10, body_fn, (rng, x))\n    jax.vmap(g)(random.split(random.PRNGKey(0), 3), jnp.ones((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def testWhileJVPViaForiLoop(self):\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * 2, x)\n    self.assertAllClose(f(2.0), 16.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (16.0, 8.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * (i + 1), x)\n    self.assertAllClose(f(2.0), 12.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (12.0, 6.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_xla_cpu_gpu_loop_cond_bug(self):\n\n    def deriv(f):\n        return lambda x, *args: jax.linearize(lambda x: f(x, *args), x)[1](1.0)\n\n    def _while_loop(cond_fun, body_fun, init_val, max_iter):\n\n        def _iter(val):\n            next_val = body_fun(val)\n            next_cond = True\n            return (next_val, next_cond)\n\n        def _fun(tup, _):\n            val, cond = tup\n            return (jax.lax.cond(cond, _iter, lambda x: (x, False), val), _)\n        init = (init_val, cond_fun(init_val))\n        return jax.lax.scan(_fun, init, None, length=max_iter)[0][0]\n\n    def my_pow(x, y):\n\n        def body_fun(val):\n            return val * x\n\n        def cond_fun(val):\n            return True\n        return _while_loop(cond_fun, body_fun, 1.0, y)\n    self.assertAllClose(deriv(my_pow)(3.0, 1), 1.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_platform_dependent(self):\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, default=jnp.cos)\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_platform_dependent_no_args(self):\n\n    def f(x):\n        return lax.platform_dependent(cpu=lambda: jnp.sin(x), default=lambda: jnp.cos(x))\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_platform_dependent_with_non_existent_custom_call(self):\n    if not jtu.test_device_matches(['cpu']):\n        self.skipTest('Only for CPU')\n\n    def f(x):\n        x1 = lax.platform_dependent(x, cpu=jnp.sin, other=prim_non_existent_custom_call.bind)\n        x2 = lax.platform_dependent(x, cpu=jnp.sin, default=prim_non_existent_custom_call.bind)\n        x3 = lax.platform_dependent(x, other=prim_non_existent_custom_call.bind, default=jnp.sin)\n        return x1 + x2 + x3\n    x = np.arange(3, dtype=np.float32)\n    hlo = str(jax.jit(f).lower(x).compiler_ir())\n    occurrences = re.findall(prim_non_existent_custom_call.name, hlo)\n    self.assertLen(occurrences, 3)\n    res_eager = f(x)\n    self.assertAllClose(res_eager, 3.0 * np.sin(x))\n    res_jit = jax.jit(f)(x)\n    self.assertAllClose(res_jit, 3 * np.sin(x))\n    res_vmap = jax.vmap(f)(x)\n    self.assertAllClose(res_vmap, 3.0 * np.sin(x))\n    _, res_jvp = jax.jvp(f, (x,), (np.full(x.shape, 0.1, dtype=x.dtype),))\n    self.assertAllClose(res_jvp, 0.3 * np.cos(x))\n    res_grad = jax.grad(f)(1.0)\n    self.assertAllClose(res_grad, 3.0 * np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_platform_dependent_multiple_identical_branches(self):\n    x = np.arange(3, dtype=np.float32)\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, tpu=jnp.sin, default=lambda x: x)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() in ['cpu', 'tpu'] else x)\n    stablehlo = jax.jit(f).lower(x).as_text()\n    sines = re.findall('stablehlo.sine', stablehlo)\n    self.assertEqual(1, len(sines))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_scan_length_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), n))\n    with self.assertRaisesRegex(core.ConcretizationTypeError, 'The `length` argument to `scan` expects a concrete `int` value.*'):\n        f(3, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_scan_unroll_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), 10, unroll=n))\n    msg = 'The `unroll` argument to `scan` expects a concrete `int` or `bool` value.*'\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(3, 1.0)\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(True, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@jtu.skip_on_flag('jax_skip_slow_tests', True)\ndef testScanRnn(self):\n    r = self.rng()\n    n_in = 4\n    n_hid = 2\n    n_out = 1\n    length = 3\n    W_trans = r.randn(n_hid, n_hid + n_in).astype(jnp.float_)\n    W_out = r.randn(n_out, n_hid + n_in).astype(jnp.float_)\n    params = (W_trans, W_out)\n    inputs = r.randn(length, n_in).astype(jnp.float_)\n    targets = r.randn(length, n_out).astype(jnp.float_)\n\n    def step(params, state, input):\n        W_trans, W_out = params\n        stacked = jnp.concatenate([state, input])\n        output = jnp.tanh(jnp.dot(W_out, stacked))\n        next_state = jnp.tanh(jnp.dot(W_trans, stacked))\n        return (next_state, output)\n\n    def rnn(params, inputs):\n        init_state = jnp.zeros(n_hid)\n        _, outputs = lax.scan(partial(step, params), init_state, inputs)\n        return outputs\n\n    @jax.jit\n    def loss(params, inputs, targets):\n        predictions = rnn(params, inputs)\n        return jnp.sum((predictions - targets) ** 2)\n    loss(params, inputs, targets)\n    jax.jvp(lambda params: loss(params, inputs, targets), (params,), (params,))\n    jtu.check_grads(loss, (params, inputs, targets), order=2, modes=['fwd'], rtol={np.float32: 0.02, np.float64: 1e-06})\n    _, expected = jax.jvp(loss, (params, inputs, targets), (params, inputs, targets))\n    _, linfun = jax.linearize(loss, params, inputs, targets)\n    ans = linfun(params, inputs, targets)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jax.grad(loss)(params, inputs, targets)\n    jtu.check_grads(loss, (params, inputs, targets), order=2, rtol=0.02)\n    batch_size = 7\n    batched_inputs = r.randn(batch_size, length, n_in).astype(jnp.float_)\n    batched_targets = r.randn(batch_size, length, n_out).astype(jnp.float_)\n    batched_loss = jax.vmap(lambda x, y: loss(params, x, y))\n    losses = batched_loss(batched_inputs, batched_targets)\n    expected = np.stack(list(map(lambda x, y: loss(params, x, y), batched_inputs, batched_targets)))\n    self.assertAllClose(losses, expected, check_dtypes=False, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def loss(params, batch):\n    inputs, targets = batch\n    predictions = predict(params, inputs)\n    return jnp.sum((predictions - targets) ** 2)"
  },
  {
    "test_code": "def testNestedWhileWithDynamicUpdateSlice(self):\n    num = 5\n\n    def update_entry(arr, val, i, j):\n        val = lax.reshape(val, [1, 1])\n        return lax.dynamic_update_slice(arr, val, (i, j))\n\n    def outer_loop(arr):\n\n        def cond_fun(state):\n            i, num, _, _ = state\n            return lax.lt(i, num)\n\n        def body_fun(state):\n            i, num, arr, out = state\n            return (lax.add(i, 1), num, arr, inner_loop(i, arr, out))\n        out = np.zeros(arr.shape, dtype=arr.dtype)\n        init_val = (0, num, arr, out)\n        _, _, _, out = lax.while_loop(cond_fun, body_fun, init_val)\n        return out\n\n    def inner_loop(i, arr, out):\n\n        def cond_fun(state):\n            i, j, _, _ = state\n            return lax.le(j, i)\n\n        def body_fun(state):\n            i, j, arr, out = state\n            arr_i = lax.dynamic_index_in_dim(arr, i, 0, False)\n            arr_i_j = lax.dynamic_index_in_dim(arr_i, j, 0, False)\n            out = update_entry(out, arr_i_j, i, j)\n            return (i, lax.add(j, 1), arr, out)\n        init_val = (i, 0, arr, out)\n        _, _, _, out = lax.while_loop(cond_fun, body_fun, init_val)\n        return out\n    cloop = jax.jit(outer_loop)\n    arr = self.rng().randn(5, 5)\n    self.assertAllClose(outer_loop(arr), np.tril(arr), check_dtypes=False)\n    self.assertAllClose(cloop(arr), np.tril(arr), check_dtypes=False)\n    self.assertAllClose(cloop(arr), np.tril(arr), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testCondGradVmapNan(self):\n    eps = 0.001\n\n    def safe1(x):\n        return lax.cond(x < eps, lambda _: eps, lambda _: jnp.sqrt(x), ())\n    out = jax.grad(lambda x: jax.vmap(safe1)(x).sum())(np.zeros(10))\n    self.assertFalse(np.isnan(out).any())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\n@jtu.skip_on_flag('jax_skip_slow_tests', True)\ndef testScanRnn(self):\n    r = self.rng()\n    n_in = 4\n    n_hid = 2\n    n_out = 1\n    length = 3\n    W_trans = r.randn(n_hid, n_hid + n_in).astype(jnp.float_)\n    W_out = r.randn(n_out, n_hid + n_in).astype(jnp.float_)\n    params = (W_trans, W_out)\n    inputs = r.randn(length, n_in).astype(jnp.float_)\n    targets = r.randn(length, n_out).astype(jnp.float_)\n\n    def step(params, state, input):\n        W_trans, W_out = params\n        stacked = jnp.concatenate([state, input])\n        output = jnp.tanh(jnp.dot(W_out, stacked))\n        next_state = jnp.tanh(jnp.dot(W_trans, stacked))\n        return (next_state, output)\n\n    def rnn(params, inputs):\n        init_state = jnp.zeros(n_hid)\n        _, outputs = lax.scan(partial(step, params), init_state, inputs)\n        return outputs\n\n    @jax.jit\n    def loss(params, inputs, targets):\n        predictions = rnn(params, inputs)\n        return jnp.sum((predictions - targets) ** 2)\n    loss(params, inputs, targets)\n    jax.jvp(lambda params: loss(params, inputs, targets), (params,), (params,))\n    jtu.check_grads(loss, (params, inputs, targets), order=2, modes=['fwd'], rtol={np.float32: 0.02, np.float64: 1e-06})\n    _, expected = jax.jvp(loss, (params, inputs, targets), (params, inputs, targets))\n    _, linfun = jax.linearize(loss, params, inputs, targets)\n    ans = linfun(params, inputs, targets)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jax.grad(loss)(params, inputs, targets)\n    jtu.check_grads(loss, (params, inputs, targets), order=2, rtol=0.02)\n    batch_size = 7\n    batched_inputs = r.randn(batch_size, length, n_in).astype(jnp.float_)\n    batched_targets = r.randn(batch_size, length, n_out).astype(jnp.float_)\n    batched_loss = jax.vmap(lambda x, y: loss(params, x, y))\n    losses = batched_loss(batched_inputs, batched_targets)\n    expected = np.stack(list(map(lambda x, y: loss(params, x, y), batched_inputs, batched_targets)))\n    self.assertAllClose(losses, expected, check_dtypes=False, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_impl={scan_name}', 'scan': scan_impl} for scan_impl, scan_name in SCAN_IMPLS_WITH_FOR))\ndef testIssue711(self, scan):\n\n    def harmonic_bond(conf, params):\n        return jnp.sum(conf * params)\n\n    def minimize_structure(test_params):\n        energy_fn = partial(harmonic_bond, params=test_params)\n\n        def apply_carry(carry, _):\n            i, x = carry\n            new_x = x - 0.1 * jax.grad(energy_fn)(x)\n            new_carry = (i + 1, new_x)\n            return (new_carry, _)\n        x0 = jnp.array([1.0, 2.0, 3.0])\n        carry_final, _ = scan(apply_carry, (0, x0), jnp.zeros((75, 0)))\n        _, x_final = carry_final\n        return x_final\n    initial_params = 0.5\n    minimize_structure(initial_params)\n\n    def loss(test_params):\n        x_final = minimize_structure(test_params)\n        return jnp.sum(jnp.sin(1.0 - x_final))\n    jax.grad(loss)(0.25)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_impl={scan_name}', 'scan': scan_impl} for scan_impl, scan_name in SCAN_IMPLS_WITH_FOR))\ndef testScanVmapFixpoint(self, scan):\n\n    def f(carry_init):\n\n        def scan_body(c, x):\n            return ((c[1], c[2], c[3], 0.0), None)\n        return scan(scan_body, (0.0, 1.0, 2.0, carry_init), jnp.zeros(2))\n    carry_init = jnp.array([3.0, 4.0, 5.0])\n    carry_out, _ = jax.vmap(f)(carry_init)\n    self.assertAllClose(carry_out[3], jnp.array([0.0, 0.0, 0.0]), check_dtypes=False)\n    self.assertAllClose(carry_out[2], jnp.array([0.0, 0.0, 0.0]), check_dtypes=False)\n    self.assertAllClose(carry_out[1], carry_init, check_dtypes=False)\n    self.assertAllClose(carry_out[0], jnp.array([2.0, 2.0, 2.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testIssue810(self):\n\n    def loss(A):\n\n        def step(x, i):\n            return (jnp.matmul(A, x), None)\n        init_x = jnp.zeros(A.shape[-1:])\n        last_x, _ = lax.scan(step, init_x, jnp.arange(10))\n        return jnp.sum(last_x)\n    A = jnp.zeros((3, 3))\n    s = jax.jit(jax.grad(loss)).lower(A).as_text('hlo')\n    assert s.count('dynamic-update-slice(') < 2",
    "assertions": [
      "assert s.count('dynamic-update-slice(') < 2"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\ndef test_cond_memory_leak(self):\n\n    def leak():\n        data = jax.device_put(np.zeros(1024, dtype=np.float32) + 1)\n\n        def g():\n            return jax.lax.cond(True, lambda: data[0], lambda: data[1])\n        jg = jax.jit(g)\n        _ = jg().block_until_ready()\n        del g, jg, data, _\n    nbufs = lambda: len(jax.live_arrays())\n    base = nbufs()\n    leak()\n    self.assertEqual(base, nbufs())\n    leak()\n    self.assertEqual(base, nbufs())\n    leak()\n    self.assertEqual(base, nbufs())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def testWhileLoopAxisIndexBatched(self):\n\n    def fun(x):\n        return lax.while_loop(lambda x: x < lax.axis_index('i'), lambda x: x + 2, x)\n    ans = jax.vmap(fun, axis_name='i')(np.array([0, 0, 0, 0], dtype='int32'))\n    expected = np.array([0, 2, 2, 4])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    fun = jax.jit(fun)\n    ans = jax.vmap(fun, axis_name='i')(np.array([0, 0, 0, 0], dtype='int32'))\n    expected = np.array([0, 2, 2, 4])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    ans = jax.vmap(lambda _, x: fun(x), axis_name='i', in_axes=(0, None))(np.array([0, 0, 0, 0]), 0)\n    expected = np.array([0, 2, 2, 4], dtype='int32')\n    self.assertAllClose(ans, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testCond(self):\n\n    def fun(x):\n        if x < 3:\n            return (x, x)\n        else:\n            y = lax.mul(2, x)\n            return (y, lax.mul(2, y))\n\n    @jax.jit\n    def cfun(x):\n\n        def false_fun(x):\n            y = lax.mul(2, x)\n            return (y, lax.mul(2, y))\n        return lax.cond(lax.lt(x, 3), lambda x: (x, x), false_fun, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(0), (0, 0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(1), (1, 1))\n    self.assertEqual(fun(2), cfun(2))\n    self.assertEqual(fun(2), (2, 2))\n    self.assertEqual(fun(3), cfun(3))\n    self.assertEqual(fun(3), (6, 12))\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(fun(4), (8, 16))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testCondTwoOperands(self):\n    add, mul = (lax.add, lax.mul)\n\n    def fun(x):\n        return add(x, x) if x == 0 else mul(x, x)\n\n    def cfun(x):\n        return lax.cond(x == 0, add, mul, x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testCondThreeOperands(self):\n    add = lambda x, y, z: x + y + z\n    mul = lambda x, y, z: x * y * z\n\n    def fun(x):\n        return add(x, x, x) if x == 0 else mul(x, x, x)\n\n    def cfun(x):\n        return lax.cond(x == 0, add, mul, x, x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testSwitch(self):\n\n    def branch(x):\n        y = lax.mul(2, x)\n        return (y, lax.mul(2, y))\n    branches = [lambda x: (x, x), branch, lambda x: (x, -x)]\n\n    def fun(x):\n        if x <= 0:\n            return branches[0](x)\n        elif x == 1:\n            return branches[1](x)\n        else:\n            return branches[2](x)\n\n    def cfun(x):\n        return lax.switch(x, branches, x)\n    self.assertEqual(fun(-1), cfun(-1))\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(2), cfun(2))\n    self.assertEqual(fun(3), cfun(3))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(-1), cfun(-1))\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(2), cfun(2))\n    self.assertEqual(fun(3), cfun(3))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testSwitchMultiOperands(self):\n    branches = [lax.add, lax.mul]\n\n    def fun(x):\n        i = 0 if x <= 0 else 1\n        return branches[i](x, x)\n\n    def cfun(x):\n        return lax.switch(x, branches, x, x)\n    self.assertEqual(fun(-1), cfun(-1))\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(2), cfun(2))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(-1), cfun(-1))\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(2), cfun(2))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testIssue1379(self):\n\n    def fun(pred):\n        return lax.cond(pred, lambda x: (True, x), lambda x: (False, x), pred)\n\n    @jax.jit\n    def cfun(pred):\n        return fun(pred)\n    self.assertEqual(fun(0), cfun(0), (False, 0))\n    self.assertEqual(fun(0.0), cfun(0.0), (False, 0.0))\n    self.assertEqual(fun(1), cfun(1), (True, 1))\n    self.assertEqual(fun(1.0), cfun(1.0), (True, 1.0))\n    for pred in ['abc', [], [1, 2]]:\n        for f in [fun, cfun]:\n            self.assertRaises(TypeError, f, pred)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testNestedCond(self, cond):\n\n    def fun(x):\n        if x < 2:\n            return lax.mul(2, x)\n        elif x < 5:\n            return lax.mul(3, x)\n        else:\n            return lax.mul(4, x)\n\n    @jax.jit\n    def cfun(x):\n        return cond(lax.lt(x, 2), lambda x: lax.mul(2, x), lambda x: cond(lax.lt(x, 5), x, lambda x: lax.mul(3, x), 4, lambda y: lax.mul(y, x)), x)\n    self.assertEqual(cfun(1), 2)\n    self.assertEqual(cfun(3), 9)\n    self.assertEqual(cfun(6), 24)\n    self.assertEqual(cfun(1), fun(1))\n    self.assertEqual(cfun(3), fun(3))\n    self.assertEqual(cfun(6), fun(6))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testCondOneBranchConstant(self):\n\n    def fun(x):\n        if x < 3:\n            return 5.0\n        else:\n            return x\n\n    @jax.jit\n    def cfun(x):\n        return lax.cond(lax.lt(x, 3), lambda x: 5, lambda x: x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(cfun(0), 5)\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(cfun(4), 4)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def testCondOneBranchConstantTuple(self):\n\n    def fun(x):\n        if x < 3:\n            return (1.0, 2.0, 3.0)\n        else:\n            return (x, 2.0, 4.0)\n\n    @jax.jit\n    def cfun(x):\n        return lax.cond(lax.lt(x, 3), lambda x: (1, 2.0, 3.0), lambda x: (x, 2.0, 4.0), x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(cfun(0), (1, 2.0, 3.0))\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(cfun(4), (4, 2.0, 4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def test_disable_jit_cond_with_vmap(self):\n\n    def fn(t):\n        return lax.cond(t > 0, 0, lambda x: 0, 0, lambda x: 1)\n    fn = jax.vmap(fn)\n    with jax.disable_jit():\n        _ = fn(jnp.array([1]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef fn(n, x):\n    return lax.broadcast_in_dim(x, (n,), ())"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{scan_name}', 'scan': scan_impl} for scan_impl, scan_name in SCAN_IMPLS_WITH_FOR))\ndef test_scan_reverse(self, scan):\n\n    def cumsum(x, reverse):\n        return scan(lambda c, x: (c + x, c + x), 0, x, reverse=reverse)[1]\n    x = np.array([3, 1, 4, 1, 5, 9])\n    self.assertAllClose(np.cumsum(x), cumsum(x, False), check_dtypes=False)\n    self.assertAllClose(np.cumsum(x[::-1])[::-1], cumsum(x, True), check_dtypes=False)\n    with jax.disable_jit():\n        self.assertAllClose(np.cumsum(x), cumsum(x, False), check_dtypes=False)\n    with jax.disable_jit():\n        self.assertAllClose(np.cumsum(x[::-1])[::-1], cumsum(x, True), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cumsum(x):\n\n    def body(i, _):\n        return (i + 1, jnp.sum(x[:i + 1]))\n    _, ans = lax.scan(body, 0, None, length=len(x))\n    return ans"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{shape}_axis={axis!r}', 'shape': shape, 'axis': axis} for shape in [[0], [1], [2], [3], [5], [10], [1000], [2, 3], [7, 5], [5, 6, 7]] for axis in range(-len(shape), len(shape) - 1)))\ndef testAssociativeScanUnstructured(self, shape, axis):\n    data = np.arange(np.prod(shape)).reshape(shape) + 7\n    expected = np.cumsum(data, axis=axis)\n    result = lax.associative_scan(operator.add, data, axis=axis)\n    self.assertAllClose(result, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cumsum(x):\n\n    def body(i, _):\n        return (i + 1, jnp.sum(x[:i + 1]))\n    _, ans = lax.scan(body, 0, None, length=len(x))\n    return ans"
  },
  {
    "test_code": "def testAssociativeScanUnstructured1000Reverse(self):\n    data = np.arange(1000) + 32\n    expected = np.cumsum(data[::-1])[::-1]\n    result = lax.associative_scan(operator.add, data, reverse=True)\n    self.assertAllClose(result, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cumsum(x):\n\n    def body(i, _):\n        return (i + 1, jnp.sum(x[:i + 1]))\n    _, ans = lax.scan(body, 0, None, length=len(x))\n    return ans"
  },
  {
    "test_code": "def test_fori_loop_with_dynamic_indices_cannot_unroll(self):\n    \"\"\"Test that we can't unroll dynamic fori_loops.\"\"\"\n    body = lambda i, c: c + 1\n    init = jnp.float32(10)\n\n    @jax.jit\n    def f(upper):\n        return lax.fori_loop(np.int16(0), upper, body, init, unroll=3)\n    with self.assertRaisesRegex(ValueError, 'Can only use `unroll`'):\n        f(10)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testCondPredIsNone(self):\n\n    def f(pred, x):\n        return lax.cond(pred, lambda x: x + 1, lambda x: x + 2, x)\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: f(None, 1.0))\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: jax.jit(f)(None, 1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testOneBranchSwitch(self):\n    branch = lambda x: -x\n    f = lambda i, x: lax.switch(i, [branch], x)\n    x = 7.0\n    self.assertEqual(f(-1, x), branch(x))\n    self.assertEqual(f(0, x), branch(x))\n    self.assertEqual(f(1, x), branch(x))\n    cf = jax.jit(f)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))\n    cf = jax.jit(f, static_argnums=0)\n    self.assertEqual(cf(-1, x), branch(x))\n    self.assertEqual(cf(0, x), branch(x))\n    self.assertEqual(cf(1, x), branch(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testCondJit(self):\n\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testSwitchJit(self):\n    branches = [lambda x: 3.0 * x, lambda x: jnp.sin(x), lambda x: -x]\n\n    def f(x):\n        idx = lax.convert_element_type(x // 1, np.int32)\n        return lax.switch(idx, branches, x)\n    for x in [-1.0, 0.0, 1.0, 2.0, 3.0]:\n        y = jax.jit(f)(x)\n        expected = f(x)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitDisabled(self, cond):\n\n    def f_ref(x):\n        return 3.0 * x if x < 2 else jnp.sin(x)\n\n    def f(x):\n        return cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    with jax.disable_jit():\n        y = f(1.0)\n        expected = f_ref(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)\n    with jax.disable_jit():\n        y = jax.jit(f)(1.0)\n        expected = f(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n\n    def f_ref(x):\n        if x < 2:\n            return np.array([1.0, 2.0]) * x\n        else:\n            return np.array([3.0, 4.0]) * np.sin(x)\n    y = f(1.0)\n    expected = f_ref(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = f(4.0)\n    expected = f_ref(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef testIssue1263(self):\n\n    def f(rng, x):\n        cond = random.bernoulli(rng)\n        return lax.cond(cond, x, lambda x: x, jnp.abs(x) - 1.0, lambda x: x)\n\n    def body_fn(i, state):\n        rng, x = state\n        key, subkey = random.split(rng)\n        return (key, f(subkey, x))\n\n    def g(rng, x):\n        return lax.fori_loop(0, 10, body_fn, (rng, x))\n    jax.vmap(g)(random.split(random.PRNGKey(0), 3), jnp.ones((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testWhileJVPViaForiLoop(self):\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * 2, x)\n    self.assertAllClose(f(2.0), 16.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (16.0, 8.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])\n    f = lambda x: lax.fori_loop(0, 3, lambda i, x: x * (i + 1), x)\n    self.assertAllClose(f(2.0), 12.0, check_dtypes=False)\n    self.assertAllClose(jax.jvp(f, (2.0,), (1.0,)), (12.0, 6.0), check_dtypes=False)\n    jtu.check_grads(f, (2.0,), order=2, modes=['fwd'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_xla_cpu_gpu_loop_cond_bug(self):\n\n    def deriv(f):\n        return lambda x, *args: jax.linearize(lambda x: f(x, *args), x)[1](1.0)\n\n    def _while_loop(cond_fun, body_fun, init_val, max_iter):\n\n        def _iter(val):\n            next_val = body_fun(val)\n            next_cond = True\n            return (next_val, next_cond)\n\n        def _fun(tup, _):\n            val, cond = tup\n            return (jax.lax.cond(cond, _iter, lambda x: (x, False), val), _)\n        init = (init_val, cond_fun(init_val))\n        return jax.lax.scan(_fun, init, None, length=max_iter)[0][0]\n\n    def my_pow(x, y):\n\n        def body_fun(val):\n            return val * x\n\n        def cond_fun(val):\n            return True\n        return _while_loop(cond_fun, body_fun, 1.0, y)\n    self.assertAllClose(deriv(my_pow)(3.0, 1), 1.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_platform_dependent(self):\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, default=jnp.cos)\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_platform_dependent_no_args(self):\n\n    def f(x):\n        return lax.platform_dependent(cpu=lambda: jnp.sin(x), default=lambda: jnp.cos(x))\n    x = np.arange(3, dtype=np.float32)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() == 'cpu' else np.cos(x))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_platform_dependent_with_non_existent_custom_call(self):\n    if not jtu.test_device_matches(['cpu']):\n        self.skipTest('Only for CPU')\n\n    def f(x):\n        x1 = lax.platform_dependent(x, cpu=jnp.sin, other=prim_non_existent_custom_call.bind)\n        x2 = lax.platform_dependent(x, cpu=jnp.sin, default=prim_non_existent_custom_call.bind)\n        x3 = lax.platform_dependent(x, other=prim_non_existent_custom_call.bind, default=jnp.sin)\n        return x1 + x2 + x3\n    x = np.arange(3, dtype=np.float32)\n    hlo = str(jax.jit(f).lower(x).compiler_ir())\n    occurrences = re.findall(prim_non_existent_custom_call.name, hlo)\n    self.assertLen(occurrences, 3)\n    res_eager = f(x)\n    self.assertAllClose(res_eager, 3.0 * np.sin(x))\n    res_jit = jax.jit(f)(x)\n    self.assertAllClose(res_jit, 3 * np.sin(x))\n    res_vmap = jax.vmap(f)(x)\n    self.assertAllClose(res_vmap, 3.0 * np.sin(x))\n    _, res_jvp = jax.jvp(f, (x,), (np.full(x.shape, 0.1, dtype=x.dtype),))\n    self.assertAllClose(res_jvp, 0.3 * np.cos(x))\n    res_grad = jax.grad(f)(1.0)\n    self.assertAllClose(res_grad, 3.0 * np.cos(1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_platform_dependent_multiple_identical_branches(self):\n    x = np.arange(3, dtype=np.float32)\n\n    def f(x):\n        return lax.platform_dependent(x, cpu=jnp.sin, tpu=jnp.sin, default=lambda x: x)\n    res = f(x)\n    self.assertAllClose(res, np.sin(x) if jtu.device_under_test() in ['cpu', 'tpu'] else x)\n    stablehlo = jax.jit(f).lower(x).as_text()\n    sines = re.findall('stablehlo.sine', stablehlo)\n    self.assertEqual(1, len(sines))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_scan_length_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), n))\n    with self.assertRaisesRegex(core.ConcretizationTypeError, 'The `length` argument to `scan` expects a concrete `int` value.*'):\n        f(3, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_scan_unroll_concrete_error(self):\n    f = jax.jit(lambda n, x: jax.lax.scan(lambda c, z: (c, z), x, (), 10, unroll=n))\n    msg = 'The `unroll` argument to `scan` expects a concrete `int` or `bool` value.*'\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(3, 1.0)\n    with self.assertRaisesRegex(core.ConcretizationTypeError, msg):\n        f(True, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def testCallableErrors(self):\n    not_callable = 42\n    with self.assertRaisesRegex(TypeError, 'lax.fori_loop.*callable.*'):\n        lax.fori_loop(0, 1, not_callable, 0)\n    with self.assertRaisesRegex(TypeError, 'lax.while_loop.*callable.*'):\n        lax.while_loop(not_callable, not_callable, 0)\n    with self.assertRaisesRegex(TypeError, 'lax.switch:.*callable.*'):\n        lax.switch(0, [not_callable])\n    with self.assertRaisesRegex(TypeError, 'lax.cond.*callable.*'):\n        lax.cond(0, not_callable, not_callable)\n    with self.assertRaisesRegex(TypeError, 'lax.scan.*callable.*'):\n        lax.scan(not_callable, 0, 1)\n    with self.assertRaisesRegex(TypeError, 'lax.associative_scan.*callable.*'):\n        lax.associative_scan(not_callable, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCond(self):\n\n    def fun(x):\n        if x < 3:\n            return (x, x)\n        else:\n            y = lax.mul(2, x)\n            return (y, lax.mul(2, y))\n\n    @jax.jit\n    def cfun(x):\n\n        def false_fun(x):\n            y = lax.mul(2, x)\n            return (y, lax.mul(2, y))\n        return lax.cond(lax.lt(x, 3), lambda x: (x, x), false_fun, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(0), (0, 0))\n    self.assertEqual(fun(1), cfun(1))\n    self.assertEqual(fun(1), (1, 1))\n    self.assertEqual(fun(2), cfun(2))\n    self.assertEqual(fun(2), (2, 2))\n    self.assertEqual(fun(3), cfun(3))\n    self.assertEqual(fun(3), (6, 12))\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(fun(4), (8, 16))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondPredIsNone(self):\n\n    def f(pred, x):\n        return lax.cond(pred, lambda x: x + 1, lambda x: x + 2, x)\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: f(None, 1.0))\n    self.assertRaisesRegex(TypeError, 'cond predicate is None', lambda: jax.jit(f)(None, 1.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondTwoOperands(self):\n    add, mul = (lax.add, lax.mul)\n\n    def fun(x):\n        return add(x, x) if x == 0 else mul(x, x)\n\n    def cfun(x):\n        return lax.cond(x == 0, add, mul, x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondThreeOperands(self):\n    add = lambda x, y, z: x + y + z\n    mul = lambda x, y, z: x * y * z\n\n    def fun(x):\n        return add(x, x, x) if x == 0 else mul(x, x, x)\n\n    def cfun(x):\n        return lax.cond(x == 0, add, mul, x, x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))\n    cfun = jax.jit(cfun)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(fun(1), cfun(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondCallableOperands(self):\n\n    @tree_util.register_pytree_node_class\n    class Foo:\n\n        def __init__(self, x):\n            self.x = x\n\n        def __call__(self, *xs):\n            assert False\n            return xs\n\n        def tree_flatten(self):\n            return ((self.x,), None)\n\n        @classmethod\n        def tree_unflatten(cls, _, xs):\n            return cls(*xs)\n    f_00 = lambda a, b: a + b\n    f_01 = lambda a, b: a + b.x\n    f_10 = lambda a, b: a.x + b\n    f_11 = lambda a, b: a.x + b.x\n    a = lax.cond(True, f_00, f_00, 3, 4)\n    b = lax.cond(True, f_01, f_01, 3, Foo(4))\n    c = lax.cond(True, f_10, f_10, Foo(3), 4)\n    d = lax.cond(True, f_11, f_11, Foo(3), Foo(4))\n    self.assertEqual(a, b)\n    self.assertEqual(a, c)\n    self.assertEqual(a, d)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testIssue1379(self):\n\n    def fun(pred):\n        return lax.cond(pred, lambda x: (True, x), lambda x: (False, x), pred)\n\n    @jax.jit\n    def cfun(pred):\n        return fun(pred)\n    self.assertEqual(fun(0), cfun(0), (False, 0))\n    self.assertEqual(fun(0.0), cfun(0.0), (False, 0.0))\n    self.assertEqual(fun(1), cfun(1), (True, 1))\n    self.assertEqual(fun(1.0), cfun(1.0), (True, 1.0))\n    for pred in ['abc', [], [1, 2]]:\n        for f in [fun, cfun]:\n            self.assertRaises(TypeError, f, pred)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testNestedCond(self, cond):\n\n    def fun(x):\n        if x < 2:\n            return lax.mul(2, x)\n        elif x < 5:\n            return lax.mul(3, x)\n        else:\n            return lax.mul(4, x)\n\n    @jax.jit\n    def cfun(x):\n        return cond(lax.lt(x, 2), lambda x: lax.mul(2, x), lambda x: cond(lax.lt(x, 5), x, lambda x: lax.mul(3, x), 4, lambda y: lax.mul(y, x)), x)\n    self.assertEqual(cfun(1), 2)\n    self.assertEqual(cfun(3), 9)\n    self.assertEqual(cfun(6), 24)\n    self.assertEqual(cfun(1), fun(1))\n    self.assertEqual(cfun(3), fun(3))\n    self.assertEqual(cfun(6), fun(6))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondTypeErrors(self):\n    \"\"\"Test typing error messages for  cond.\"\"\"\n    with self.assertRaisesRegex(TypeError, re.escape('Pred type must be either boolean or number, got <function')):\n        lax.cond(lambda x: True, lambda top: 2.0, lambda fop: 3.0, 1.0)\n    with self.assertRaisesRegex(TypeError, re.escape(\"Pred must be a scalar, got foo of type <class 'str'>\")):\n        lax.cond('foo', lambda top: 2.0, lambda fop: 3.0, 1.0)\n    with self.assertRaisesRegex(TypeError, re.escape(\"Pred must be a scalar, got (1.0, 1.0) of type <class 'tuple'>\")):\n        lax.cond((1.0, 1.0), lambda top: 2.0, lambda fop: 3.0, 1.0)\n    with self.assertRaisesRegex(TypeError, re.compile(\"true_fun output must have same type structure as false_fun output, but there are differences:.*at output\\\\['a'\\\\], true_fun output has pytree leaf\", re.DOTALL)):\n        lax.cond(True, lambda top: dict(a=2.0), lambda fop: dict(a=(3.0, 3.0)), 1.0)\n    with self.assertRaisesRegex(TypeError, 'true_fun output and false_fun output must have identical types, got\\nDIFFERENT ShapedArray\\\\(float32\\\\[1\\\\]\\\\) vs. ShapedArray\\\\(float32\\\\[\\\\].*\\\\).'):\n        lax.cond(True, lambda top: jnp.array([1.0], jnp.float32), lambda fop: jnp.float32(1.0), 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondOneBranchConstant(self):\n\n    def fun(x):\n        if x < 3:\n            return 5.0\n        else:\n            return x\n\n    @jax.jit\n    def cfun(x):\n        return lax.cond(lax.lt(x, 3), lambda x: 5, lambda x: x, x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(cfun(0), 5)\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(cfun(4), 4)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondOneBranchConstantTuple(self):\n\n    def fun(x):\n        if x < 3:\n            return (1.0, 2.0, 3.0)\n        else:\n            return (x, 2.0, 4.0)\n\n    @jax.jit\n    def cfun(x):\n        return lax.cond(lax.lt(x, 3), lambda x: (1, 2.0, 3.0), lambda x: (x, 2.0, 4.0), x)\n    self.assertEqual(fun(0), cfun(0))\n    self.assertEqual(cfun(0), (1, 2.0, 3.0))\n    self.assertEqual(fun(4), cfun(4))\n    self.assertEqual(cfun(4), (4, 2.0, 4.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondBatched(self):\n\n    def fun(x, y, z):\n        pred = lax.lt(x, 3)\n        true_fun = lambda y: y\n        false_fun = lambda z: lax.neg(z)\n        return lax.cond(pred, y, true_fun, z, false_fun)\n    x = jnp.array(2)\n    y = jnp.array([1, 2])\n    z = jnp.array([3, 4])\n    ans = jax.vmap(fun, (None, 0, 0))(x, y, z)\n    jaxpr = jax.make_jaxpr(jax.vmap(fun, (None, 0, 0)))(x, y, z)\n    expected = np.array([1, 2])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    assert 'select' not in str(jaxpr)\n    x = jnp.array(4)\n    ans = jax.vmap(fun, (None, 0, 0))(x, y, z)\n    jaxpr = jax.make_jaxpr(jax.vmap(fun, (None, 0, 0)))(x, y, z)\n    expected = np.array([-3, -4])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    assert 'select' not in str(jaxpr)\n    fun = jax.jit(fun)\n    ans = jax.vmap(fun, (None, 0, 0))(x, y, z)\n    expected = np.array([-3, -4])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    z = jnp.array(5)\n    ans = jax.vmap(fun, (None, 0, None))(x, y, z)\n    jaxpr = jax.make_jaxpr(jax.vmap(fun, (None, 0, None)))(x, y, z)\n    expected = np.array([-5, -5])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    assert 'select' not in str(jaxpr)\n    x = jnp.array([2, 4])\n    ans = jax.vmap(fun, (0, 0, None))(x, y, z)\n    jaxpr = jax.make_jaxpr(jax.vmap(fun, (0, 0, None)))(x, y, z)\n    expected = np.array([1, -5])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    assert 'select' in str(jaxpr)\n    z = jnp.array([3, 4])\n    ans = jax.vmap(fun)(x, y, z)\n    jaxpr = jax.make_jaxpr(jax.vmap(fun))(x, y, z)\n    expected = np.array([1, -4])\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    assert 'select' in str(jaxpr)",
    "assertions": [
      "assert 'select' not in str(jaxpr)",
      "assert 'select' not in str(jaxpr)",
      "assert 'select' not in str(jaxpr)",
      "assert 'select' in str(jaxpr)",
      "assert 'select' in str(jaxpr)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondJVP(self):\n\n    def fun_ref(x):\n        if x < 3:\n            return (x, x)\n        else:\n            y = 2 * x\n            return (y, 2 * y)\n\n    def fun(x):\n\n        def false_fun(x):\n            y = 2 * x\n            return (y, 2 * y)\n        return lax.cond(x < 3, lambda x: (x, x), false_fun, x)\n    x = 3.14\n    ans = jax.jvp(fun, (x,), (x,))\n    expected = jax.jvp(fun_ref, (x,), (x,))\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd'])\n    x = 2.72\n    ans = jax.jvp(fun, (x,), (x,))\n    expected = jax.jvp(fun_ref, (x,), (x,))\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJVP2(self, cond):\n\n    def fun_ref(x):\n        if x < 3:\n            return 2.0\n        else:\n            return 2.0 * x\n\n    def fun(x):\n        return cond(x < 3, None, lambda _: 2.0, x, lambda x: 2.0 * x)\n    x = 3.14\n    ans = jax.jvp(fun, (x,), (x,))\n    expected = jax.jvp(fun_ref, (x,), (x,))\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd'])\n    x = 2.72\n    ans = jax.jvp(fun, (x,), (x,))\n    expected = jax.jvp(fun_ref, (x,), (x,))\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondGrad(self):\n\n    def f_ref(x):\n        return 3.0 * x if x < 2 else jnp.sin(x)\n\n    @jax.jit\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    x = 2.14\n    ans = jax.grad(f)(x)\n    expected = jax.grad(f_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(f, (x,), order=2, modes=['fwd', 'rev'])\n    x = 1.72\n    ans = jax.grad(f)(x)\n    expected = jax.grad(f_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(f, (x,), order=2, modes=['fwd', 'rev'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondGradVmapNan(self):\n    eps = 0.001\n\n    def safe1(x):\n        return lax.cond(x < eps, lambda _: eps, lambda _: jnp.sqrt(x), ())\n    out = jax.grad(lambda x: jax.vmap(safe1)(x).sum())(np.zeros(10))\n    self.assertFalse(np.isnan(out).any())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondGrad2(self, cond):\n\n    def f_ref(x):\n        z = jnp.array([1.0, 2.0], x.dtype) * x if x[0] < 2 else jnp.sin(x)\n        return z.sum()\n\n    def _f(x):\n        return cond(x[0] < 2, lambda x: jnp.array([1.0, 2.0], x.dtype) * x, lambda x: jnp.sin(x), x)\n    f = lambda x: jax.jit(_f)(x).sum()\n    x = 2.14 * jnp.ones(2)\n    ans = jax.grad(f)(x)\n    expected = jax.grad(f_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(f, (x,), order=2, modes=['fwd', 'rev'])\n    x = 1.72 * jnp.ones(2)\n    ans = jax.grad(f)(x)\n    expected = jax.grad(f_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(f, (x,), order=2, modes=['fwd', 'rev'], rtol={jnp.float32: 0.01, jnp.float64: 0.002})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondGrad3(self, cond):\n\n    def fun_ref(x):\n        if x < 3:\n            return 2.0\n        else:\n            return 2.0 * x\n\n    def fun(x):\n        return cond(x < 3, None, lambda _: 2.0, x, lambda x: 2.0 * x)\n    x = 3.14\n    ans = jax.grad(fun)(x)\n    expected = jax.grad(fun_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd', 'rev'])\n    x = 2.72\n    ans = jax.grad(fun)(x)\n    expected = jax.grad(fun_ref)(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x,), order=2, modes=['fwd', 'rev'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondGrad4(self, cond):\n    if cond is cond_with_new_checkpoint and jtu.test_device_matches(['tpu']):\n        raise unittest.SkipTest('tpu bug')\n\n    def fun_ref(x, y):\n        if x < 3:\n            return 2.0 * jnp.sin(y)\n        else:\n            return 2.0 * jnp.cos(x)\n\n    @jax.jit\n    def fun(x, y):\n        return cond(x < 3, None, lambda _: 2.0 * jnp.sin(y), x, lambda x: 2.0 * x)\n    y = 5.8\n    x = 3.14\n    ans = jax.grad(fun, 1)(x, y)\n    expected = jax.grad(fun_ref, 1)(x, y)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x, y), order=2, modes=['fwd', 'rev'])\n    x = 2.72\n    ans = jax.grad(fun, 1)(x, y)\n    expected = jax.grad(fun_ref, 1)(x, y)\n    self.assertAllClose(ans, expected, check_dtypes=False)\n    jtu.check_grads(fun, (x, y), order=2, modes=['fwd', 'rev'])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondLinearize(self):\n\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    y, f_lin = jax.linearize(f, 1.0)\n    self.assertAllClose(y, 3.0, check_dtypes=False)\n    self.assertAllClose(f_lin(2.0), 6.0, check_dtypes=False)\n    y, f_lin = jax.linearize(f, 4.0)\n    self.assertAllClose(y, jnp.sin(4.0), check_dtypes=False)\n    self.assertAllClose(f_lin(2.0), jnp.cos(4.0) * 2.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondLinearize2(self, cond):\n\n    def f_ref(x):\n        z = jnp.array([1.0, 2.0], x.dtype) * x if x[0] < 2 else jnp.cos(jnp.sin(x))\n        return z.sum()\n\n    def f(x):\n        return cond(x[0] < 2, lambda x: jnp.array([1.0, 2.0], x.dtype) * x, lambda x: jnp.cos(jnp.sin(x)), x).sum()\n    x = 2.14 * jnp.ones(2)\n    y, f_lin = jax.linearize(f, x)\n    y_ref, f_lin_ref = jax.linearize(f_ref, x)\n    self.assertAllClose(y, y_ref, check_dtypes=False)\n    self.assertAllClose(f_lin(x), f_lin_ref(x), check_dtypes=False)\n    x = -2.14 * jnp.ones(2)\n    y, f_lin = jax.linearize(f, x)\n    y_ref, f_lin_ref = jax.linearize(f_ref, x)\n    self.assertAllClose(y, y_ref, check_dtypes=False)\n    self.assertAllClose(f_lin(x), f_lin_ref(x), check_dtypes=False)\n    f = jax.jit(f)\n    x = 2.14 * jnp.ones(2)\n    y, f_lin = jax.linearize(f, x)\n    y_ref, f_lin_ref = jax.linearize(f_ref, x)\n    self.assertAllClose(y, y_ref, check_dtypes=False)\n    self.assertAllClose(f_lin(x), f_lin_ref(x), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testCondJit(self):\n\n    def f(x):\n        return lax.cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitDisabled(self, cond):\n\n    def f_ref(x):\n        return 3.0 * x if x < 2 else jnp.sin(x)\n\n    def f(x):\n        return cond(x < 2, lambda x: 3.0 * x, lambda x: jnp.sin(x), x)\n    with jax.disable_jit():\n        y = f(1.0)\n        expected = f_ref(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)\n    with jax.disable_jit():\n        y = jax.jit(f)(1.0)\n        expected = f(1.0)\n        self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n\n    def f_ref(x):\n        if x < 2:\n            return np.array([1.0, 2.0]) * x\n        else:\n            return np.array([3.0, 4.0]) * np.sin(x)\n    y = f(1.0)\n    expected = f_ref(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = f(4.0)\n    expected = f_ref(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondJitWithConsts(self, cond):\n\n    def f(x):\n        return cond(x < 2, lambda x: np.array([1.0, 2.0]) * x, lambda x: np.array([3.0, 4.0]) * jnp.sin(x), x)\n    y = jax.jit(f)(1.0)\n    expected = f(1.0)\n    self.assertAllClose(y, expected, check_dtypes=False)\n    y = jax.jit(f)(4.0)\n    expected = f(4.0)\n    self.assertAllClose(y, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters(({'testcase_name': f'_{name}', 'cond': cond} for cond, name in COND_IMPLS))\ndef testCondVmapGrad(self, cond):\n\n    def f_1(x):\n        return x ** 2\n\n    def f_2(x):\n        return x ** 3\n\n    def f(x):\n        return cond(x > 0, f_1, f_2, x)\n\n    def g(x):\n        return jnp.where(x > 0, f_1(x), f_2(x))\n    x = jnp.linspace(-1, 1, 20)\n    ans = jax.vmap(jax.grad(f))(x)\n    expected = jax.vmap(jax.grad(g))(x)\n    self.assertAllClose(ans, expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef testIssue1263(self):\n\n    def f(rng, x):\n        cond = random.bernoulli(rng)\n        return lax.cond(cond, x, lambda x: x, jnp.abs(x) - 1.0, lambda x: x)\n\n    def body_fn(i, state):\n        rng, x = state\n        key, subkey = random.split(rng)\n        return (key, f(subkey, x))\n\n    def g(rng, x):\n        return lax.fori_loop(0, 10, body_fn, (rng, x))\n    jax.vmap(g)(random.split(random.PRNGKey(0), 3), jnp.ones((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def testIssue514(self):\n    lax.cond(True, (0, 0), lambda x: (x[0], 0), (1, 1), lambda x: x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@parameterized.named_parameters((dict(testcase_name=f'_loop={loop!r}', loop=loop) for loop in ['while', 'fori_inside_cond', 'fori_inside_scan']))\ndef testWhileGradError(self, loop: str='fori_inside_scan'):\n    if loop == 'while':\n        func = lambda x: lax.while_loop(lambda i: i < 5.0, lambda i: i + 1.0, x)\n    elif loop == 'fori_inside_jit':\n        func = jax.jit(lambda x: lax.fori_loop(x, x + 2.0, lambda i, c: c, x))\n    elif loop == 'fori_inside_cond':\n        func = lambda x: lax.cond(True, x, lambda x: lax.fori_loop(x, x + 2.0, lambda i, c: c, x), 1.0, lambda x: x)\n    elif loop == 'fori_inside_scan':\n        func = lambda x: lax.scan(lambda c, x: (lax.fori_loop(x, x + 2.0, lambda i, c1: c1 * c, x), None), x, np.ones(2))[0]\n    else:\n        assert False\n    with self.assertRaisesRegex(ValueError, 'Reverse-mode differentiation does not work for lax.while_loop'):\n        jax.grad(func)(1.0)\n    jax.linearize(func, 1.0)",
    "assertions": [
      "assert False"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_disable_jit_cond_with_vmap(self):\n\n    def fn(t):\n        return lax.cond(t > 0, 0, lambda x: 0, 0, lambda x: 1)\n    fn = jax.vmap(fn)\n    with jax.disable_jit():\n        _ = fn(jnp.array([1]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_transformation_rule_with_consts(self):\n\n    @jax.custom_jvp\n    def f(x):\n        return x\n\n    @f.defjvp\n    def f_jvp(primals, tangents):\n        (x,), (xdot,) = (primals, tangents)\n        const = np.arange(3, dtype=x.dtype)\n        return (x * const, xdot * const)\n    g = lambda x: jax.lax.cond(True, f, lambda x: x, x)\n    x = np.arange(3, dtype='float32')\n    jax.jvp(g, (x,), (x,))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\ndef test_cond_excessive_compilation(self):\n\n    def f(x):\n        return x + 1\n\n    def g(x):\n        return x + 2\n    with jtu.count_jit_and_pmap_lowerings() as count:\n        for x in range(10):\n            lax.cond(x, f, g, x)\n    self.assertLess(count(), 5)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_xla_cpu_gpu_loop_cond_bug(self):\n\n    def deriv(f):\n        return lambda x, *args: jax.linearize(lambda x: f(x, *args), x)[1](1.0)\n\n    def _while_loop(cond_fun, body_fun, init_val, max_iter):\n\n        def _iter(val):\n            next_val = body_fun(val)\n            next_cond = True\n            return (next_val, next_cond)\n\n        def _fun(tup, _):\n            val, cond = tup\n            return (jax.lax.cond(cond, _iter, lambda x: (x, False), val), _)\n        init = (init_val, cond_fun(init_val))\n        return jax.lax.scan(_fun, init, None, length=max_iter)[0][0]\n\n    def my_pow(x, y):\n\n        def body_fun(val):\n            return val * x\n\n        def cond_fun(val):\n            return True\n        return _while_loop(cond_fun, body_fun, 1.0, y)\n    self.assertAllClose(deriv(my_pow)(3.0, 1), 1.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_ad_batched_unit(self):\n\n    def cond_id(x):\n        return lax.cond(x < 0.0, lambda x: x, lambda x: x, x)\n    jax.vmap(jax.jacrev(lambda x: cond_id(cond_id(x))))(jnp.ones(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_vmap_forwarding_doesnt_promote(self):\n\n    def f(x, y):\n        x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n        return (x, y)\n    x = jnp.arange(3)\n    y = jnp.array(3.0)\n    x2, y2 = jax.vmap(f, in_axes=(0, None), out_axes=(0, None))(x, y)\n    assert x is not x2\n    assert y is y2",
    "assertions": [
      "assert x is not x2",
      "assert y is y2"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_casting(self):\n    x = 1.0\n    identity = lambda x: x\n    y = lax.cond(True, identity, identity, x)\n    self.assertEqual(y, x)\n    self.assertIsInstance(y, jax.Array)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\ndef test_cond_memory_leak(self):\n\n    def leak():\n        data = jax.device_put(np.zeros(1024, dtype=np.float32) + 1)\n\n        def g():\n            return jax.lax.cond(True, lambda: data[0], lambda: data[1])\n        jg = jax.jit(g)\n        _ = jg().block_until_ready()\n        del g, jg, data, _\n    nbufs = lambda: len(jax.live_arrays())\n    base = nbufs()\n    leak()\n    self.assertEqual(base, nbufs())\n    leak()\n    self.assertEqual(base, nbufs())\n    leak()\n    self.assertEqual(base, nbufs())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_control_flow_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  }
]