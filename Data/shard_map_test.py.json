[
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_identity(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def identity(x):\n        return x\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(identity, mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_all_gather(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))\n    def fwd(a):\n        return (lax.all_gather(a, 'z', axis=0, tiled=True), lax.all_gather(a, ('x', 'y'), axis=-1, tiled=True))\n    c, d = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    for i, a_shard in enumerate(np.split(a, 4, axis=1)):\n        self.assertAllClose(c.addressable_data(2 * i), a_shard)\n    self.assertEqual(d.addressable_data(0).shape, (4, 8))\n    for i, a_shard in enumerate(np.split(a, 2, axis=0)):\n        self.assertAllClose(d.addressable_data(i), a_shard)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_all_gather_with_axis_index_groups(self):\n    mesh, a, _ = create_inputs(P('x', ('y', 'z')), P(None, None))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        return lax.all_gather(a, ('y', 'z'), axis_index_groups=((0, 1), (2, 3)), axis=-1, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 4))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j), block)\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j + 1), block)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_matmul_partial(self):\n    raise unittest.SkipTest('invalid replication asserted by out_spec?')\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P('z', None))\n    def fwd(a):\n        c = jnp.matmul(a, b)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 8))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_matmul_reduce_scatter(self):\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P(('z', 'y'), None))\n    def fwd(a, b):\n        c = jnp.matmul(a, b)\n        return (lax.psum_scatter(c, 'y', scatter_dimension=0, tiled=True), lax.psum_scatter(c, ('z', 'y'), scatter_dimension=0, tiled=True))\n    expected = jnp.matmul(a, b)\n    c, d = fwd(a, b)\n    self.assertEqual(c.addressable_data(0).shape, (2, 8))\n    self.assertAllClose(expected, c)\n    self.assertEqual(d.addressable_data(0).shape, (1, 8))\n    self.assertAllClose(expected[:4] + expected[4:], d)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_reduce_scatter_with_axis_index_groups(self):\n    axis_index_groups = ((0, 2, 4, 6), (1, 3, 5, 7))\n    mesh, a, _ = create_inputs(P(None, ('x', 'y', 'z')), P(None, None))\n    assert a.addressable_data(0).shape == (8, 1)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, ('x', 'y', 'z')),), out_specs=P(None, ('x', 'y', 'z')))\n    def fwd(a):\n        return lax.psum_scatter(a, ('x', 'y', 'z'), scatter_dimension=0, axis_index_groups=axis_index_groups, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 1))\n    sum_of_even_columns = np.sum(a[..., axis_index_groups[0]], -1)\n    for i, sums in enumerate(np.split(sum_of_even_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i), -1), sums)\n    sum_of_odd_columns = np.sum(a[..., axis_index_groups[1]], -1)\n    for i, sums in enumerate(np.split(sum_of_odd_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i + 1), -1), sums)",
    "assertions": [
      "assert a.addressable_data(0).shape == (8, 1)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_collective_permute(self):\n    mesh = jtu.create_mesh((8,), 'x')\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P('x', None))\n    def fwd(a):\n        axis_size = lax.psum(1, 'x')\n        perm = [(j, (j + 1) % axis_size) for j in range(axis_size)]\n        return lax.ppermute(a, 'x', perm=perm)\n    c = fwd(a)\n    self.assertAllClose(c[1, :], a[0, :])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_collective_permute_with_multiple_axis_names(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((4, 16)), jax.sharding.NamedSharding(mesh, P('x', ('y', 'z'))))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        xy_axis_size = lax.psum(1, ('x', 'y'))\n        yz_axis_size = lax.psum(1, ('y', 'z'))\n        xy_perm = [(j, (j + 1) % xy_axis_size) for j in range(xy_axis_size)]\n        yz_perm = [(j, (j + 1) % yz_axis_size) for j in range(yz_axis_size)]\n        return (lax.ppermute(a, ('x', 'y'), perm=xy_perm), lax.ppermute(a, ('y', 'z'), perm=yz_perm))\n    c, d = fwd(a)\n    for i in range(8):\n        self.assertAllClose(a.addressable_data(i), c.addressable_data((i + 2) % 8))\n        self.assertAllClose(a.addressable_data(i), d.addressable_data(4 * (i // 4) + (i + 1) % 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "@parameterized.named_parameters(dict(testcase_name='_single_axis_name', axis_name='x', mesh_axes=dict(x=8)), dict(testcase_name='_multiple_axis_names', axis_name=('x', 'y'), mesh_axes=dict(x=4, y=2)))\ndef test_all_to_all(self, axis_name, mesh_axes):\n    mesh = jtu.create_mesh(tuple(mesh_axes.values()), tuple(mesh_axes.keys()))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P(axis_name, None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None),), out_specs=P(None, axis_name))\n    def fwd(a):\n        return lax.all_to_all(a, axis_name, split_axis=1, concat_axis=1, tiled=True)\n    c = fwd(a)\n    assert (c == jnp.reshape(a.T, (1, 64))).all()",
    "assertions": [
      "assert (c == jnp.reshape(a.T, (1, 64))).all()"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_all_to_all_with_axis_index_groups(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    a = jax.device_put(jnp.arange(4 * 4).reshape((4, 4)), jax.sharding.NamedSharding(mesh, P('x', None)))\n    self.assertEqual(a.addressable_data(0).shape, (1, 4))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P(None, 'x'))\n    def fwd(a):\n        return lax.all_to_all(a, 'x', split_axis=1, concat_axis=0, axis_index_groups=((0, 1), (2, 3)), tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 2))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(block, c.addressable_data(2 * i + j))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_all_to_all_grad(self):\n    mesh = jtu.create_mesh((4,), 'x')\n    a = jax.device_put(jnp.arange(8 * 8, dtype=jnp.float32).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n    self.assertEqual(a.addressable_data(0).shape, (2, 8))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P(None, 'x'))\n    def fwd(x):\n        return lax.all_to_all(x, 'x', split_axis=1, concat_axis=0, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    self.assertAllClose(a, c)\n\n    @jax.jit\n    @partial(jax.grad, has_aux=True)\n    def loss_and_grad(x):\n        loss = fwd(x).sum() * 2\n        return (loss, loss)\n    grad, loss = loss_and_grad(a)\n    self.assertEqual(loss, 2 * sum(range(64)))\n    self.assertAllClose(grad, 2 * np.ones_like(a))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_custom_partitioning(self):\n    self.skip_if_custom_partitioning_not_supported()\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def partition(mesh, arg_shapes, result_shape):\n\n        def lower_fn(x):\n            return x\n        return (mesh, lower_fn, arg_shapes[0].sharding, (arg_shapes[0].sharding,))\n\n    def infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return arg_shapes[0].sharding\n\n    def propagate_user_sharding(mesh, user_shape):\n        return user_shape.sharding\n\n    @custom_partitioning\n    def f(x):\n        return x\n    f.def_partition(infer_sharding_from_operands=infer_sharding_from_operands, partition=partition, propagate_user_sharding=propagate_user_sharding)\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(f, mesh, check_rep=False, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_axis_index_twoaxes(self, jit):\n\n    def foo():\n        out1 = jax.lax.axis_index('i')[None, None]\n        out2 = jax.lax.axis_index('j')[None, None]\n        out3 = jax.lax.axis_index(('i', 'j'))[None, None]\n        return (out1, out2, out3)\n    if jit:\n        foo = jax.jit(foo)\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    ans1, ans2, ans3 = shard_map(foo, mesh, in_specs=(), out_specs=P('i', 'j'))()\n    expected1 = jnp.arange(4.0)[:, None] + jnp.zeros((4, 2))\n    expected2 = jnp.arange(2.0)[None, :] + jnp.zeros((4, 2))\n    expected3 = jnp.arange(8.0).reshape(4, 2)\n    self.assertAllClose(ans1, expected1, check_dtypes=False)\n    self.assertAllClose(ans2, expected2, check_dtypes=False)\n    self.assertAllClose(ans3, expected3, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_returned_out_sharding(self):\n    mesh = jtu.create_mesh((1, 2), ('x', 'y'))\n    s = NamedSharding(mesh, P('x', 'y'))\n    inp = jax.device_put(jnp.zeros((2, 2)), s)\n    out = shard_map(lambda x: x, mesh, P('x', 'y'), P('x', 'y'))(inp)\n    self.assertEqual(out.sharding, s)\n    self.assertArraysEqual(out, inp)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_partial_auto_of_pjit(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def h():\n\n        def _make_zeros():\n            return jnp.zeros(())\n        s = jax.sharding.NamedSharding(mesh, P())\n        y = jax.jit(_make_zeros, out_shardings=s)()\n        return y.reshape((1,))\n\n    def f():\n        return shard_map(h, mesh, in_specs=(), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(jax.jit(f)(), jnp.zeros((2,)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_partial_auto_of_pjit_different_mesh(self):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('Shardy requires the mesh axis names to be the same across the entire computation.')\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n    mesh2 = jax.sharding.Mesh(mesh.devices, ('k', 'l'))\n\n    def h():\n\n        def _make_zeros():\n            return jnp.zeros(())\n        s = jax.sharding.NamedSharding(mesh2, P())\n        y = jax.jit(_make_zeros, out_shardings=s)()\n        return y.reshape((1,))\n\n    def f():\n        return shard_map(h, mesh, in_specs=(), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(jax.jit(f)(), jnp.zeros((2,)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, abstracted_axes=('n',))\ndef fun(x):\n    return jnp.sum(x)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "def test_axis_index_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P())\n    def foo():\n        val = jax.lax.psum(jax.lax.axis_index('x'), 'x')\n        return 1.0 if val > 0 else -1.0\n    out = foo()\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cond_rep_rule(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(4)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return y\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(x > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(y > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(a):\n        c = jax.lax.cond(jnp.any(a), lambda: 1, lambda: 0)\n        return jnp.reshape(c, a.shape)\n    mesh = jtu.create_mesh((2,), ('x',))\n    a = jnp.array([True, False])\n    shard_map(f, mesh, in_specs=P('x'), out_specs=P('x'))(a)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef fun(x, y):\n    return cond(x < 3, None, lambda _: 2.0 * jnp.sin(y), x, lambda x: 2.0 * x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef fun(x, y):\n    return cond(x < 3, None, lambda _: 2.0 * jnp.sin(y), x, lambda x: 2.0 * x)"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_partial_eval_custom_axis_env(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(_):\n        _, idx = jax.lax.scan(lambda _, __: (None, jax.lax.axis_index('i')), None, None, length=1)\n        return idx\n    xs = jnp.arange(16.0)\n    jax.eval_shape(jax.grad(lambda x: jax.remat(f)(x).sum().astype('float32')), xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_rep_rule(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, y, z):\n        x, y, z = (x.sum(), y.sum(), z.sum())\n\n        def body(c, _):\n            c, *cs = c\n            return ((*cs, c), None)\n        out, _ = jax.lax.scan(body, (x, y, z), None, length=3)\n        return [jnp.expand_dims(a, 0) for a in out]\n    x = jnp.arange(4)\n    shard_map(f, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=P(('x', 'y')))(x, x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=P('x'))(x, x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=P('y'))(x, x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=P(None))(x, x, x)\n\n    def g(x, y, z):\n        x, y, z = (x.sum(), y.sum(), z.sum())\n\n        def body(c, _):\n            return (c, None)\n        out, _ = jax.lax.scan(body, (x, y, z), None, length=1)\n        return [jnp.expand_dims(a, 0) for a in out]\n    shard_map(g, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=[P(None), P('x'), P(('x', 'y'))])(x, x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(g, mesh, in_specs=(P(None), P('x'), P(('x', 'y'))), out_specs=[P(None), P(None), P(('x', 'y'))])(x, x, x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_rewrite_scan(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        x, _ = jax.lax.scan(lambda x, _: (jax.lax.psum(x, 'x'), None), x, None, length=2)\n        return x\n    jaxpr = jax.make_jaxpr(f)(jnp.arange(4.0))\n    e, = jaxpr.jaxpr.eqns\n    e, = e.params['jaxpr'].eqns\n    e1, e2 = e.params['jaxpr'].eqns\n    self.assertEqual(e1.primitive.name, 'psum2')\n    self.assertEqual(e2.primitive.name, 'pbroadcast')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_shmap_of_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    x = jnp.arange(4.0)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    def f2(x):\n        return jnp.sin(x)\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(x), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_identity(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def identity(x):\n        return x\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(identity, mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_all_gather(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))\n    def fwd(a):\n        return (lax.all_gather(a, 'z', axis=0, tiled=True), lax.all_gather(a, ('x', 'y'), axis=-1, tiled=True))\n    c, d = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    for i, a_shard in enumerate(np.split(a, 4, axis=1)):\n        self.assertAllClose(c.addressable_data(2 * i), a_shard)\n    self.assertEqual(d.addressable_data(0).shape, (4, 8))\n    for i, a_shard in enumerate(np.split(a, 2, axis=0)):\n        self.assertAllClose(d.addressable_data(i), a_shard)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_all_gather_with_axis_index_groups(self):\n    mesh, a, _ = create_inputs(P('x', ('y', 'z')), P(None, None))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        return lax.all_gather(a, ('y', 'z'), axis_index_groups=((0, 1), (2, 3)), axis=-1, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 4))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j), block)\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j + 1), block)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_matmul_partial(self):\n    raise unittest.SkipTest('invalid replication asserted by out_spec?')\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P('z', None))\n    def fwd(a):\n        c = jnp.matmul(a, b)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 8))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_matmul_reduce_scatter(self):\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P(('z', 'y'), None))\n    def fwd(a, b):\n        c = jnp.matmul(a, b)\n        return (lax.psum_scatter(c, 'y', scatter_dimension=0, tiled=True), lax.psum_scatter(c, ('z', 'y'), scatter_dimension=0, tiled=True))\n    expected = jnp.matmul(a, b)\n    c, d = fwd(a, b)\n    self.assertEqual(c.addressable_data(0).shape, (2, 8))\n    self.assertAllClose(expected, c)\n    self.assertEqual(d.addressable_data(0).shape, (1, 8))\n    self.assertAllClose(expected[:4] + expected[4:], d)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_reduce_scatter_with_axis_index_groups(self):\n    axis_index_groups = ((0, 2, 4, 6), (1, 3, 5, 7))\n    mesh, a, _ = create_inputs(P(None, ('x', 'y', 'z')), P(None, None))\n    assert a.addressable_data(0).shape == (8, 1)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, ('x', 'y', 'z')),), out_specs=P(None, ('x', 'y', 'z')))\n    def fwd(a):\n        return lax.psum_scatter(a, ('x', 'y', 'z'), scatter_dimension=0, axis_index_groups=axis_index_groups, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 1))\n    sum_of_even_columns = np.sum(a[..., axis_index_groups[0]], -1)\n    for i, sums in enumerate(np.split(sum_of_even_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i), -1), sums)\n    sum_of_odd_columns = np.sum(a[..., axis_index_groups[1]], -1)\n    for i, sums in enumerate(np.split(sum_of_odd_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i + 1), -1), sums)",
    "assertions": [
      "assert a.addressable_data(0).shape == (8, 1)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_collective_permute(self):\n    mesh = jtu.create_mesh((8,), 'x')\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P('x', None))\n    def fwd(a):\n        axis_size = lax.psum(1, 'x')\n        perm = [(j, (j + 1) % axis_size) for j in range(axis_size)]\n        return lax.ppermute(a, 'x', perm=perm)\n    c = fwd(a)\n    self.assertAllClose(c[1, :], a[0, :])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_collective_permute_with_multiple_axis_names(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((4, 16)), jax.sharding.NamedSharding(mesh, P('x', ('y', 'z'))))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        xy_axis_size = lax.psum(1, ('x', 'y'))\n        yz_axis_size = lax.psum(1, ('y', 'z'))\n        xy_perm = [(j, (j + 1) % xy_axis_size) for j in range(xy_axis_size)]\n        yz_perm = [(j, (j + 1) % yz_axis_size) for j in range(yz_axis_size)]\n        return (lax.ppermute(a, ('x', 'y'), perm=xy_perm), lax.ppermute(a, ('y', 'z'), perm=yz_perm))\n    c, d = fwd(a)\n    for i in range(8):\n        self.assertAllClose(a.addressable_data(i), c.addressable_data((i + 2) % 8))\n        self.assertAllClose(a.addressable_data(i), d.addressable_data(4 * (i // 4) + (i + 1) % 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "@parameterized.named_parameters(dict(testcase_name='_single_axis_name', axis_name='x', mesh_axes=dict(x=8)), dict(testcase_name='_multiple_axis_names', axis_name=('x', 'y'), mesh_axes=dict(x=4, y=2)))\ndef test_all_to_all(self, axis_name, mesh_axes):\n    mesh = jtu.create_mesh(tuple(mesh_axes.values()), tuple(mesh_axes.keys()))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P(axis_name, None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None),), out_specs=P(None, axis_name))\n    def fwd(a):\n        return lax.all_to_all(a, axis_name, split_axis=1, concat_axis=1, tiled=True)\n    c = fwd(a)\n    assert (c == jnp.reshape(a.T, (1, 64))).all()",
    "assertions": [
      "assert (c == jnp.reshape(a.T, (1, 64))).all()"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_all_to_all_with_axis_index_groups(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    a = jax.device_put(jnp.arange(4 * 4).reshape((4, 4)), jax.sharding.NamedSharding(mesh, P('x', None)))\n    self.assertEqual(a.addressable_data(0).shape, (1, 4))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P(None, 'x'))\n    def fwd(a):\n        return lax.all_to_all(a, 'x', split_axis=1, concat_axis=0, axis_index_groups=((0, 1), (2, 3)), tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 2))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(block, c.addressable_data(2 * i + j))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_all_to_all_grad(self):\n    mesh = jtu.create_mesh((4,), 'x')\n    a = jax.device_put(jnp.arange(8 * 8, dtype=jnp.float32).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n    self.assertEqual(a.addressable_data(0).shape, (2, 8))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P(None, 'x'))\n    def fwd(x):\n        return lax.all_to_all(x, 'x', split_axis=1, concat_axis=0, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    self.assertAllClose(a, c)\n\n    @jax.jit\n    @partial(jax.grad, has_aux=True)\n    def loss_and_grad(x):\n        loss = fwd(x).sum() * 2\n        return (loss, loss)\n    grad, loss = loss_and_grad(a)\n    self.assertEqual(loss, 2 * sum(range(64)))\n    self.assertAllClose(grad, 2 * np.ones_like(a))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_custom_partitioning(self):\n    self.skip_if_custom_partitioning_not_supported()\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def partition(mesh, arg_shapes, result_shape):\n\n        def lower_fn(x):\n            return x\n        return (mesh, lower_fn, arg_shapes[0].sharding, (arg_shapes[0].sharding,))\n\n    def infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return arg_shapes[0].sharding\n\n    def propagate_user_sharding(mesh, user_shape):\n        return user_shape.sharding\n\n    @custom_partitioning\n    def f(x):\n        return x\n    f.def_partition(infer_sharding_from_operands=infer_sharding_from_operands, partition=partition, propagate_user_sharding=propagate_user_sharding)\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(f, mesh, check_rep=False, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fwd(a, b, is_ref=False):\n    fn = jax.vmap(jax.lax.dot_general if is_ref else scaled_dot_general, in_axes=(a_axis, b_axis, None), out_axes=o_axis)\n    y = fn(a, b, dimension_numbers)\n    return jnp.sum(y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fun():\n    return jax.ffi.ffi_call('test', jax.ShapeDtypeStruct((), np.int64))()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fun():\n    return jax.ffi.ffi_call('test', jax.ShapeDtypeStruct((), np.int64))()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fun(x, t):\n    return jnp.sum(jnp.power(jnp.maximum(x, 0.0), 2)) + t"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def fun(x, t):\n    return jnp.sum(jnp.power(jnp.maximum(x, 0.0), 2)) + t"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_collective_permute(self):\n    mesh = jtu.create_mesh((8,), 'x')\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P('x', None))\n    def fwd(a):\n        axis_size = lax.psum(1, 'x')\n        perm = [(j, (j + 1) % axis_size) for j in range(axis_size)]\n        return lax.ppermute(a, 'x', perm=perm)\n    c = fwd(a)\n    self.assertAllClose(c[1, :], a[0, :])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "def test_collective_permute_with_multiple_axis_names(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((4, 16)), jax.sharding.NamedSharding(mesh, P('x', ('y', 'z'))))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        xy_axis_size = lax.psum(1, ('x', 'y'))\n        yz_axis_size = lax.psum(1, ('y', 'z'))\n        xy_perm = [(j, (j + 1) % xy_axis_size) for j in range(xy_axis_size)]\n        yz_perm = [(j, (j + 1) % yz_axis_size) for j in range(yz_axis_size)]\n        return (lax.ppermute(a, ('x', 'y'), perm=xy_perm), lax.ppermute(a, ('y', 'z'), perm=yz_perm))\n    c, d = fwd(a)\n    for i in range(8):\n        self.assertAllClose(a.addressable_data(i), c.addressable_data((i + 2) % 8))\n        self.assertAllClose(a.addressable_data(i), d.addressable_data(4 * (i // 4) + (i + 1) % 4))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "def test_shardy_collective_permute(self):\n    mesh = jtu.create_mesh((2,), ('x',))\n    a = jax.device_put(jnp.arange(8 * 8).reshape((8, 8)), jax.sharding.NamedSharding(mesh, P('x', None)))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P('x', None))\n    def fwd(a):\n        axis_size = lax.psum(1, 'x')\n        perm = [(j, (j + 1) % axis_size) for j in range(axis_size)]\n        return lax.ppermute(a, 'x', perm=perm)\n    self.assertIn('sdy.manual_computation', jax.jit(fwd).lower(a).as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def ppermute(input):\n    return jax.lax.ppermute(input, axis_name='i', perm=[[0, 1], [1, 0]])"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, backend=backend)\ndef fun(x, y):\n    return jnp.matmul(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jax.jit, backend=backend)\ndef fun(x, y):\n    return jnp.matmul(x, y)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "def test_axis_index_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P())\n    def foo():\n        val = jax.lax.psum(jax.lax.axis_index('x'), 'x')\n        return 1.0 if val > 0 else -1.0\n    out = foo()\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_vjp\ndef foo(x):\n    return x"
  },
  {
    "test_code": "def test_axis_env_extension_regression(self):\n\n    def foo(x):\n        i = jax.lax.axis_index('x')\n        return jnp.exp(x) + i.astype(x.dtype)\n\n    @partial(jax.remat, policy=lambda *args, **kwargs: True)\n    def bar(x):\n        return shard_map(foo, mesh=Mesh(jax.devices(), ['x']), in_specs=(P('x'),), out_specs=P('x'), check_rep=False)(x)\n    jax.jit(jax.grad(lambda x: bar(x).sum()))(jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def bar(x):\n    out = jnp.sin(foo(x))\n    jax_setattr(thing, 'x', 5.0)\n    return out"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_all_gather(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))\n    def fwd(a):\n        return (lax.all_gather(a, 'z', axis=0, tiled=True), lax.all_gather(a, ('x', 'y'), axis=-1, tiled=True))\n    c, d = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    for i, a_shard in enumerate(np.split(a, 4, axis=1)):\n        self.assertAllClose(c.addressable_data(2 * i), a_shard)\n    self.assertEqual(d.addressable_data(0).shape, (4, 8))\n    for i, a_shard in enumerate(np.split(a, 2, axis=0)):\n        self.assertAllClose(d.addressable_data(i), a_shard)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_all_gather_with_axis_index_groups(self):\n    mesh, a, _ = create_inputs(P('x', ('y', 'z')), P(None, None))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        return lax.all_gather(a, ('y', 'z'), axis_index_groups=((0, 1), (2, 3)), axis=-1, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 4))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j), block)\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j + 1), block)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_reduce_scatter_with_axis_index_groups(self):\n    axis_index_groups = ((0, 2, 4, 6), (1, 3, 5, 7))\n    mesh, a, _ = create_inputs(P(None, ('x', 'y', 'z')), P(None, None))\n    assert a.addressable_data(0).shape == (8, 1)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, ('x', 'y', 'z')),), out_specs=P(None, ('x', 'y', 'z')))\n    def fwd(a):\n        return lax.psum_scatter(a, ('x', 'y', 'z'), scatter_dimension=0, axis_index_groups=axis_index_groups, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 1))\n    sum_of_even_columns = np.sum(a[..., axis_index_groups[0]], -1)\n    for i, sums in enumerate(np.split(sum_of_even_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i), -1), sums)\n    sum_of_odd_columns = np.sum(a[..., axis_index_groups[1]], -1)\n    for i, sums in enumerate(np.split(sum_of_odd_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i + 1), -1), sums)",
    "assertions": [
      "assert a.addressable_data(0).shape == (8, 1)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_all_to_all_with_axis_index_groups(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    a = jax.device_put(jnp.arange(4 * 4).reshape((4, 4)), jax.sharding.NamedSharding(mesh, P('x', None)))\n    self.assertEqual(a.addressable_data(0).shape, (1, 4))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', None),), out_specs=P(None, 'x'))\n    def fwd(a):\n        return lax.all_to_all(a, 'x', split_axis=1, concat_axis=0, axis_index_groups=((0, 1), (2, 3)), tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 2))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(block, c.addressable_data(2 * i + j))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_random_normal_rules(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    keys = jax.random.split(jax.random.key(0), 4)\n    shard_map(lambda k: jax.random.normal(k[0], (1,)), mesh=mesh, in_specs=P('i'), out_specs=P('i'))(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_cond_rep_rule(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(4)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return y\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(x > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(y > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(a):\n        c = jax.lax.cond(jnp.any(a), lambda: 1, lambda: 0)\n        return jnp.reshape(c, a.shape)\n    mesh = jtu.create_mesh((2,), ('x',))\n    a = jnp.array([True, False])\n    shard_map(f, mesh, in_specs=P('x'), out_specs=P('x'))(a)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_axis_index_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P())\n    def foo():\n        val = jax.lax.psum(jax.lax.axis_index('x'), 'x')\n        return 1.0 if val > 0 else -1.0\n    out = foo()\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cond_rep_rule(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(4)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return y\n        return jax.lax.cond(True, true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(x > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(None))(x, x)\n\n    def f(x, y):\n\n        def true_fn(x, y):\n            return x\n\n        def false_fun(x, y):\n            return x + 1\n        return jax.lax.cond(jnp.any(y > 0), true_fn, false_fun, x, y)\n    shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P(('x', 'y')))(x, x)\n    with self.assertRaisesRegex(ValueError, 'require replication'):\n        shard_map(f, mesh, in_specs=(P('x'), P('y')), out_specs=P('x'))(x, x)\n\n    def f(a):\n        c = jax.lax.cond(jnp.any(a), lambda: 1, lambda: 0)\n        return jnp.reshape(c, a.shape)\n    mesh = jtu.create_mesh((2,), ('x',))\n    a = jnp.array([True, False])\n    shard_map(f, mesh, in_specs=P('x'), out_specs=P('x'))(a)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_eager_repr(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    s = None\n\n    @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=P('x', 'y'))\n    def f(x):\n        nonlocal s\n        s = str(x)\n        return x\n    _ = f(np.arange(8 * 8.0).reshape(8, 8))\n    self.assertIsInstance(s, str)\n    self.assertIn('at mesh coordinates', s)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_tree_prefix_error(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    @partial(shard_map, mesh=mesh, in_specs=([P('x', 'y')],), out_specs=P('x', 'y'))\n    def f(x):\n        return x\n    x = jnp.arange(8 * 8.0).reshape(8, 8)\n    with self.assertRaisesRegex(ValueError, 'shard_map in_specs\\\\[0\\\\]'):\n        f([x, x])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.run_on_devices('gpu', 'tpu')\ndef test_axis_index(self):\n    mesh = jtu.create_mesh((4,), 'x')\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('x'))\n    def f():\n        return jax.lax.axis_index('x')[None]\n    x = f()\n    self.assertAllClose(x, jnp.arange(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_remat_basic(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @jax.remat\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(x))\n    x = jnp.arange(4.0)\n    g = jax.grad(lambda x: f(x).sum())(x)\n    self.assertAllClose(g, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f, x)\n    self.assertLen(saved_res, 1)\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f2(x):\n        return jnp.sin(jnp.sin(x))\n    g2 = jax.grad(lambda x: f2(x).sum())(x)\n    self.assertAllClose(g2, jnp.cos(jnp.sin(x)) * jnp.cos(x), check_dtypes=False, atol=0.001, rtol=0.001)\n    saved_res = saved_residuals(f2, x)\n    self.assertLen(saved_res, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_remat_scalar_residuals(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n\n    @partial(jax.remat, policy=jax.checkpoint_policies.everything_saveable)\n    @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n    def f(x):\n        return jnp.sin(jnp.sin(jnp.sin(x.sum()))[None])\n    x = jnp.arange(8.0)\n    _ = jax.grad(lambda x: f(x).sum())(x)\n    jtu.check_grads(f, (x,), modes=['rev'], order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_check_rep_false_doesnt_hit_rep_rules(self):\n    mesh = Mesh(np.array(jax.devices()[:4]), ('x',))\n    prim = core.Primitive('prim')\n    prim.multiple_results = True\n    prim.def_impl(lambda: [])\n    prim.def_abstract_eval(lambda: [])\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=True)\n    def f():\n        prim.bind()\n    with self.assertRaises(NotImplementedError):\n        f()\n    with self.assertRaises(NotImplementedError):\n        jax.jit(f)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f2():\n        prim.bind()\n    f2()\n    jax.jit(f2)()\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=None, check_rep=False)\n    def f3():\n        jax.jit(prim.bind)()\n    f3()\n    jax.jit(f3)()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_shard_map_abstract_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    np_inp = np.arange(16).reshape(8, 2)\n    arr = jax.device_put(np_inp, NamedSharding(mesh, P('x', 'y')))\n\n    def f(x):\n        return shard_map(lambda x: x, mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(x)\n    out1 = jax.jit(f)(arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    out_eager = f(arr)\n    self.assertArraysEqual(out_eager, np_inp)\n    self.assertEqual(out_eager.sharding, NamedSharding(mesh, P('x')))\n    out1, out2 = shard_map(lambda x, y: (x, y), mesh=mesh.abstract_mesh, in_specs=P('x'), out_specs=P('x'))(np_inp, arr)\n    self.assertArraysEqual(out1, np_inp)\n    self.assertEqual(out1.sharding, NamedSharding(mesh, P('x')))\n    self.assertArraysEqual(out2, np_inp)\n    self.assertEqual(out2.sharding, NamedSharding(mesh, P('x')))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_different_devices_shmap_abstract_mesh_cache_hit(self):\n    if jax.device_count() < 4:\n        self.skipTest('Requires >=4 devices')\n    mesh1 = jax.sharding.Mesh(jax.devices()[:2], 'i')\n    mesh2 = jax.sharding.Mesh(jax.devices()[2:4], 'i')\n    abstract_mesh = AbstractMesh(mesh1.shape_tuple)\n\n    @jax.jit\n    def f(x):\n        x = shard_map(lambda x: x, mesh=abstract_mesh, in_specs=P('i'), out_specs=P('i'))(x)\n        return jax.lax.sin(x)\n    with jtu.count_jit_tracing_cache_miss() as tracing_count, jtu.count_jit_and_pmap_lowerings() as lowering_count, jtu.count_jit_compilation_cache_miss() as compilation_count:\n        a = jax.device_put(np.arange(8.0), NamedSharding(mesh1, P()))\n        out_a = f(a)\n        b = jax.device_put(out_a, NamedSharding(mesh2, P()))\n        f(b)\n    self.assertEqual(tracing_count(), 1)\n    self.assertEqual(lowering_count(), 1)\n    self.assertEqual(compilation_count(), 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\n@jtu.run_on_devices('cpu', 'gpu', 'tpu')\n@jtu.thread_unsafe_test()\ndef test_debug_print_jit(self, jit):\n    if config.use_shardy_partitioner.value:\n        self.skipTest('TODO(b/384938613): Failing under shardy')\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        idx = jax.lax.axis_index('i')\n        jax.debug.print('instance {i} has value x={x}', i=idx, x=x)\n        y = jnp.cos(x)\n        jax.debug.print('instance {i} has value y={y}', i=idx, y=y)\n        return y\n    if jit:\n        f = jax.jit(f)\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'instance {i} has value', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_eager(self):\n    mesh = Mesh(jax.devices(), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        jax.debug.print('x={x}', x=x)\n        y = jnp.cos(x)\n        jax.debug.print('y={y}', y=y)\n        return y\n    x = jnp.arange(2 * len(jax.devices()))\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    for i in range(len(jax.devices())):\n        self.assertIn(f'x=[{2 * i} {2 * i + 1}]', output())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_rewrite_post_process_call(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'),), out_specs=P('x'))\n    def f(x):\n        return core.call_p.bind(lu.wrap_init(lambda: [2.0 * x], debug_info=api_util.debug_info('test', lambda: [2.0 * x], (), {})))[0] * x\n    x = jnp.arange(4.0)\n    y = f(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return jax.lax.exp(x)\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: f(x).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 1)\n    self.assertLen(e2.invars, 2)\n    self.assertEqual(sum((e1.outvars[0] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.parameters(it.product([True, False], repeat=2))\ndef test_res_forwarding_optimization_complex(self, jit, remat):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return (jax.lax.exp(x.sum()) + x, jax.lax.exp(x))\n    if jit:\n        f = jax.jit(f)\n    if remat:\n        policy = jax.ad_checkpoint.checkpoint_policies.everything_saveable\n        f = jax.remat(f, policy=policy)\n    g = lambda x: sum(f(x)).sum()\n    x = jnp.arange(16.0)\n    jaxpr_ = jax.make_jaxpr(jax.grad(g))(x)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr_.jaxpr, [True] * len(jaxpr_.out_avals))\n    e1, _, e2 = jaxpr.eqns\n    self.assertLen(e1.outvars, 2)\n    self.assertLen(e2.invars, 4)\n    self.assertEqual(sum((e1.outvars[-1] is v for v in e2.invars)), 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_check_rep_failure_inside_rule(self, jit):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    def loss(w, x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n        def f(x):\n            return jax.lax.psum(((w * x) ** 2).sum(), 'i')\n        return f(x)\n    if jit:\n        loss = jax.jit(loss)\n    jax.grad(loss)(3.0, jnp.arange(8.0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_conv_general_dilated(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n    dot = partial(lax.conv_general_dilated, window_strides=(), padding='VALID', dimension_numbers=('NC', 'IO', 'NC'))\n\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, 'i'), P('i', None)), out_specs=P(None, None))\n    def f(x, y):\n        return lax.psum(dot(x, y), 'i')\n    a = jnp.ones((16, 32))\n    b = jnp.ones((32, 8))\n    y = f(a, b)\n    self.assertAllClose(y, a @ b, check_dtypes=False, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_disable_jit(self):\n    mesh = Mesh(np.array(jax.devices()[:2]), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x\n    x = jnp.arange(8.0)\n    with jax.disable_jit():\n        f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Auto: ('j',)})\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P(None, 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{\"i\"}, {?}]>] out_shardings=[<@mesh, [{\"i\"}, {?}]>] manual_axes={\"i\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,2,2]<=[4] last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_explicit_no_use_mesh(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'), axis_types={AxisTypes.Explicit: ('i', 'j')})\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 2), ('i', 'j'))\ndef test_partial_auto_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i',), AxisTypes.Explicit: ('j',)})\n        self.assertEqual(x.aval.sharding.spec, P(None, 'j'))\n        out = x * x\n        self.assertEqual(out.aval.sharding.spec, P(None, 'j'))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), auto=frozenset({'j'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P('i', 'j'))\n        return x\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, out, check_dtypes=False)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('sdy.sharding_constraint %1 <@mesh, [{}, {\"j\"}]>', f.lower(v).as_text())\n    else:\n        self.assertIn('mhlo.sharding = \"{devices=[1,2,2]<=[2,2]T(1,0) last_tile_dims={manual}}\"}', f.lower(v).as_text())\n\n    @jax.jit\n    def h(x):\n        return jnp.sum(f(x))\n    jax.grad(h)(v)\n    jax.jit(jax.grad(h))(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.with_user_mesh((2, 1, 2, 2), ('i', 'j', 'k', 'l'))\ndef test_partial_auto_explicit_multi_explicit(self, mesh):\n\n    def g(x):\n        self.assertDictEqual(x.aval.sharding.mesh.axis_types, {AxisTypes.Manual: ('i', 'j'), AxisTypes.Explicit: ('k', 'l')})\n        self.assertEqual(x.aval.sharding.spec, P(None, None, 'k', 'l'))\n        out = x.T\n        self.assertEqual(out.aval.sharding.spec, P('l', 'k', None, None))\n        return out\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j', None, None), out_specs=P('i', 'j', None, None), auto=frozenset({'k', 'l'}))(x)\n        self.assertEqual(x.aval.sharding.spec, P(('i', 'l'), ('j', 'k'), None, None))\n        return x\n    v = jnp.arange(64.0).reshape(4, 2, 2, 4)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j', 'k', 'l')))\n    out = f(v)\n    self.assertEqual(out.sharding, NamedSharding(mesh, P(('i', 'l'), ('j', 'k'), None, None)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_propagate_through(self):\n    mesh = jtu.create_mesh((2, 2, 2), ('i', 'j', 'k'))\n    sharding = jax.sharding.NamedSharding(mesh, P('i'))\n\n    def g(x):\n        return jax.lax.with_sharding_constraint(x * x, sharding)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P(), out_specs=P(), check_rep=False, auto=frozenset({'i'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, sharding)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('in_shardings=[<@mesh, [{?}, {?}]>] out_shardings=[<@mesh, [{?}, {?}]>] manual_axes={\"j\", \"k\"}', f.lower(v).as_text())\n    else:\n        self.assertIn('sharding={devices=[1,1,4,2]<=[2,4]T(1,0) last_tile_dims={manual, replicated}}', f.lower(v).as_text('hlo'))\n    actual = f(v)\n    self.assertAllClose(v * v, actual, check_dtypes=False)\n    self.assertEqual(actual.sharding, sharding)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_error_wsc_manual(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'manual'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_error_invalid_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'k'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, 'to be a subset of mesh.axis_names'):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_error_wrong_in_specs(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n        return x * x\n\n    @jax.jit\n    def f(x):\n        x = shard_map(g, mesh, in_specs=P('i', 'j'), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n        return jax.lax.with_sharding_constraint(x, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    with self.assertRaisesRegex(ValueError, \"in_specs refers to 'j'\"):\n        f(v)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_nested_partial_auto(self):\n    mesh = jtu.create_mesh((2, 2), ('i', 'j'))\n\n    def g(x):\n        return x * x\n\n    def h(x):\n        return shard_map(g, mesh, in_specs=P(None, 'j'), out_specs=P(None, 'j'))(x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_axis_size_1_partial_auto(self):\n    mesh = jtu.create_mesh((1, 2, 2), ('i', 'j', 'k'))\n\n    def h(x):\n        return x * x\n\n    @jax.jit\n    def f(x):\n        return shard_map(h, mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j', 'k'}))(x)\n    v = jnp.arange(32.0).reshape(4, 8)\n    v = jax.device_put(v, jax.sharding.NamedSharding(mesh, P('i', 'j')))\n    self.assertAllClose(v * v, f(v), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_axis_index(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(4, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_axis_index_degenerated_axis(self):\n    mesh = jtu.create_mesh((1, 2), ('i', 'j'))\n    out_sharding = NamedSharding(mesh, P('i', None))\n\n    @partial(jax.jit, out_shardings=out_sharding)\n    def f():\n        return shard_map(lambda: jax.lax.axis_index('i').reshape(1, 1), mesh, in_specs=P('i', None), out_specs=P('i', None), check_rep=False, auto=frozenset({'j'}))()\n    self.assertAllClose(f(), np.arange(1, dtype=np.int32).reshape(-1, 1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_ppermute(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P('j')))\n        return jax.lax.ppermute(x, 'i', [(0, 1), (1, 2), (2, 3), (3, 0)])\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)\n    self.assertAllClose(y, jnp.array([6.0, 7.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0]), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_debug_print(self):\n    if config.use_shardy_partitioner.value:\n        raise unittest.SkipTest('shardy error')\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    x = jnp.arange(8.0)\n\n    def g(x):\n        jax.debug.print('{}', x)\n\n    @jax.jit\n    def f(x):\n        return shard_map(g, mesh, in_specs=P('i'), out_specs=None, check_rep=False, auto=frozenset({'j'}))(x)\n    y = f(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(keys)\n    y = f(keys)\n    self.assertAllClose(jax.random.key_data(y), jax.random.key_data(keys), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partial_auto_of_random_keys_slice(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n    keys = jax.random.split(jax.random.key(0), 8).reshape(4, 2)\n\n    @jax.jit\n    def f(x):\n        return shard_map(lambda k: k[0], mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n    f(keys)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_vmap_grad_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_vmap_grad_remat_shmap_spmd_axis_name_residuals(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    @partial(jax.remat, policy=lambda *_, **__: True)\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(4 * 16.0).reshape(4, 16)\n    jax.vmap(jax.grad(lambda x: f(x).sum()), spmd_axis_name='i')(xs)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_grad_shmap_residuals_axis_names_in_mesh_order(self):\n    mesh = jtu.create_mesh((4, 2, 1, 1), ('i', 'j', 'k', 'a'))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('j'), out_specs=P('j'))\n    def f(x):\n        return jnp.sin(x)\n    xs = jnp.arange(16.0)\n    ir = jax.jit(jax.grad(lambda x: f(x).sum())).lower(xs)\n    if config.use_shardy_partitioner.value:\n        self.assertIn('out_shardings=[<@mesh, [{\"i\", \"j\", \"k\", \"a\"}]>]', ir.as_text())\n    else:\n        self.assertIn('{jax.result_info = \"[(\\'i\\', \\'j\\', \\'k\\', \\'a\\')]\"}', ir.as_text())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_custom_linear_solve_rep_rules(self):\n    mesh = jtu.create_mesh((1,), ('i',))\n    a = jnp.array(1).reshape(1, 1)\n    b = jnp.array(1).reshape(1)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(a, b):\n        c = jnp.linalg.solve(a, b)\n        return c\n    _ = f(a, b)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_in_spec_none_hashability(self):\n    mesh = jtu.create_mesh((2,), ('i',))\n\n    class A:\n\n        def __hash__(self):\n            raise Exception\n\n    @partial(shard_map, mesh=mesh, in_specs=(None,), out_specs=())\n    def f(a):\n        return ()\n    f(A())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap(self, bdims, fun, mesh, jit, in_specs, out_specs, args, ref):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    f = shard_map(fun, mesh, in_specs, out_specs)\n    if jit:\n        f = jax.jit(f)\n    ans = jax.vmap(f, bdims)(*args)\n    args_slice = args_slicer(args, bdims)\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_partially_sharded_dim_with_auto(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def g(x):\n        return jnp.sum(x)[None]\n\n    @jax.jit\n    def f(x):\n        x = jax.lax.with_sharding_constraint(x, NamedSharding(mesh, P(('i', 'j'))))\n        re = shard_map(g, mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False, auto=frozenset({'j'}))(x)\n        re = jax.lax.with_sharding_constraint(re, NamedSharding(mesh, P(('i', 'j'))))\n        return re\n    self.assertAllClose(f(jnp.arange(8.0)), jnp.array([1.0, 5.0, 9.0, 13.0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_replication_checker_eager(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = np.arange(8 * 8.0).reshape(8, 8)\n\n    def f(x):\n        return 2 * x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    with self.assertRaisesRegex(ValueError, 'statically inferred'):\n        g(x)\n\n    def f2(x):\n        return jax.lax.psum(x, 'x')\n\n    def g2(x):\n        return shard_map(f2, mesh, in_specs=(P('x', 'y'),), out_specs=P(None, 'y'))(x)\n    _ = g2(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_control_flow(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n    x = jnp.arange(2 * 2.0).reshape(2, 2)\n\n    def f(x):\n        y = jax.lax.psum(x, ('x', 'y'))\n        if y < 0:\n            return x\n        else:\n            return -x\n\n    def g(x):\n        return shard_map(f, mesh, in_specs=(P('x', 'y'),), out_specs=P('x', 'y'))(x)\n    y = g(x)\n    self.assertAllClose(y, -x, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_post_process(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x'), out_specs=P('x'))\n        def g(y):\n            return jnp.sin(y) * jnp.sin(x).sum()\n        return g(jnp.arange(8.0))\n    x = jnp.arange(8.0)\n    _, f_lin = jax.linearize(f, x)\n    y_dot = f_lin(x)\n    y_dot_expected = jnp.sin(jnp.arange(8.0)) * (jnp.cos(x) * x).sum()\n    self.assertAllClose(y_dot, y_dot_expected, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jax.legacy_prng_key('allow')\ndef test_prngkeyarray_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, P('x'))\n    rng = jax.random.PRNGKey(0)\n    sharded_rng = jax.random.split(rng, num=4)\n    sharded_rng = jax.device_put(sharded_rng, sharding)\n\n    def f(key):\n        return jax.random.randint(key[0], shape=(1, 16), minval=0, maxval=16, dtype=jnp.int32)\n    pspec = P('x') if config.enable_custom_prng.value else P('x', None)\n    g = shard_map(f, mesh, in_specs=(pspec,), out_specs=pspec)\n    _ = g(sharded_rng)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_functools_partial_rank_error(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial\n    def f(x):\n        return x\n    g = shard_map(f, mesh, in_specs=(P('x', None),), out_specs=P('x'))\n    x = jnp.arange(4)\n    with self.assertRaises(ValueError):\n        g(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_jaxpr_shardings_with_no_outputs(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P('i'))\n    def f():\n        return jax.lax.iota(jnp.dtype('int32'), 4)\n    f()\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('i'),), out_specs=P('i'))\n    def g(a_block):\n        i = jnp.arange(a_block.shape[0])\n        return i + a_block\n    g(np.arange(32))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_device_put(self):\n    mesh = jtu.create_mesh((4,), ('i',))\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def f(x):\n        return x + jax.device_put(1)\n    x = jnp.arange(32.0)\n    f(x)\n    jax.jit(f)(x)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'))\n    def g(x):\n        return x + jax.device_put(1, jax.devices()[0])\n    with self.assertRaisesRegex(ValueError, 'got device'):\n        g(x)\n    jax.jit(g)(x)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jtu.run_on_devices('cpu', 'gpu', 'tpu')\ndef test_key_array_with_replicated_last_tile_dim(self):\n    mesh = jtu.create_mesh((2, 4), ('i', 'j'))\n\n    def f(rng):\n\n        @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P('i'), check_rep=False)\n        def g(rng):\n            return jnp.array([jax.random.normal(rng[0])])\n        return g(jax.random.split(rng, 4))\n    jax.jit(f)(jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_dce(self):\n    mesh = jtu.create_mesh((4, 2), ('i', 'j'))\n\n    def f(x, y, z):\n\n        @partial(shard_map, mesh=mesh, in_specs=(P('i', 'j'), P(None, 'i')), out_specs=(P(None, None), P(None, 'i'), P('i', 'j')))\n        def g(y, z):\n            return (jnp.sin(x), jnp.cos(z), jnp.tan(y))\n        return g(y, z)\n    x = jnp.zeros((4, 4))\n    y = jnp.zeros((8, 8))\n    z = jnp.zeros((16, 16))\n    jaxpr = jax.make_jaxpr(f)(x, y, z).jaxpr\n    self.assertLen(jaxpr.eqns, 1)\n    self.assertLen(jaxpr.eqns[0].params['jaxpr'].eqns, 3)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, True], expected_used_inputs=[True, True, True], expected_num_eqns=1 + 3, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, True, False], expected_used_inputs=[True, False, True], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, True], expected_used_inputs=[True, True, False], expected_num_eqns=1 + 2, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[True, False, False], expected_used_inputs=[True, False, False], expected_num_eqns=1 + 1, check_diff=False)\n    self.assert_dce_result(jaxpr, used_outputs=[False, True, False], expected_used_inputs=[False, False, True], expected_num_eqns=1 + 1, check_diff=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_transpose_float0(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n    s = jax.sharding.NamedSharding(mesh, P(None, 'x'))\n\n    @jax.custom_vjp\n    def f(x, _):\n        return x\n\n    def f_fwd(x, y):\n        return (x, jnp.zeros(shape=y.shape, dtype=np.int32))\n\n    def f_rev(tmp, g):\n        return (g, tmp)\n    f.defvjp(f_fwd, f_rev)\n\n    @jax.custom_vjp\n    def g(x, y):\n        return (x, y)\n\n    def g_fwd(x, y):\n        return jax.vjp(lambda x, y: (x, y), x, y)\n\n    def g_bwd(vjp_fn, result):\n        return vjp_fn(result)\n    g.defvjp(g_fwd, g_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=(P('x'), P()), out_specs=P())\n    def f_shmapped(x, y):\n        return jax.lax.psum(f(x, y).sum(), axis_name='x')\n\n    @partial(shard_map, mesh=mesh, check_rep=False, in_specs=P('x'), out_specs=(P('x'), P()))\n    def f_shmapped2(x, y):\n        return g(x, y)\n\n    def f_wrapper(x, y):\n        x, y = jax.lax.map(lambda xs: f_shmapped2(xs[0], xs[1]), (x, y))\n        return jax.lax.map(lambda xs: f_shmapped(xs[0], xs[1]), (x, y)).sum()\n\n    @partial(jax.jit, in_shardings=s, out_shardings=jax.sharding.NamedSharding(mesh, P()))\n    def example(x, y):\n        return jax.grad(f_wrapper, allow_int=True, argnums=(0, 1))(x, y)\n    x = np.zeros(shape=(8, 16), dtype=np.float32)\n    y = np.zeros(shape=(8, 16), dtype=np.int32)\n    dx, dy = example(x, y)\n    self.assertEqual(dy.dtype, jax.dtypes.float0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_custom_vjp_replication_error_message_hint(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @jax.custom_vjp\n    def f(x):\n        return jax.lax.psum(x, 'i')\n\n    def f_fwd(x):\n        return (f(x), None)\n\n    def f_bwd(_, g):\n        return (jax.lax.psum(g, 'i'),)\n    f.defvjp(f_fwd, f_bwd)\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return f(f(x))\n    y, grad = jax.value_and_grad(lambda x: g(x).sum())(jnp.ones(4))\n    self.assertAllClose(y, (jnp.ones(4) * 4).sum(), check_dtypes=False)\n    self.assertAllClose(grad, jnp.ones(4) * 4 * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_repeated_psum_allowed(self):\n    mesh = jtu.create_mesh((4,), 'i')\n\n    @partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\n    def g(x):\n        return jax.lax.psum(jax.lax.psum(x, 'i'), 'i')\n    y = g(jnp.arange(4.0))\n    self.assertAllClose(y, jnp.arange(4.0).sum(keepdims=True) * 4, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_get_check_rep(self):\n    mesh = jtu.create_mesh((2, 2), ('x', 'y'))\n\n    def f(x, reduce_along, use_jit):\n        out_spec = P(*(n for n in ('x', 'y') if n not in reduce_along))\n\n        @partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\n        def g(x):\n            result = lax.psum(x, axis_name=reduce_along)\n\n            def check_rep(result):\n                self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n                return result\n            result = check_rep(result)\n            result = jax.vmap(check_rep)(result)\n            return result\n        if use_jit:\n            return jax.jit(g)(x)\n        else:\n            return g(x)\n    for use_jit in [True, False]:\n        x = np.zeros((8, 8), dtype=np.float32)\n        f(x, reduce_along=('y',), use_jit=use_jit)\n        f(x, reduce_along=('x',), use_jit=use_jit)\n        f(x, reduce_along=('x', 'y'), use_jit=use_jit)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, sample_shmap))\n@jax.default_matmul_precision('float32')\ndef test_grads_closure(self, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        return g(*args)\n    jtu.check_grads(f, (0.2, *closed_over_args), order=2, atol=0.01, rtol=0.01)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@parameterized.named_parameters(sample(jtu.NUM_GENERATED_CASES.value, partial(sample_shmap_batched, 5)))\ndef test_vmap_closure(self, bdims, fun, mesh, jit, in_specs, out_specs, args, _):\n    mesh = self.make_mesh(mesh)\n    args = map(jnp.array, args)\n    no_sharding = [all((elt is None for elt in spec)) for spec in in_specs]\n    args, closed_over_args = partition_list(no_sharding, args)\n    in_specs, _ = partition_list(no_sharding, in_specs)\n    explicit_bdims, closed_over_bdims = partition_list(no_sharding, bdims)\n\n    def f(x, *closed_over_args):\n\n        @partial(shard_map, mesh=mesh, in_specs=(*in_specs,), out_specs=out_specs)\n        def g(*args):\n            args = [x * arg for arg in args]\n            args = merge_lists(no_sharding, args, closed_over_args)\n            return fun(*args)\n        if jit:\n            g = jax.jit(g)\n        if any((d is not None for d in explicit_bdims)):\n            return jax.vmap(g, explicit_bdims)(*args)\n        else:\n            return g(*args)\n    xs = jnp.arange(5.0, dtype='float32')\n    ans = jax.vmap(f, (0, *closed_over_bdims))(xs, *closed_over_args)\n    args_slice = args_slicer((xs, *closed_over_args), (0, *closed_over_bdims))\n    expected_slices = [f(*args_slice(i)) for i in range(5)]\n    treedef = jax.tree.structure(ans)\n    if tree_util.treedef_is_strict_leaf(treedef):\n        expected = jnp.stack(expected_slices)\n    else:\n        slices = map(jnp.stack, zip(*expected_slices))\n        expected = jax.tree.unflatten(treedef, slices)\n    tol = 0.01 if jtu.test_device_matches(['tpu']) else None\n    self.assertAllClose(ans, expected, check_dtypes=False, atol=tol, rtol=tol)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_eager_custom_jvp_basic(self):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 3.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_eager_custom_vjp_basic(self):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (3.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(foo, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    y, x_bar = jax.value_and_grad(lambda x: g(x).sum())(jnp.arange(4.0))\n    self.assertAllClose(y, (2.0 * jnp.arange(4.0)).sum())\n    self.assertAllClose(x_bar, 3.0 * jnp.ones(4), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_axis_index_eager(self):\n    mesh = jtu.create_mesh((4,), ('x',))\n\n    @partial(shard_map, mesh=mesh, in_specs=(), out_specs=P())\n    def foo():\n        val = jax.lax.psum(jax.lax.axis_index('x'), 'x')\n        return 1.0 if val > 0 else -1.0\n    out = foo()\n    self.assertEqual(out, 1.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_jvp_call(self, jit):\n\n    @jax.custom_jvp\n    def foo(x):\n        return 2.0 * x\n\n    @foo.defjvp\n    def foo_jvp(primals, tangents):\n        (x,), (x_dot,) = (primals, tangents)\n        return (foo(x), 2.0 * x_dot)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y2, y_dot = jax.jvp(g, (x,), (3 * x,))\n    self.assertAllClose(y2, 2 * x * x, check_dtypes=True)\n    self.assertAllClose(y_dot, 2 * 2 * 3 * x * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_more_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (jnp.ones_like(y_bar),)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, jnp.ones_like(x) + 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_process_custom_vjp_call_match_less_replicated(self, jit):\n\n    @jax.custom_vjp\n    def foo(x, y):\n        del y\n        return 2.0 * x\n\n    def foo_fwd(x, y):\n        return (foo(x, y), y)\n\n    def foo_bwd(y, _):\n        return (y, None)\n    foo.defvjp(foo_fwd, foo_bwd)\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x, y: foo(x, y) * y, mesh, in_specs=(P(), P('x')), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = jnp.arange(4 * 4.0)\n    z = g(x, y)\n    self.assertAllClose(z, 2 * jnp.tile(x, (4,)) * y, check_dtypes=False)\n    z_, x_bar = jax.value_and_grad(lambda x, y: g(x, y).sum())(x, y)\n    self.assertAllClose(z.sum(), z_, check_dtypes=False)\n    self.assertAllClose(x_bar, jnp.arange(16).reshape(4, 4).sum(0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_rewrite_custom_vjp_call_jaxpr(self, jit):\n\n    @jax.custom_vjp\n    def foo(x):\n        return 2.0 * x\n\n    def foo_fwd(x):\n        return (foo(x), None)\n\n    def foo_bwd(_, y_bar):\n        return (2.0 * y_bar,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def foo_scan(x):\n        y, _ = jax.lax.scan(lambda x, _: (foo(x), None), x, None, length=1)\n        return y\n    mesh = jtu.create_mesh((4,), ('x',))\n    g = shard_map(lambda x: foo_scan(x) * x, mesh, in_specs=(P('x'),), out_specs=P('x'))\n    if jit:\n        g = jax.jit(g)\n    x = jnp.arange(4.0)\n    y = g(x)\n    self.assertAllClose(y, 2 * x * x, check_dtypes=True)\n    y_, x_bar = jax.value_and_grad(lambda x: g(x).sum())(x)\n    self.assertAllClose(y_, (2 * x * x).sum(), check_dtypes=True)\n    self.assertAllClose(x_bar, 2 * 2 * x, check_dtypes=True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "@jax.jit\ndef foo(x):\n    return jnp.concatenate(x)"
  },
  {
    "test_code": "def test_identity(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def identity(x):\n        return x\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(identity, mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_all_gather(self):\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))\n    def fwd(a):\n        return (lax.all_gather(a, 'z', axis=0, tiled=True), lax.all_gather(a, ('x', 'y'), axis=-1, tiled=True))\n    c, d = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (8, 2))\n    for i, a_shard in enumerate(np.split(a, 4, axis=1)):\n        self.assertAllClose(c.addressable_data(2 * i), a_shard)\n    self.assertEqual(d.addressable_data(0).shape, (4, 8))\n    for i, a_shard in enumerate(np.split(a, 2, axis=0)):\n        self.assertAllClose(d.addressable_data(i), a_shard)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_all_gather_with_axis_index_groups(self):\n    mesh, a, _ = create_inputs(P('x', ('y', 'z')), P(None, None))\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('x', ('y', 'z')),), out_specs=P('x', ('y', 'z')))\n    def fwd(a):\n        return lax.all_gather(a, ('y', 'z'), axis_index_groups=((0, 1), (2, 3)), axis=-1, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 4))\n    for i, row_block in enumerate(np.split(a, 2, axis=0)):\n        for j, block in enumerate(np.split(row_block, 2, axis=-1)):\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j), block)\n            self.assertAllClose(c.addressable_data(4 * i + 2 * j + 1), block)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_matmul_partial(self):\n    raise unittest.SkipTest('invalid replication asserted by out_spec?')\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P('z', None))\n    def fwd(a):\n        c = jnp.matmul(a, b)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 8))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_matmul_reduce_scatter(self):\n    mesh, a, b = create_inputs(P('z', 'y'), P('y', None))\n    assert a.addressable_data(0).shape == (4, 4)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P('z', 'y'), P('y', None)), out_specs=P(('z', 'y'), None))\n    def fwd(a, b):\n        c = jnp.matmul(a, b)\n        return (lax.psum_scatter(c, 'y', scatter_dimension=0, tiled=True), lax.psum_scatter(c, ('z', 'y'), scatter_dimension=0, tiled=True))\n    expected = jnp.matmul(a, b)\n    c, d = fwd(a, b)\n    self.assertEqual(c.addressable_data(0).shape, (2, 8))\n    self.assertAllClose(expected, c)\n    self.assertEqual(d.addressable_data(0).shape, (1, 8))\n    self.assertAllClose(expected[:4] + expected[4:], d)",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 4)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_reduce_scatter_with_axis_index_groups(self):\n    axis_index_groups = ((0, 2, 4, 6), (1, 3, 5, 7))\n    mesh, a, _ = create_inputs(P(None, ('x', 'y', 'z')), P(None, None))\n    assert a.addressable_data(0).shape == (8, 1)\n\n    @jax.jit\n    @partial(shard_map, mesh=mesh, in_specs=(P(None, ('x', 'y', 'z')),), out_specs=P(None, ('x', 'y', 'z')))\n    def fwd(a):\n        return lax.psum_scatter(a, ('x', 'y', 'z'), scatter_dimension=0, axis_index_groups=axis_index_groups, tiled=True)\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (2, 1))\n    sum_of_even_columns = np.sum(a[..., axis_index_groups[0]], -1)\n    for i, sums in enumerate(np.split(sum_of_even_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i), -1), sums)\n    sum_of_odd_columns = np.sum(a[..., axis_index_groups[1]], -1)\n    for i, sums in enumerate(np.split(sum_of_odd_columns, 4, 0)):\n        self.assertAllClose(np.squeeze(c.addressable_data(2 * i + 1), -1), sums)",
    "assertions": [
      "assert a.addressable_data(0).shape == (8, 1)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  },
  {
    "test_code": "def test_custom_partitioning(self):\n    self.skip_if_custom_partitioning_not_supported()\n    mesh, a, _ = create_inputs(P('z', ('x', 'y')), P(None, None))\n    assert a.addressable_data(0).shape == (4, 2)\n\n    def partition(mesh, arg_shapes, result_shape):\n\n        def lower_fn(x):\n            return x\n        return (mesh, lower_fn, arg_shapes[0].sharding, (arg_shapes[0].sharding,))\n\n    def infer_sharding_from_operands(mesh, arg_shapes, result_shape):\n        return arg_shapes[0].sharding\n\n    def propagate_user_sharding(mesh, user_shape):\n        return user_shape.sharding\n\n    @custom_partitioning\n    def f(x):\n        return x\n    f.def_partition(infer_sharding_from_operands=infer_sharding_from_operands, partition=partition, propagate_user_sharding=propagate_user_sharding)\n\n    @jax.jit\n    def fwd(a):\n        c = shard_map(f, mesh, check_rep=False, in_specs=(P('z', ('x', 'y')),), out_specs=P('z', ('x', 'y')))(a)\n        return c\n    c = fwd(a)\n    self.assertEqual(c.addressable_data(0).shape, (4, 2))",
    "assertions": [
      "assert a.addressable_data(0).shape == (4, 2)"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/shard_map_test.py",
    "function": "def create_inputs(a_sharding, b_sharding):\n    mesh = jtu.create_mesh((2, 2, 2), ('x', 'y', 'z'))\n    b, e, f = (8, 8, 8)\n    m1 = jax.device_put(jnp.arange(b * e).reshape((b, e)), jax.sharding.NamedSharding(mesh, a_sharding))\n    m2 = jax.device_put(jnp.arange(e * f).reshape((e, f)), jax.sharding.NamedSharding(mesh, b_sharding))\n    return (mesh, m1, m2)"
  }
]