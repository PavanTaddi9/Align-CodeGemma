[
  {
    "test_code": "def test_to_pallas_key_under_vmap(self):\n    key = jax.random.key(42, impl='rbg')\n    key = jax.random.split(key, 10)\n    batched_key = plrandom.to_pallas_key(key)\n    batched_key_data = jax.random.key_data(batched_key)\n    vmapped_key = jax.vmap(plrandom.to_pallas_key)(key)\n    vmapped_key_data = jax.random.key_data(vmapped_key)\n    np.testing.assert_array_equal(batched_key_data, vmapped_key_data)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_random_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "@parameterized.parameters(((256, 256),), ((35, 113),), ((331,),))\ndef test_threefry_kernel_matches_jax_threefry_sharded(self, shape):\n    if jax.device_count() < 2:\n        self.skipTest('Need at least 2 devices')\n    num_devices = jax.device_count()\n    partition = P('x')\n    mesh = jax.make_mesh((num_devices,), ('x',))\n    sharding = jax.sharding.NamedSharding(mesh, partition)\n    with jax.threefry_partitionable(True):\n        key_jax = jax_random.split(jax_random.key(0, impl='threefry2x32'), num_devices)\n        key_pallas = jax_random.split(jax_random.key(0, impl='pallas_threefry2x32'), num_devices)\n        key_jax = jax.device_put(key_jax, sharding)\n        key_pallas = jax.device_put(key_pallas, sharding)\n        generate = shard_map.shard_map(lambda x: jax_random.bits(x[0], shape=shape), mesh=mesh, in_specs=partition, out_specs=partition)\n        jax_gen = generate(key_jax)\n        pl_gen = generate(key_pallas)\n    np.testing.assert_array_equal(jax_gen, pl_gen)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_random_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_split(self):\n    key = jax_random.key(0, impl='pallas_philox4x32')\n    key1, key2 = jax_random.split(key)\n    key_data = jax.random.key_data(key)\n    key1_data = jax.random.key_data(key1)\n    key2_data = jax.random.key_data(key2)\n    with self.assertRaises(AssertionError):\n        np.testing.assert_array_equal(key_data, key1_data)\n    with self.assertRaises(AssertionError):\n        np.testing.assert_array_equal(key_data, key2_data)\n    with self.assertRaises(AssertionError):\n        np.testing.assert_array_equal(key1_data, key2_data)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/pallas/tpu_pallas_random_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  }
]