[
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_error_with_non_callable(self):\n    with self.assertRaisesRegex(TypeError, 'callable'):\n        jax.debug.callback('this is not debug.print!')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n\n    def print_it(i, maxiter):\n        self.assertIsInstance(i, jax.Array)\n        self.assertIsInstance(maxiter, jax.Array)\n        return i == maxiter\n\n    def run(pos):\n        maxiter = 1000\n\n        def cond(v):\n            return v[0] < maxiter\n\n        def step(v):\n            i, pos = v\n            jax.debug.callback(print_it, i + 1, maxiter)\n            return (i + 1, pos + 1)\n        val = (jnp.array(0), pos)\n        val = jax.lax.while_loop(cond, step, val)\n        return val[1]\n    n_samples = 30\n    inputs = 10 * jax.random.normal(jax.random.key(42), shape=(n_samples, 128, 128))\n\n    def mean(forest):\n        norm = 1.0 / len(forest)\n        add = lambda a, b: a + b\n        m = norm * functools.reduce(add, forest)\n        return m\n    post_mean = mean(tuple((run(x) for x in inputs)))\n    jax.block_until_ready(post_mean)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def callback(index):\n    i = jnp.arange(len(devices))[index[0]]\n    return jax.vmap(random.key)(i)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f2(o, x):\n    self.assertIsInstance(o, dict)\n    self.assertIs(o['a'], obj['a'])\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f2(o, x):\n    self.assertIsInstance(o, dict)\n    self.assertIs(o['a'], obj['a'])\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "@unittest.skip(\"doesn't work yet!\")\ndef test_debug_print_in_custom_jvp_linearize(self):\n\n    @jax.custom_jvp\n    def print_tangent(x):\n        return x\n\n    @print_tangent.defjvp\n    def _(primals, tangents):\n        (x,), (t,) = (primals, tangents)\n        debug_print('x_tangent: {}', t)\n        return (x, t)\n\n    def f(x):\n        x = jnp.sin(x)\n        x = print_tangent(x)\n        return x\n    with jtu.capture_stdout() as output:\n        x = jnp.array(1.0, jnp.float32)\n        y, f_lin = jax.linearize(f, x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '')\n    with jtu.capture_stdout() as output:\n        _ = f_lin(x)\n        jax.effects_barrier()\n    expected = jnp.cos(jnp.array(1.0, jnp.float32))\n    self.assertEqual(output(), f'x_tangent: {expected}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.custom_jvp\ndef sin(x):\n    return jax.pure_callback(np.sin, x, x)"
  },
  {
    "test_code": "def test_error_with_non_callable(self):\n    with self.assertRaisesRegex(TypeError, 'callable'):\n        jax.debug.callback('this is not debug.print!')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def callback(x):\n    return jax.block_until_ready(eig(x))"
  },
  {
    "test_code": "@jtu.skip_on_flag('jax_skip_slow_tests', True)\n@jtu.run_on_devices('cpu')\ndef test_async_deadlock(self):\n\n    def print_it(i, maxiter):\n        self.assertIsInstance(i, jax.Array)\n        self.assertIsInstance(maxiter, jax.Array)\n        return i == maxiter\n\n    def run(pos):\n        maxiter = 1000\n\n        def cond(v):\n            return v[0] < maxiter\n\n        def step(v):\n            i, pos = v\n            jax.debug.callback(print_it, i + 1, maxiter)\n            return (i + 1, pos + 1)\n        val = (jnp.array(0), pos)\n        val = jax.lax.while_loop(cond, step, val)\n        return val[1]\n    n_samples = 30\n    inputs = 10 * jax.random.normal(jax.random.key(42), shape=(n_samples, 128, 128))\n\n    def mean(forest):\n        norm = 1.0 / len(forest)\n        add = lambda a, b: a + b\n        m = norm * functools.reduce(add, forest)\n        return m\n    post_mean = mean(tuple((run(x) for x in inputs)))\n    jax.block_until_ready(post_mean)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def callback(x):\n    return jax.block_until_ready(eig(x))"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f2(xs):\n    _, res = jax.lax.scan(body2, 1, xs)\n    return res"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f2(xs):\n    _, res = jax.lax.scan(body2, 1, xs)\n    return res"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f2(x):\n    res1 = exp_f1.call(x)\n    res2 = exp_f1.call(res1)\n    return jnp.cos(res2)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f2(x):\n    res1 = exp_f1.call(x)\n    res2 = exp_f1.call(res1)\n    return jnp.cos(res2)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f_(x, n):\n    if n == 0:\n        return x * 2.0\n    return jax.jit(partial(f_, n=n - 1))(x - 1)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "@unittest.skip(\"doesn't work yet!\")\ndef test_debug_print_in_custom_jvp_linearize(self):\n\n    @jax.custom_jvp\n    def print_tangent(x):\n        return x\n\n    @print_tangent.defjvp\n    def _(primals, tangents):\n        (x,), (t,) = (primals, tangents)\n        debug_print('x_tangent: {}', t)\n        return (x, t)\n\n    def f(x):\n        x = jnp.sin(x)\n        x = print_tangent(x)\n        return x\n    with jtu.capture_stdout() as output:\n        x = jnp.array(1.0, jnp.float32)\n        y, f_lin = jax.linearize(f, x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '')\n    with jtu.capture_stdout() as output:\n        _ = f_lin(x)\n        jax.effects_barrier()\n    expected = jnp.cos(jnp.array(1.0, jnp.float32))\n    self.assertEqual(output(), f'x_tangent: {expected}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.custom_vjp\ndef sin(x):\n    return jnp.sin(x)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_simple_debug_print_works_in_eager_mode(self):\n\n    def f(x):\n        debug_print('x: {}', x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_static_args(self):\n\n    @jax.jit\n    def f(arr):\n        jax.debug.print('arr {array}, dtype: {dtype}, arr {array2}', array=arr, dtype=arr.dtype, array2=arr)\n    arr = jnp.array([1, 2, 3], dtype=jnp.float32)\n    with jtu.capture_stdout() as output:\n        f(arr)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'arr [1. 2. 3.], dtype: float32, arr [1. 2. 3.]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_works_with_named_format_strings(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_multiple_debug_prints_should_print_multiple_values(self):\n\n    def f(x):\n        debug_print('x: {x}', x=x)\n        debug_print('y: {y}', y=x + 1)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\ny: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_can_stage_out_debug_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_can_stage_out_debug_print_with_formatting(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x:.2f}', x=x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2.00\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_debug_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_ordered_print_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.device_supports_buffer_donation()\ndef test_can_stage_out_prints_with_donate_argnums(self):\n\n    def f(x, y):\n        debug_print('x: {x}', x=x, ordered=True)\n        debug_print('x: {x}', x=x)\n        return x + y\n    f = jax.jit(f, donate_argnums=0)\n    with jtu.capture_stdout() as output:\n        f(2, 3)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\nx: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_can_double_stage_out_ordered_print(self):\n\n    @jax.jit\n    @jax.jit\n    def f(x):\n        debug_print('x: {x}', x=x, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'x: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_can_stage_out_ordered_print_with_pytree(self):\n\n    @jax.jit\n    def f(x):\n        struct = dict(foo=x)\n        debug_print('x: {}', struct, ordered=True)\n    with jtu.capture_stdout() as output:\n        f(np.array(2, np.int32))\n        jax.effects_barrier()\n    self.assertEqual(output(), f'x: {str(dict(foo=jnp.array(2, np.int32)))}\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_should_use_default_layout(self):\n    data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]], dtype=np.int32)\n\n    @jax.jit\n    def f(x):\n        jax.debug.print('{}', x)\n    with jtu.capture_stdout() as output:\n        f(data)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n        [[ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]\\n         [ 1  2  3  4  5  6  7  8  9 10 12 13 14]]\\n    '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_respects_numpy_printoptions(self):\n\n    def f(x):\n        with np.printoptions(precision=2, suppress=True):\n            jax.debug.print('{}', x)\n    x = np.array([1.2345, 2.3456, 1e-07])\n    with jtu.capture_stdout() as output:\n        jax.debug.print('{}', x)\n    self.assertEqual(output(), '[1.2345e+00 2.3456e+00 1.0000e-07]\\n')\n    with jtu.capture_stdout() as output:\n        f(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')\n    with jtu.capture_stdout() as output:\n        jax.jit(f)(x)\n        jax.effects_barrier()\n    self.assertEqual(output(), '[1.23 2.35 0.  ]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_batching(self):\n\n    @jax.vmap\n    def f(x):\n        debug_print('hello: {}', x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0\\nhello: 1\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_batching_with_diff_axes(self):\n\n    @functools.partial(jax.vmap, in_axes=(0, 1))\n    def f(x, y):\n        debug_print('hello: {} {}', x, y)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2), jnp.arange(2)[None])\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 0 [0]\\nhello: 1 [1]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_jvp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_jvp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_jvp(primals, tangents):\n            (x,), (t,) = (primals, tangents)\n            debug_print('goodbye: {x} {t}', x=x, t=t)\n            return (x, t)\n        g.defjvp(g_jvp)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        jax.jvp(f, (2.0,), (3.0,))\n        jax.effects_barrier()\n    self.assertEqual(output(), 'goodbye: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_debug_print_in_staged_out_custom_vjp(self):\n\n    @jax.jit\n    def f(x):\n\n        @jax.custom_vjp\n        def g(x):\n            debug_print('hello: {x}', x=x)\n            return x\n\n        def g_fwd(x):\n            debug_print('hello fwd: {x}', x=x)\n            return (x, x)\n\n        def g_bwd(x, g):\n            debug_print('hello bwd: {x} {g}', x=x, g=g)\n            return (g,)\n        g.defvjp(fwd=g_fwd, bwd=g_bwd)\n        return g(x)\n    with jtu.capture_stdout() as output:\n        f(2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        _, f_vjp = jax.vjp(f, 2.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello fwd: 2.0\\n')\n    with jtu.capture_stdout() as output:\n        f_vjp(3.0)\n        jax.effects_barrier()\n    self.assertEqual(output(), 'hello bwd: 2.0 3.0\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_scan(self, ordered):\n\n    def f(xs):\n\n        def _body(carry, x):\n            debug_print('carry: {carry}, x: {x}', carry=carry, x=x, ordered=ordered)\n            return (carry + 1, x + 1)\n        return lax.scan(_body, 2, xs)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      carry: 2, x: 0\\n      carry: 3, x: 1\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_for_loop(self, ordered):\n\n    def f(x):\n\n        def _body(i, x):\n            debug_print('i: {i}', i=i, ordered=ordered)\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.fori_loop(0, 5, _body, x)\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    expected = _format_multiline('\\n      i: 0\\n      x: 2\\n      i: 1\\n      x: 3\\n      i: 2\\n      x: 4\\n      i: 3\\n      x: 5\\n      i: 4\\n      x: 6\\n      ')\n    if ordered:\n        self.assertEqual(output(), expected)\n    else:\n        self._assertLinesEqual(output(), expected)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_body(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            return x < 10\n\n        def _body(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_while_loop_cond(self, ordered):\n\n    def f(x):\n\n        def _cond(x):\n            debug_print('x: {x}', x=x, ordered=ordered)\n            return x < 10\n\n        def _body(x):\n            return x + 1\n        return lax.while_loop(_cond, _body, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 5\\n      x: 6\\n      x: 7\\n      x: 8\\n      x: 9\\n      x: 10\\n      '))\n    with jtu.capture_stdout() as output:\n        f(10)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      x: 10\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_cond(self, ordered):\n\n    def f(x):\n\n        def true_fun(x):\n            debug_print('true: {}', x, ordered=ordered)\n            return x\n\n        def false_fun(x):\n            debug_print('false: {}', x, ordered=ordered)\n            return x\n        return lax.cond(x < 5, true_fun, false_fun, x)\n    with jtu.capture_stdout() as output:\n        f(5)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      false: 5\\n      '))\n    with jtu.capture_stdout() as output:\n        f(4)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      true: 4\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "@jtu.sample_product(ordered=[False, True])\ndef test_can_print_inside_switch(self, ordered):\n\n    def f(x):\n\n        def b1(x):\n            debug_print('b1: {}', x, ordered=ordered)\n            return x\n\n        def b2(x):\n            debug_print('b2: {}', x, ordered=ordered)\n            return x\n\n        def b3(x):\n            debug_print('b3: {}', x, ordered=ordered)\n            return x\n        return lax.switch(x, (b1, b2, b3), x)\n    with jtu.capture_stdout() as output:\n        f(0)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b1: 0\\n      '))\n    with jtu.capture_stdout() as output:\n        f(1)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b2: 1\\n      '))\n    with jtu.capture_stdout() as output:\n        f(2)\n        jax.effects_barrier()\n    self.assertEqual(output(), _format_multiline('\\n      b3: 2\\n      '))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_ordered_print_not_supported_in_pmap(self):\n\n    @jax.pmap\n    def f(x):\n        debug_print('{}', x, ordered=True)\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported in `pmap`.'):\n        f(jnp.arange(jax.local_device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n        debug_print('hello: {}', x, ordered=False)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(jax.local_device_count()))\n        jax.effects_barrier()\n    lines = [f'hello: {i}\\n' for i in range(jax.local_device_count())]\n    self._assertLinesEqual(output(), ''.join(lines))\n\n    @jax.pmap\n    def f2(x):\n        debug_print('hello: {}', x)\n        debug_print('hello: {}', x + 2)\n    with jtu.capture_stdout() as output:\n        f2(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 3\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_unordered_print_with_pjit(self):\n\n    def f(x):\n        debug_print('{}', x, ordered=False)\n        return x\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n')\n\n    def f2(x):\n        y = x.dot(x)\n        debug_print('{}', y, ordered=False)\n        return y\n    f2 = pjit.pjit(f2, in_shardings=spec, out_shardings=out_spec)\n    with jax.sharding.Mesh(np.array(jax.devices()), ['dev']):\n        with jtu.capture_stdout() as output:\n            f2(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '140\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_unordered_print_of_pjit_of_while(self):\n\n    def f(x):\n\n        def cond(carry):\n            i, *_ = carry\n            return i < 5\n\n        def body(carry):\n            i, x = carry\n            debug_print('{}', x, ordered=False)\n            x = x + 1\n            return (i + 1, x)\n        return lax.while_loop(cond, body, (0, x))[1]\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=spec)\n    with mesh:\n        with jtu.capture_stdout() as output:\n            f(np.arange(8, dtype=jnp.int32))\n            jax.effects_barrier()\n        self.assertEqual(output(), '[0 1 2 3 4 5 6 7]\\n[1 2 3 4 5 6 7 8]\\n[2 3 4 5 6 7 8 9]\\n[ 3  4  5  6  7  8  9 10]\\n[ 4  5  6  7  8  9 10 11]\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_unordered_print_works_in_pmap_of_while(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.pmap\n    def f(x):\n\n        def cond(x):\n            return x < 3\n\n        def body(x):\n            debug_print('hello: {}', x, ordered=False)\n            return x + 1\n        return lax.while_loop(cond, body, x)\n    with jtu.capture_stdout() as output:\n        f(jnp.arange(2))\n        jax.effects_barrier()\n    self._assertLinesEqual(output(), 'hello: 0\\nhello: 1\\nhello: 2\\nhello: 1\\nhello: 2\\n')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_incorrectly_formatted_string(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x)\n        return x\n    with self.assertRaises(KeyError):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {}', x=x)\n        return x\n    with self.assertRaises(IndexError):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_format_string_errors_with_unused_args(self):\n\n    @jax.jit\n    def f(x):\n        debug_print('hello: {x}', x=x, y=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused keyword arguments'):\n        f(jnp.arange(2))\n        jax.effects_barrier()\n\n    @jax.jit\n    def g(x):\n        debug_print('hello', x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'Unused positional arguments'):\n        g(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_accidental_fstring(self):\n\n    @jax.jit\n    def f(x):\n        debug_print(f'hello: {x}', x=x)\n        return x\n    with self.assertRaisesRegex(ValueError, 'You may be passing an f-string'):\n        f(jnp.arange(2))\n        jax.effects_barrier()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_pjit(self):\n    if jtu.is_cloud_tpu():\n        raise unittest.SkipTest('Inspect sharding is not supported on libtpu.')\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, len(jax.devices()))\n\n    def f(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    mesh = jax.sharding.Mesh(np.array(jax.devices()), ['dev'])\n    spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('dev'))\n    out_spec = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec())\n    f = pjit.pjit(f, in_shardings=spec, out_shardings=out_spec)\n    with mesh:\n        f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_inspect_sharding_is_called_in_jit(self):\n    is_called = False\n\n    def _cb(sd):\n        nonlocal is_called\n        is_called = True\n        self.assertIsInstance(sd, jax.sharding.Sharding)\n        self.assertLen(sd.device_set, 1)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    f(np.arange(8, dtype=jnp.int32))\n    self.assertTrue(is_called)\n    is_called = False\n    f = jax.jit(jax.grad(lambda x: f_(x).sum()))\n    f(np.arange(8, dtype=jnp.float32))\n    self.assertTrue(is_called)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_inspect_sharding_3d_jit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = jax.jit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_inspect_sharding_3d_pjit(self):\n\n    def _cb(sd):\n        self.assertIsInstance(sd, jax.sharding.NamedSharding)\n        self.assertLen(sd.device_set, 2)\n\n    def f_(x):\n        debugging.inspect_array_sharding(x, callback=_cb)\n        return jnp.square(x)\n    f = pjit.pjit(f_)\n    mesh = jtu.create_mesh((2,), 'x')\n    s = jax.sharding.NamedSharding(mesh, jax.sharding.PartitionSpec('x'))\n    arr = jax.device_put(np.arange(8).reshape(2, 2, 2), s)\n    with mesh:\n        f(arr)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/debugging_primitives_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  }
]