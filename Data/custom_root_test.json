[
  {
    "test_code": "@parameterized.named_parameters({'testcase_name': 'binary_search', 'solve_method': binary_search}, {'testcase_name': 'newton_raphson', 'solve_method': newton_raphson})\ndef test_custom_root_scalar(self, solve_method):\n\n    def scalar_solve(f, y):\n        return y / f(1.0)\n\n    def sqrt_cubed(x, tangent_solve=scalar_solve):\n        f = lambda y: y ** 2 - x ** 3\n        return lax.custom_root(f, 1.0, solve_method, tangent_solve)\n    value, grad = jax.value_and_grad(sqrt_cubed)(5.0)\n    self.assertAllClose(value, 5 ** 1.5, check_dtypes=False, rtol=1e-06)\n    rtol = 5e-06 if jtu.test_device_matches(['tpu']) else 1e-07\n    self.assertAllClose(grad, jax.grad(pow)(5.0, 1.5), check_dtypes=False, rtol=rtol)\n    jtu.check_grads(sqrt_cubed, (5.0,), order=2, rtol={jnp.float32: 0.01, jnp.float64: 0.001})\n    inputs = jnp.array([4.0, 5.0])\n    results = jax.vmap(sqrt_cubed)(inputs)\n    self.assertAllClose(results, inputs ** 1.5, check_dtypes=False, atol={jnp.float32: 0.001, jnp.float64: 1e-06}, rtol={jnp.float32: 0.001, jnp.float64: 1e-06})\n    results = jax.jit(sqrt_cubed)(5.0)\n    self.assertAllClose(results, 5.0 ** 1.5, check_dtypes=False, rtol={np.float64: 1e-07})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/custom_root_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_custom_root_with_aux(self):\n\n    def root_aux(a, b):\n        f = lambda x: high_precision_dot(a, x) - b\n        factors = jsp.linalg.cho_factor(a)\n        cho_solve = lambda f, b: (jsp.linalg.cho_solve(factors, b), orig_aux)\n\n        def pos_def_solve(g, b):\n            cho_solve_noaux = lambda f, b: cho_solve(f, b)[0]\n            return lax.custom_linear_solve(g, b, cho_solve_noaux, symmetric=True)\n        return lax.custom_root(f, b, cho_solve, pos_def_solve, has_aux=True)\n    orig_aux = {'converged': np.array(1.0), 'nfev': np.array(12345.0), 'grad': np.array([1.0, 2.0, 3.0])}\n    rng = self.rng()\n    a = rng.randn(2, 2)\n    b = rng.randn(2)\n    actual, actual_aux = root_aux(high_precision_dot(a, a.T), b)\n    actual_jit, actual_jit_aux = jax.jit(root_aux)(high_precision_dot(a, a.T), b)\n    expected = jnp.linalg.solve(high_precision_dot(a, a.T), b)\n    self.assertAllClose(expected, actual)\n    self.assertAllClose(expected, actual_jit)\n    jtu.check_eq(actual_jit_aux, orig_aux)\n    jtu.check_grads(lambda x, y: root_aux(high_precision_dot(x, x.T), y), (a, b), order=2, rtol={jnp.float32: 0.01, np.float64: 3e-05})\n    fwd = jax.jacfwd(lambda x, y: root_aux(high_precision_dot(x, x.T), y), argnums=(0, 1))\n    expected_fwd = jax.jacfwd(lambda x, y: jnp.linalg.solve(high_precision_dot(x, x.T), y), argnums=(0, 1))\n    fwd_val, fwd_aux = fwd(a, b)\n    expected_fwd_val = expected_fwd(a, b)\n    self.assertAllClose(fwd_val, expected_fwd_val, rtol={np.float32: 5e-06, np.float64: 5e-12})\n    jtu.check_close(fwd_aux, jax.tree.map(jnp.zeros_like, fwd_aux))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/custom_root_test.py",
    "function": "@jax.jit\n@partial(shard_map, mesh=mesh, in_specs=(P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None), P(axis_name, None)), out_specs=P(axis_name), check_rep=False)\ndef fwd(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes):\n    operand = operand.reshape(operand.shape[1:])\n    output = output.reshape(output.shape[1:])\n    input_offsets = input_offsets.reshape(input_offsets.shape[1:])\n    send_sizes = send_sizes.reshape(send_sizes.shape[1:])\n    output_offsets = output_offsets.reshape(output_offsets.shape[1:])\n    recv_sizes = recv_sizes.reshape(recv_sizes.shape[1:])\n    return lax.ragged_all_to_all(operand, output, input_offsets, send_sizes, output_offsets, recv_sizes, axis_name=axis_name, axis_index_groups=axis_index_groups)"
  },
  {
    "test_code": "@parameterized.named_parameters({'testcase_name': 'binary_search', 'solve_method': binary_search}, {'testcase_name': 'newton_raphson', 'solve_method': newton_raphson})\ndef test_custom_root_scalar(self, solve_method):\n\n    def scalar_solve(f, y):\n        return y / f(1.0)\n\n    def sqrt_cubed(x, tangent_solve=scalar_solve):\n        f = lambda y: y ** 2 - x ** 3\n        return lax.custom_root(f, 1.0, solve_method, tangent_solve)\n    value, grad = jax.value_and_grad(sqrt_cubed)(5.0)\n    self.assertAllClose(value, 5 ** 1.5, check_dtypes=False, rtol=1e-06)\n    rtol = 5e-06 if jtu.test_device_matches(['tpu']) else 1e-07\n    self.assertAllClose(grad, jax.grad(pow)(5.0, 1.5), check_dtypes=False, rtol=rtol)\n    jtu.check_grads(sqrt_cubed, (5.0,), order=2, rtol={jnp.float32: 0.01, jnp.float64: 0.001})\n    inputs = jnp.array([4.0, 5.0])\n    results = jax.vmap(sqrt_cubed)(inputs)\n    self.assertAllClose(results, inputs ** 1.5, check_dtypes=False, atol={jnp.float32: 0.001, jnp.float64: 1e-06}, rtol={jnp.float32: 0.001, jnp.float64: 1e-06})\n    results = jax.jit(sqrt_cubed)(5.0)\n    self.assertAllClose(results, 5.0 ** 1.5, check_dtypes=False, rtol={np.float64: 1e-07})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/custom_root_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@parameterized.named_parameters({'testcase_name': 'binary_search', 'solve_method': binary_search}, {'testcase_name': 'newton_raphson', 'solve_method': newton_raphson})\ndef test_custom_root_scalar(self, solve_method):\n\n    def scalar_solve(f, y):\n        return y / f(1.0)\n\n    def sqrt_cubed(x, tangent_solve=scalar_solve):\n        f = lambda y: y ** 2 - x ** 3\n        return lax.custom_root(f, 1.0, solve_method, tangent_solve)\n    value, grad = jax.value_and_grad(sqrt_cubed)(5.0)\n    self.assertAllClose(value, 5 ** 1.5, check_dtypes=False, rtol=1e-06)\n    rtol = 5e-06 if jtu.test_device_matches(['tpu']) else 1e-07\n    self.assertAllClose(grad, jax.grad(pow)(5.0, 1.5), check_dtypes=False, rtol=rtol)\n    jtu.check_grads(sqrt_cubed, (5.0,), order=2, rtol={jnp.float32: 0.01, jnp.float64: 0.001})\n    inputs = jnp.array([4.0, 5.0])\n    results = jax.vmap(sqrt_cubed)(inputs)\n    self.assertAllClose(results, inputs ** 1.5, check_dtypes=False, atol={jnp.float32: 0.001, jnp.float64: 1e-06}, rtol={jnp.float32: 0.001, jnp.float64: 1e-06})\n    results = jax.jit(sqrt_cubed)(5.0)\n    self.assertAllClose(results, 5.0 ** 1.5, check_dtypes=False, rtol={np.float64: 1e-07})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/custom_root_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  }
]