[
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cond_both_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, jax.random.normal, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_one_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, lambda k: 1.0, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_cond_neither_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, lambda k: 0.0, lambda k: 1.0, key)\n        assert_unconsumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_reuse_after_cond(self):\n\n    def f_good(key, condition):\n        return jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n    key = jax.random.key(0)\n    self.check_key_reuse(f_good, key, True)\n    self.check_key_reuse(f_good, key, False)\n\n    def f_bad(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad, key, True)\n\n    def f_bad_2(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, lambda key: 1.0, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad_2, key, True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_simple_scan(self):\n\n    def f_good(key):\n\n        def body_fun(key, _):\n            key, subkey = jax.random.split(key)\n            return (key, jax.random.bits(subkey))\n        return jax.lax.scan(body_fun, key, xs=jnp.arange(10))\n    self.check_key_reuse(f_good, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_sink_on_consts(self):\n\n    def f(key):\n\n        def body_fun(carry, _):\n            return (carry, jax.random.uniform(key))\n        return jax.lax.scan(body_fun, None, xs=jnp.arange(10))\n    with self.assertRaisesRegex(KeyReuseError, 'scan body function leads to key reuse'):\n        self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_reuse_in_body(self):\n\n    def f_bad(key):\n\n        def body_fun(key, _):\n            return (key, jax.random.bits(key))\n        return jax.lax.scan(body_fun, key, xs=jnp.arange(10))\n    with self.assertRaisesRegex(KeyReuseError, 'scan body function leads to key reuse'):\n        self.check_key_reuse(f_bad, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_consume_one(self):\n\n    def f_scan_over_keys(*keys):\n\n        def body_func(keys, x):\n            return (tuple(jax.random.split(keys[0])), x)\n        return jax.lax.scan(body_func, keys, xs=jnp.arange(10))\n    self.check_key_reuse(f_scan_over_keys, jax.random.key(0), jax.random.key(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_split(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        key2 = jax.random.split(key)\n        assert_unconsumed(key2)\n        assert_consumed(key)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_concatenate(self):\n\n    def f(key1, key2):\n        assert_unconsumed(key1)\n        assert_unconsumed(key2)\n        keys = jax.lax.concatenate([key1, key2], dimension=0)\n        assert_consumed(key1)\n        assert_consumed(key2)\n        assert_unconsumed(keys)\n    key1 = jax.random.split(jax.random.key(0))\n    key2 = jax.random.split(jax.random.key(1))\n    self.check_key_reuse(f, key1, key2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_slice(self):\n\n    def f(keys):\n        assert_unconsumed(keys)\n        assert_unconsumed(keys[0])\n        assert_consumed(keys, np.array([True, False]))\n        assert_unconsumed(keys[1])\n        assert_consumed(keys, np.array([True, True]))\n    self.check_key_reuse(f, jax.random.split(jax.random.key(0)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_reuse_after_split(self):\n\n    def f_good():\n        key = jax.random.key(0)\n        key1, key2 = jax.random.split(key)\n        return jax.random.uniform(key1) + jax.random.uniform(key2)\n    self.check_key_reuse(f_good)\n\n    def f_bad():\n        key = jax.random.key(0)\n        _ = jax.random.split(key)\n        return jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad)\n\n    def f_bad_2():\n        key = jax.random.key(0)\n        _ = jax.random.split(key)\n        key1, _ = jax.random.split(key)\n        return jax.random.uniform(key1)\n    with self.assertRaisesRegex(KeyReuseError, self.random_split_error):\n        self.check_key_reuse(f_bad_2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_reuse_after_squeeze(self):\n\n    def f():\n        key = jax.random.split(jax.random.key(0), 1)\n        key2 = jax.lax.squeeze(key, (0,))\n        return jax.random.bits(key.squeeze()) + jax.random.bits(key2)\n    with self.assertRaisesRegex(KeyReuseError, self.generic_error):\n        self.check_key_reuse(f)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_simple_scan(self):\n\n    def f_good(key):\n\n        def body_fun(key, _):\n            key, subkey = jax.random.split(key)\n            return (key, jax.random.bits(subkey))\n        return jax.lax.scan(body_fun, key, xs=jnp.arange(10))\n    self.check_key_reuse(f_good, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_scan_good_over_keys(self):\n\n    def f_scan_over_keys(key):\n        keys = jax.random.split(key, 5)\n        return jax.lax.map(jax.random.bits, keys)\n    self.check_key_reuse(f_scan_over_keys, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_scan_consume_one(self):\n\n    def f_scan_over_keys(*keys):\n\n        def body_func(keys, x):\n            return (tuple(jax.random.split(keys[0])), x)\n        return jax.lax.scan(body_func, keys, xs=jnp.arange(10))\n    self.check_key_reuse(f_scan_over_keys, jax.random.key(0), jax.random.key(1))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_while_simple(self):\n\n    def f(seed):\n        key = jax.random.key(seed)\n\n        def cond_fun(carry):\n            return carry[1] < 10\n\n        def body_fun(carry):\n            key, subkey = jax.random.split(carry[0])\n            return (key, carry[1] + jax.random.uniform(subkey))\n        return jax.lax.while_loop(cond_fun, body_fun, (key, 0))\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def split(self) -> jax.Array:\n    key = jax_getattr(self, 'key')\n    new_key, returned_key = jax.random.split(key)\n    jax_setattr(self, 'key', new_key)\n    return returned_key"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_cond_both_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, jax.random.normal, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_one_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, lambda k: 1.0, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_cond_neither_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, lambda k: 0.0, lambda k: 1.0, key)\n        assert_unconsumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_reuse_after_cond(self):\n\n    def f_good(key, condition):\n        return jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n    key = jax.random.key(0)\n    self.check_key_reuse(f_good, key, True)\n    self.check_key_reuse(f_good, key, False)\n\n    def f_bad(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad, key, True)\n\n    def f_bad_2(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, lambda key: 1.0, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad_2, key, True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cond_both_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, jax.random.normal, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_one_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, lambda k: 1.0, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_cond_neither_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, lambda k: 0.0, lambda k: 1.0, key)\n        assert_unconsumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_reuse_after_cond(self):\n\n    def f_good(key, condition):\n        return jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n    key = jax.random.key(0)\n    self.check_key_reuse(f_good, key, True)\n    self.check_key_reuse(f_good, key, False)\n\n    def f_bad(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad, key, True)\n\n    def f_bad_2(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, lambda key: 1.0, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad_2, key, True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_cond_both_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, jax.random.normal, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_one_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, lambda k: 1.0, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_cond_neither_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, lambda k: 0.0, lambda k: 1.0, key)\n        assert_unconsumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_reuse_after_cond(self):\n\n    def f_good(key, condition):\n        return jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n    key = jax.random.key(0)\n    self.check_key_reuse(f_good, key, True)\n    self.check_key_reuse(f_good, key, False)\n\n    def f_bad(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad, key, True)\n\n    def f_bad_2(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, lambda key: 1.0, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad_2, key, True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_cond_both_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, jax.random.normal, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_cond_one_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, jax.random.uniform, lambda k: 1.0, key)\n        assert_consumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_cond_neither_consumed(self):\n\n    @jax.jit\n    def f(flag, key):\n        assert_unconsumed(key)\n        _ = jax.lax.cond(flag, lambda k: 0.0, lambda k: 1.0, key)\n        assert_unconsumed(key)\n    self.check_key_reuse(f, True, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_reuse_after_cond(self):\n\n    def f_good(key, condition):\n        return jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n    key = jax.random.key(0)\n    self.check_key_reuse(f_good, key, True)\n    self.check_key_reuse(f_good, key, False)\n\n    def f_bad(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, jax.random.normal, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad, key, True)\n\n    def f_bad_2(key, condition):\n        r1 = jax.lax.cond(condition, jax.random.uniform, lambda key: 1.0, key)\n        return r1 + jax.random.uniform(key)\n    with self.assertRaisesRegex(KeyReuseError, self.pjit_error):\n        self.check_key_reuse(f_bad_2, key, True)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(_, y):\n    input_effect(y, index=0)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef g(x):\n    return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@checkify.checkify\ndef f():\n    checkify.check(x > 0, 'must be positive!')\n    return jnp.log(x)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    branch = jax.named_call(lambda x: x)\n    out = jax.lax.cond(True, branch, branch, x)\n    return out"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(z):\n    y = odeint(dz_dt, z, jnp.arange(10.0))\n    return jnp.sum(y)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def g(x):\n    y0_arr = jnp.array([[x, 0.1], [x, 0.2]])\n    t = jnp.array([0.0, 5.0])\n    y = jax.vmap(lambda y0: odeint(dx_dt, y0, t))(y0_arr)\n    return y[:, -1].sum()"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    return x.at[1].apply(jax.numpy.sin)"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.jit\ndef f(x):\n    bits = prng.threefry_random_bits(jnp.array([0, 0], dtype='uint32'), 32, x.shape)\n    return bits + x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, P('x')), out_shardings=NamedSharding(mesh, P('x')))\ndef f(x, y):\n    z = x @ y\n    return z @ y"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "def f(x):\n    debugging.inspect_array_sharding(x, callback=_cb)\n    return jnp.square(x)"
  },
  {
    "test_code": "def test_jit_propagates_consumption_bit(self):\n\n    def f(key):\n        assert_unconsumed(key)\n        g = jax.jit(lambda: key)\n        key2 = g()\n        assert_unconsumed(key)\n        assert_unconsumed(key2)\n        consume(key)\n        assert_consumed(key)\n        assert_consumed(key2)\n    self.check_key_reuse(f, jax.random.key(0))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.custom_vjp\ndef g(x):\n    debug_print('hello: {x}', x=x)\n    return x"
  },
  {
    "test_code": "def test_pjit_consumed_input(self):\n\n    @jax.jit\n    def g(key, x):\n        return x\n\n    def f(seed):\n        key = jax.random.key(seed)\n        x = jax.random.bits(key)\n        return g(key, x)\n    self.check_key_reuse(f, 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@jax.custom_vjp\ndef g(x):\n    debug_print('hello: {x}', x=x)\n    return x"
  },
  {
    "test_code": "def test_closed_over_key_reuse_jit(self):\n    key = jax.random.key(0)\n\n    @jax.jit\n    def f():\n        return jax.random.uniform(key)\n    _ = f()\n    with self.assertRaisesRegex(KeyReuseError, self.jit_msg):\n        _ = f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  },
  {
    "test_code": "def test_key_reuse_within_jit(self):\n\n    @jax.jit\n    def f():\n        key = jax.random.key(0)\n        return jax.random.bits(key) + jax.random.bits(key)\n    with self.assertRaisesRegex(KeyReuseError, self.traced_bits_msg):\n        f()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/key_reuse_test.py",
    "function": "@partial(jax.jit, inline=True)\ndef f(x):\n    return lax.add(x, 3)"
  }
]