[
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_effects_disallowed_in_cond(self):\n\n    def f1(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n\n        def false_fun(x):\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f1)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, {while_effect})\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, set())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp2(self):\n\n    @jax.custom_jvp\n    def print_tangents(x):\n        return x\n\n    @print_tangents.defjvp\n    def foo_jvp(primals, tangents):\n        x, = primals\n        t, = tangents\n        t, = effect_p.bind(t, effect=while_effect)\n        return (x, t)\n\n    def f(x):\n\n        def true_fun(x):\n            return print_tangents(x)\n\n        def false_fun(x):\n            return print_tangents(x)\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, set())\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, {while_effect})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_cond(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(x):\n\n            def true_fun(x):\n                input_effect(x, c, index=index)\n                return x\n\n            def false_fun(x):\n                return x\n            lax.cond(False, true_fun, false_fun, x)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    it, _, fx, _ = state\n    return (jnp.max(jnp.abs(fx)) > tol) & (it < max_it)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_effects_disallowed_in_scan(self):\n\n    def f(x):\n\n        def body(carry, x):\n            effect_p.bind(effect=foo_effect)\n            return (carry, x)\n        return lax.scan(body, x, jnp.arange(4))\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_scan(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(xs, z):\n\n            def body(z, x):\n                input_effect(x, z, c, index=index)\n                return (z, x)\n            lax.scan(body, z, xs)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(jnp.arange(8), 0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(jnp.arange(8), 0)\n    self.assertIn(InputEffect(2), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(2))(jnp.arange(8), 0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_scan_with_dce(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(xs, z):\n\n            def body(z, x):\n                input_effect(x, z, c, index=index)\n                return (z, x)\n            lax.scan(body, z, xs)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(jnp.arange(8), 0)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr.jaxpr, [])\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(jnp.arange(8), 0)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr.jaxpr, [])\n    self.assertIn(InputEffect(2), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(2))(jnp.arange(8), 0)\n    jaxpr, _ = pe.dce_jaxpr(jaxpr.jaxpr, [])\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_core_call_primitive_inherits_effects(self):\n\n    def f(x):\n\n        def f_(x):\n            effect_p.bind(effect=foo_effect)\n            effect_p.bind(effect=bar_effect)\n            return [x]\n        dbg = api_util.debug_info('test', f_, (2.0,), {})\n        return core.call(lu.wrap_init(f_, debug_info=dbg), x)[0]\n    jaxpr = jax.make_jaxpr(f)(2.0)\n    self.assertIn(foo_effect, jaxpr.jaxpr.effects)\n    self.assertIn(bar_effect, jaxpr.jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def call(platform, x):\n    target_name = dict(cpu='lapack_sgeqrf_ffi', rocm='hipsolver_geqrf_ffi', cuda='cusolver_geqrf_ffi')[platform]\n    f = jex.ffi.ffi_call if _use_extend else jax.ffi.ffi_call\n    return f(target_name, output_types, input_output_aliases={0: 0}, input_layouts=[x_major_to_minor], output_layouts=[x_major_to_minor, None], **kwargs)(x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n    (thing_, attr_, tangent_), = attr_tangents\n    self.assertIs(thing, thing_)\n    self.assertEqual(attr_, 'x')\n    return (jax_getattr(thing, 'x'), tangent_)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@pjit\ndef g(y):\n    return jnp.sin(y)"
  },
  {
    "test_code": "def test_effects_disallowed_in_cond(self):\n\n    def f1(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n\n        def false_fun(x):\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f1)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, {while_effect})\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, set())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp2(self):\n\n    @jax.custom_jvp\n    def print_tangents(x):\n        return x\n\n    @print_tangents.defjvp\n    def foo_jvp(primals, tangents):\n        x, = primals\n        t, = tangents\n        t, = effect_p.bind(t, effect=while_effect)\n        return (x, t)\n\n    def f(x):\n\n        def true_fun(x):\n            return print_tangents(x)\n\n        def false_fun(x):\n            return print_tangents(x)\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, set())\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, {while_effect})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_cond(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(x):\n\n            def true_fun(x):\n                input_effect(x, c, index=index)\n                return x\n\n            def false_fun(x):\n                return x\n            lax.cond(False, true_fun, false_fun, x)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.named_scope('bar_cond')\ndef cond(x):\n    return x < 5.0"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.remat\ndef g(x):\n    jax.jit(lambda: 0 if jnp.add(1, 1) else 0)()\n    return lax.sin(x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jnp.vectorize, excluded={1})\ndef f(x, y):\n    assert x.ndim == 0\n    assert y == 'foo'\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef f(x, y):\n    return x * y"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.pmap\ndef g(z):\n    return f(z, z + 77)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef f(x, y):\n    return jax.vmap(shard_alike, in_axes=(0, 1))(x, y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    z = x * 2\n    return shard_alike(x, z)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    return random.uniform(self.make_key(3), (308000000, 128), dtype=jnp.bfloat16)"
  },
  {
    "test_code": "def test_effects_disallowed_in_cond(self):\n\n    def f1(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n\n        def false_fun(x):\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f1)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, {while_effect})\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, set())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp2(self):\n\n    @jax.custom_jvp\n    def print_tangents(x):\n        return x\n\n    @print_tangents.defjvp\n    def foo_jvp(primals, tangents):\n        x, = primals\n        t, = tangents\n        t, = effect_p.bind(t, effect=while_effect)\n        return (x, t)\n\n    def f(x):\n\n        def true_fun(x):\n            return print_tangents(x)\n\n        def false_fun(x):\n            return print_tangents(x)\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, set())\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, {while_effect})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_cond(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(x):\n\n            def true_fun(x):\n                input_effect(x, c, index=index)\n                return x\n\n            def false_fun(x):\n                return x\n            lax.cond(False, true_fun, false_fun, x)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jnp.linalg.norm(matvec(x) - b) > tolerance"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.custom_jvp\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    return jax.lax.convert_element_type(x, FooTy())"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@staticmethod\ndef add(dt, x, y):\n    fromscale = partial(jax.lax.convert_element_type, new_dtype=dt.float_dtype)\n    toscale = partial(jax.lax.convert_element_type, new_dtype=dt)\n    return toscale(jax.lax.max(fromscale(x), fromscale(y)))"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    y = x * jnp.arange(3.0).reshape((1, 3))\n    return jnp.take_along_axis(y, idx, -1).sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    if x > 0.0:\n        return x * 2\n    else:\n        return x + 2"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('i'), out_specs=P())\ndef f(x):\n    return jax.lax.psum(((w * x) ** 2).sum(), 'i')"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(shard_map, mesh=mesh, in_specs=P('x', 'y'), out_specs=out_spec)\ndef g(x):\n    result = lax.psum(x, axis_name=reduce_along)\n\n    def check_rep(result):\n        self.assertEqual(jax.experimental.shard_map.get_replication(result), set(reduce_along))\n        return result\n    result = check_rep(result)\n    result = jax.vmap(check_rep)(result)\n    return result"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(seed):\n    key = jax.random.key(seed)\n    return jax.random.uniform(key) + jax.random.normal(key)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x_ref):\n    ones = jnp.ones_like(x_ref)[slc]\n    ref_primitives.ref_addupdate(x_ref, slc, ones)\n    x1 = ref_primitives.ref_get(x_ref, slc)\n    x2 = x1 + ones\n    ref_primitives.ref_set(x_ref, slc, x2)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(self, ys):\n    return lax.fori_loop(0, 10, loop_body, jnp.ones(4, np.float32))"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(x):\n    return jax.pure_callback(lambda x: x, x, x)"
  },
  {
    "test_code": "def test_effects_disallowed_in_cond(self):\n\n    def f1(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n\n        def false_fun(x):\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f1)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, {while_effect})\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, set())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp2(self):\n\n    @jax.custom_jvp\n    def print_tangents(x):\n        return x\n\n    @print_tangents.defjvp\n    def foo_jvp(primals, tangents):\n        x, = primals\n        t, = tangents\n        t, = effect_p.bind(t, effect=while_effect)\n        return (x, t)\n\n    def f(x):\n\n        def true_fun(x):\n            return print_tangents(x)\n\n        def false_fun(x):\n            return print_tangents(x)\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, set())\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, {while_effect})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_cond(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(x):\n\n            def true_fun(x):\n                input_effect(x, c, index=index)\n                return x\n\n            def false_fun(x):\n                return x\n            lax.cond(False, true_fun, false_fun, x)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(x):\n    return jax.pure_callback(_cond_callback, jax.ShapeDtypeStruct((), np.bool_), x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(hx, _):\n    hx = jax.nn.sigmoid(hx + a)\n    return (hx, None)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x):\n    u, s, v = jnp.linalg.svd(a + x * b, full_matrices=full_matrices, compute_uv=compute_uv)\n    vdiag = jnp.vectorize(jnp.diag, signature='(k)->(k,k)')\n    return jnp.matmul(jnp.matmul(u, vdiag(s).astype(u.dtype)), v).real"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(a, b):\n    an, ai = a\n    bn, bi = b\n    which = an >= bn\n    return (jnp.where(which, an, bn), jnp.where(which, ai, bi))"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.profiler.annotate_function\ndef f(x, *, name):\n    return x + 2 * len(name)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.profiler.annotate_function, name='aname')\ndef g(x):\n    return x + 2"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, out_shardings=out_layout, donate_argnums=0)\ndef f(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, donate_argnums=0, out_shardings=Layout(DLL.AUTO))\ndef g(x):\n    return x * 2"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(z):\n    x_re = jnp.concatenate([jnp.real(z), jnp.imag(z)])\n    return f_re(x_re)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@run_state\ndef f(x_ref):\n    x = x_ref[...]\n\n    def _body(ref):\n        ref[...] = jnp.sin(ref[...])\n    x = run_state(_body)(x)\n    x_ref[...] = x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g():\n    x = x_ref[...] * y_ref[...]\n    y_ref[...] = x * 2\n    x_ref[...] = y_ref[...] + x_ref[...]"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(new_checkpoint, policy=policy)\ndef f(x):\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.einsum('ij,jk->ik', x, x, precision=lax.Precision.HIGHEST)\n    x = jnp.sin(x)\n    x = jnp.sum(x)\n    return x"
  },
  {
    "test_code": "def test_effects_disallowed_in_cond(self):\n\n    def f1(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n\n        def false_fun(x):\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f1)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, {while_effect})\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, set())",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_jvp2(self):\n\n    @jax.custom_jvp\n    def print_tangents(x):\n        return x\n\n    @print_tangents.defjvp\n    def foo_jvp(primals, tangents):\n        x, = primals\n        t, = tangents\n        t, = effect_p.bind(t, effect=while_effect)\n        return (x, t)\n\n    def f(x):\n\n        def true_fun(x):\n            return print_tangents(x)\n\n        def false_fun(x):\n            return print_tangents(x)\n        return lax.cond(True, true_fun, false_fun, x)\n    primal_jaxpr = jax.make_jaxpr(lambda x: jax.linearize(f, x)[0])(2.0)\n    self.assertEqual(primal_jaxpr.effects, set())\n    _, f_lin = jax.linearize(f, 2.0)\n    lin_jaxpr = f_lin.func.fun.args[0]\n    self.assertEqual(lin_jaxpr.effects, {while_effect})",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_jaxpr_input_effect_is_tracked_through_cond(self):\n    c = np.ones(2)\n\n    def make_fun(index):\n\n        def f(x):\n\n            def true_fun(x):\n                input_effect(x, c, index=index)\n                return x\n\n            def false_fun(x):\n                return x\n            lax.cond(False, true_fun, false_fun, x)\n        return f\n    jaxpr = jax.make_jaxpr(make_fun(0))(0)\n    self.assertIn(InputEffect(1), jaxpr.effects)\n    jaxpr = jax.make_jaxpr(make_fun(1))(0)\n    self.assertIn(InputEffect(0), jaxpr.effects)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def cond(state):\n    idx, x, _ = state\n    chunk = jax.lax.dynamic_slice_in_dim(x, idx * chunk_size, chunk_size)\n    return (idx * chunk_size < x.shape[0]) & jnp.any(chunk > 0)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(ys, _):\n    y, _ = ys\n    y = checkpoint_name(jnp.sin(y), 'y')\n    z = checkpoint_name(jnp.sin(y), 'z')\n    z = jax.lax.with_sharding_constraint(z, s)\n    z = z.T\n    w = checkpoint_name(jnp.sin(z), 'w')\n    return ((w.T, jnp.sum(w)), None)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnames=['c'])\ndef f(x, *, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@functools.partial(jax.jit, static_argnums=[1])\ndef g(x, c):\n    return c * jnp.sin(x)"
  },
  {
    "test_code": "def test_can_lower_lowerable_effect(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    f.lower(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_cannot_lower_unlowerable_effect(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=baz_effect)\n        return x + 1.0\n    with self.assertRaisesRegex(ValueError, 'Cannot lower jaxpr with effects'):\n        f.lower(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_should_not_pass_tokens_into_unordered_effect(self):\n\n    def effect_lowering(ctx, *, effect):\n        self.assertEmpty(ctx.tokens_in)\n        return []\n    mlir.register_lowering(effect_p, effect_lowering)\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    f.lower(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lowering_that_doesnt_set_tokens_should_cause_error(self):\n\n    def bad_effect_lowering(ctx, *, effect):\n        return []\n    mlir.register_lowering(effect_p, bad_effect_lowering)\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    with self.assertRaisesRegex(ValueError, 'Lowering rule for `effect` needs to set `tokens_out`'):\n        f.lower(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lowering_that_sets_wrong_tokens_should_cause_error(self):\n\n    def bad_effect_lowering(ctx, *, effect):\n        ctx.set_tokens_out(mlir.TokenSet(bar=ctx.tokens_in.get(foo_effect)))\n        return []\n    mlir.register_lowering(effect_p, bad_effect_lowering)\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    with self.assertRaisesRegex(ValueError, 'Lowering rule for `effect` returns incorrect set of output token.'):\n        f.lower(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_nontrivial_lowering_with_ordered_effect_should_consume_token(self):\n    mlir.register_lowering(effect_p, function_effect_lowering)\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    module = f.lower(2.0).compiler_ir()\n    main = module.body.operations[0]\n    call_op = main.body.blocks[0].operations[0]\n    self.assertEqual(call_op.operation.name, 'func.call')\n    self.assertEqual(str(call_op.attributes['callee']), '@effect')\n    func = module.body.operations[1]\n    self.assertEqual(func.name.value, 'effect')\n    self.assertIn('hlo.token', str(func.type.inputs[0]))\n    self.assertIn('hlo.token', str(func.type.results[0]))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_nontrivial_lowering_with_unordered_effect_should_consume_token(self):\n    mlir.register_lowering(effect_p, function_effect_lowering)\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    module = f.lower(2.0).compiler_ir()\n    main = module.body.operations[0]\n    first_op = main.body.blocks[0].operations[0]\n    self.assertEqual(first_op.operation.name, 'func.call')\n    self.assertEqual(str(first_op.attributes['callee']), '@effect')\n    self.assertLen(list(first_op.operands), 0)\n    func = module.body.operations[1]\n    self.assertEqual(func.name.value, 'effect')\n    self.assertLen(list(func.type.inputs), 0)\n    self.assertLen(list(func.type.results), 0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lowered_jaxpr_without_ordered_effects_takes_no_dummy_inputs(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    module = f.lower(1.0).compiler_ir()\n    input_types = module.body.operations[0].type.inputs\n    self.assertLen(list(input_types), 1)\n    self.assertEqual(str(input_types[0]), 'tensor<f32>')\n    result_types = module.body.operations[0].type.results\n    self.assertLen(list(result_types), 1)\n    self.assertEqual(str(result_types[0]), 'tensor<f32>')",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lowered_jaxpr_with_ordered_effects_takes_token_inputs(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    module = f.lower(1.0).compiler_ir()\n    input_types = module.body.operations[0].type.inputs\n    token_type = '!stablehlo.token'\n    self.assertLen(list(input_types), 2)\n    self.assertEqual(str(input_types[0]), token_type)\n    result_types = module.body.operations[0].type.results\n    self.assertLen(list(result_types), 2)\n    self.assertEqual(str(result_types[0]), token_type)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_lowered_jaxpr_with_multiple_ordered_effects_takes_in_tokens(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n    module = f.lower(1.0).compiler_ir()\n    input_types = module.body.operations[0].type.inputs\n    token_type = '!stablehlo.token'\n    self.assertLen(list(input_types), 3)\n    self.assertEqual(str(input_types[0]), token_type)\n    self.assertEqual(str(input_types[1]), token_type)\n    result_types = module.body.operations[0].type.results\n    self.assertLen(list(result_types), 3)\n    self.assertEqual(str(result_types[0]), token_type)\n    self.assertEqual(str(result_types[1]), token_type)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def lower(self, x, _experimental_lowering_parameters=None):\n    return jax.jit(self.__call__).lower(x, _experimental_lowering_parameters=_experimental_lowering_parameters)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n\n    @partial(map_fun, in_axes=1, out_axes=2)\n    def h(y):\n        return jnp.sin(x + y)\n    return h(y).sum()"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jit\ndef g(z):\n    return self.pmap(lambda x: x[jnp.newaxis] * y)(z)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(carry, x):\n    return (carry + jax.lax.psum(jnp.sum(x), axis_name='x'), None)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(y):\n    return y"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(k1, k2, k3, k4):\n    batch_size = 1\n    seq_len = 1\n    input_size = 1\n    hidden_size = 1\n    bidirectional = False\n    num_directions = 2 if bidirectional else 1\n    num_layers = 1\n    x = jax.random.normal(k1, (batch_size, seq_len, input_size), dtype=jnp.float32)\n    h_0 = jax.random.normal(k2, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    c_0 = jax.random.normal(k3, (num_directions * num_layers, batch_size, hidden_size), dtype=jnp.float32)\n    seq_lengths = jnp.ones((batch_size,), dtype=jnp.int32) * seq_len\n    weights = rnn.init_lstm_weight(k4, input_size, hidden_size, num_layers, bidirectional)\n    return rnn.lstm(x, h_0, c_0, weights, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def g(weights, x, h_0, c_0):\n    W_ih, W_hh, b_ih, b_hh = rnn.unpack_lstm_weights(weights, input_size, hidden_size, num_layers, bidirectional)\n    y_ref, h_n_ref, c_n_ref = rnn.lstm_ref(x, h_0, c_0, W_ih, W_hh, b_ih, b_hh, seq_lengths=seq_lengths, input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=False, bidirectional=bidirectional)\n    seq_length_mask = jnp.tile(jnp.arange(seq_len, dtype=jnp.int32)[None], [batch_size, 1]) < seq_lengths[:, None]\n    loss = jnp.sum(jnp.where(seq_length_mask[..., None], y_ref, 0.0))\n    return (loss, (y_ref, h_n_ref, c_n_ref))"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def add(self, x: jax.Array) -> jax.Array:\n    self.value += np.asarray(x)\n    return jax.device_put(self.value, x.sharding)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@colocated_python.colocated_python\ndef f(x):\n    out_arrays = []\n    for shard in x.addressable_shards:\n        np_array = jax.device_get(shard.data)\n        input_ints = struct.unpack('<ii', base64.b64decode(np_array[0].encode('ascii')))\n        output_string = base64.b64encode(struct.pack('<ii', input_ints[0] + 1, input_ints[1] + 1)).decode('ascii')\n        out_np_array = np.array([output_string], dtype=np.dtypes.StringDType())\n        out_arrays.append(jax.device_put(out_np_array, device=shard.device))\n    out = jax.make_array_from_single_device_arrays(sharding=x.sharding, shape=x.shape, arrays=out_arrays)\n    return out"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "def f(x, y):\n    s = jit(jnp.sin)(x)\n    return jnp.sin(s) + jnp.cos(y)"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_ordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_lower_and_run_jaxpr_with_unordered_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1.0\n    self.assertEqual(f(2.0), 3.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_unordered_effects(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=bar_effect)\n        return x + 1\n    with jtu.ignore_warning():\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_cant_jit_and_pmap_function_with_ordered_effects(self):\n\n    @jax.jit\n    @jax.pmap\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1\n    with self.assertRaisesRegex(ValueError, 'Ordered effects not supported for map primitives: \\\\[foo\\\\]'):\n        f(jnp.arange(jax.device_count()))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_runtime_tokens_should_update_after_running_effectful_function(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    prev_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    f(2.0)\n    curr_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    self.assertIsNot(prev_token, curr_token)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_execute_python_callback(self):\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    f(2.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0])\n    f(3.0)\n    jax.effects_barrier()\n    self.assertListEqual(log, [2.0, 3.0])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_different_threads_get_different_tokens(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    tokens = []\n\n    def _noop(_):\n        return ()\n\n    def f(x):\n        res = jax.jit(lambda x: callback_p.bind(x, callback=_noop, effect=log_effect, out_avals=[]))(x)\n        tokens.append(dispatch.runtime_tokens.current_tokens[log_effect])\n        return res\n    t1 = threading.Thread(target=lambda: f(2.0))\n    t2 = threading.Thread(target=lambda: f(3.0))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    token1, token2 = tokens\n    self.assertIsNot(token1, token2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_pmap_unordered_callback(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = set()\n\n    def log_value(x):\n        log.add(int(x))\n        return ()\n\n    @jax.pmap\n    def f(x):\n        callback_p.bind(x, callback=log_value, effect=unordered_log_effect, out_avals=[])\n        return x + 1\n    f(jnp.arange(2)).block_until_ready()\n    jax.effects_barrier()\n    self.assertSetEqual({0, 1}, log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_cond(self):\n\n    def f(x):\n\n        def true_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.cond(x, true_fun, false_fun, x)\n    f(2)\n\n    def f2(x):\n\n        def true_fun(x):\n            return x\n\n        def false_fun(x):\n            effect_p.bind(effect=foo_effect)\n            return x\n        return lax.cond(True, true_fun, false_fun, x)\n    with self.assertRaisesRegex(NotImplementedError, 'Effects not supported'):\n        jax.make_jaxpr(f2)(2.0)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_effect_in_cond_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            effect_p.bind(effect=while_effect)\n            return False\n\n        def body_fun(x):\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_while_body(self):\n\n    def f(x):\n\n        def cond_fun(x):\n            return False\n\n        def body_fun(x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return x\n        return lax.while_loop(cond_fun, body_fun, x)\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_multiple_allowed_ordered_effect_in_scan(self):\n\n    def f(x):\n\n        def body_fun(carry, x):\n            effect_p.bind(effect=while1_effect)\n            effect_p.bind(effect=while2_effect)\n            return (carry, x)\n        return lax.scan(body_fun, x, jnp.arange(5))\n    f(2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@partial(jax.jit, in_shardings=NamedSharding(mesh, PartitionSpec('x')), out_shardings=NamedSharding(mesh, PartitionSpec('x')), compiler_options=compiler_options)\ndef f(x):\n    agg = x\n    for _ in range(its):\n        agg = agg @ x\n    return agg"
  },
  {
    "test_code": "def test_can_lower_multiple_effects(self):\n\n    @jax.jit\n    def f(x):\n        effect_p.bind(effect=foo_effect)\n        effect_p.bind(effect=foo2_effect)\n        return x + 1.0\n\n    @jax.jit\n    def g(x):\n        effect_p.bind(effect=foo_effect)\n        return x + 1.0\n    self.assertNotIn(foo_effect, dispatch.runtime_tokens.current_tokens)\n    self.assertNotIn(foo2_effect, dispatch.runtime_tokens.current_tokens)\n    f(2.0)\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    f(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIsNot(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])\n    foo_token = dispatch.runtime_tokens.current_tokens[foo_effect]\n    foo2_token = dispatch.runtime_tokens.current_tokens[foo2_effect]\n    g(2.0)\n    self.assertIsNot(foo_token, dispatch.runtime_tokens.current_tokens[foo_effect])\n    self.assertIs(foo2_token, dispatch.runtime_tokens.current_tokens[foo2_effect])",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  },
  {
    "test_code": "@jtu.skip_on_devices('tpu')\ndef test_ordered_effect_remains_ordered_across_multiple_devices(self):\n    if jax.device_count() < 2:\n        raise unittest.SkipTest('Test requires >= 2 devices.')\n    log = []\n\n    def log_value(x):\n        log.append(x)\n        return ()\n\n    @jax.jit\n    def f(x):\n        x = x.dot(x)\n        x = jnp.log(x.sum())\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n\n    @jax.jit\n    def g(x):\n        return callback_p.bind(x, callback=log_value, effect=log_effect, out_avals=[])\n    x = jax.device_put(jnp.ones((500, 500)), jax.devices()[0])\n    y = jax.device_put(3.0, jax.devices()[1])\n    for _ in range(3):\n        f(x)\n        g(y)\n    jax.effects_barrier()\n    f_, g_ = (float(jnp.log(125000000.0)), 3.0)\n    expected_log = [f_, g_, f_, g_, f_, g_]\n    self.assertListEqual(log, expected_log)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/jaxpr_effects_test.py",
    "function": "@jax.jit\ndef g(x):\n    return x + 4"
  }
]