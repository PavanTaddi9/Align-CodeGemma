[
  {
    "test_code": "@jtu.sample_product(shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)], dtype=float_types + complex_types, compute_left_eigenvectors=[False, True], compute_right_eigenvectors=[False, True])\n@jtu.run_on_devices('gpu')\ndef testEig(self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors):\n    if not gpu_solver.has_magma():\n        self.skipTest(\"MAGMA is not installed or can't be loaded.\")\n    if dtype == np.complex128:\n        self.skipTest('MAGMA support for complex128 types is flaky.')\n    rng = jtu.rand_default(self.rng())\n    n = shape[-1]\n    args_maker = lambda: [rng(shape, dtype)]\n\n    def norm(x):\n        norm = np.linalg.norm(x, axis=(-2, -1))\n        return norm / ((n + 1) * jnp.finfo(dtype).eps)\n\n    def check_right_eigenvectors(a, w, vr):\n        self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n\n    def check_left_eigenvectors(a, w, vl):\n        rank = len(a.shape)\n        aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n        wC = jnp.conj(w)\n        check_right_eigenvectors(aH, wC, vl)\n    a, = args_maker()\n    results = lax_linalg.eig(a, compute_left_eigenvectors=compute_left_eigenvectors, compute_right_eigenvectors=compute_right_eigenvectors, use_magma=True)\n    w = results[0]\n    if compute_left_eigenvectors:\n        check_left_eigenvectors(a, w, results[1])\n    if compute_right_eigenvectors:\n        check_right_eigenvectors(a, w, results[1 + compute_left_eigenvectors])\n    self._CompileAndCheck(jnp.linalg.eig, args_maker, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/magma_linalg_test.py",
    "function": "def norm(x):\n    norm = np.linalg.norm(x, axis=(-2, -1))\n    return norm / ((inner_dimension + 1) * jnp.finfo(dtype).eps)"
  },
  {
    "test_code": "@jtu.sample_product(shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)], dtype=float_types + complex_types, compute_left_eigenvectors=[False, True], compute_right_eigenvectors=[False, True])\n@jtu.run_on_devices('gpu')\ndef testEig(self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors):\n    if not gpu_solver.has_magma():\n        self.skipTest(\"MAGMA is not installed or can't be loaded.\")\n    if dtype == np.complex128:\n        self.skipTest('MAGMA support for complex128 types is flaky.')\n    rng = jtu.rand_default(self.rng())\n    n = shape[-1]\n    args_maker = lambda: [rng(shape, dtype)]\n\n    def norm(x):\n        norm = np.linalg.norm(x, axis=(-2, -1))\n        return norm / ((n + 1) * jnp.finfo(dtype).eps)\n\n    def check_right_eigenvectors(a, w, vr):\n        self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n\n    def check_left_eigenvectors(a, w, vl):\n        rank = len(a.shape)\n        aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n        wC = jnp.conj(w)\n        check_right_eigenvectors(aH, wC, vl)\n    a, = args_maker()\n    results = lax_linalg.eig(a, compute_left_eigenvectors=compute_left_eigenvectors, compute_right_eigenvectors=compute_right_eigenvectors, use_magma=True)\n    w = results[0]\n    if compute_left_eigenvectors:\n        check_left_eigenvectors(a, w, results[1])\n    if compute_right_eigenvectors:\n        check_right_eigenvectors(a, w, results[1 + compute_left_eigenvectors])\n    self._CompileAndCheck(jnp.linalg.eig, args_maker, rtol=0.001)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/magma_linalg_test.py",
    "function": "def check_left_eigenvectors(a, w, vl):\n    rank = len(a.shape)\n    aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n    wC = jnp.conj(w)\n    check_right_eigenvectors(aH, wC, vl)"
  }
]