[
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@partial(self.pmap, axis_name='i')\ndef func(_):\n    return jax.lax.psum(dtype(0), axis_name='i')"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow_by_default(self, func_generator, _):\n    for func_name, _, func in func_generator():\n        with self.assertAllows(func_name):\n            func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_allow(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('log'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertLogs(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow(self, func_generator, jax_transfer_guard):\n    for func_name, explicit, func in func_generator():\n        with jax_transfer_guard('disallow'):\n            if explicit:\n                with self.assertAllows(func_name):\n                    func()\n            else:\n                with self.assertDisallows(func_name):\n                    func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(('device_to_host', _device_to_host_funcs, jax.transfer_guard_device_to_host), ('all', _device_to_host_funcs, jax.transfer_guard))\ndef test_disallow_ignores_arrays_on_cpu(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('allow'):\n            func()\n        with jax_transfer_guard('disallow'):\n            with self.assertAllows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_log_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('log_explicit'):\n            with self.assertLogs(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  },
  {
    "test_code": "@parameterized.named_parameters(*_COMMON_TEST_PARAMETERS)\ndef test_disallow_explicit(self, func_generator, jax_transfer_guard):\n    for func_name, _, func in func_generator():\n        with jax_transfer_guard('disallow_explicit'):\n            with self.assertDisallows(func_name):\n                func()",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/transfer_guard_test.py",
    "function": "@self.sparsify\ndef func(x):\n    return jit(lambda x: jnp.sum(x, 1))(x)"
  }
]