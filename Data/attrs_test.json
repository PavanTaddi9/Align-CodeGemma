[
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_scan_carry(self):\n\n    class A:\n        ...\n    a = A()\n    jax_setattr(a, 'x', jnp.zeros(3))\n\n    def body(i, _):\n        x = jax_getattr(a, 'x')\n        x = x.at[i].set(x[i] + 1)\n        jax_setattr(a, 'x', x)\n        return (i + 1, None)\n    _, _ = jax.lax.scan(body, 0, None, length=3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_jit_transpose_basic(self):\n    thing = Thing(jnp.array(2.0))\n\n    @jax.custom_vjp\n    def foo(x):\n        return x\n\n    def foo_fwd(x):\n        return (x, None)\n\n    def foo_bwd(x, g):\n        jax_setattr(thing, 'x', g)\n        return (g,)\n    foo.defvjp(foo_fwd, foo_bwd)\n    foo(3.14)\n    self.assertEqual(thing.x, 2.0)\n    jax.grad(foo)(3.14)\n    self.assertEqual(thing.x, 1.0)\n    thing.x = jnp.array(3.14)\n    self.assertEqual(thing.x, 3.14)\n    jax.jit(jax.grad(foo))(3.14)\n    self.assertEqual(thing.x, 1.0)\n    thing.x = jnp.array(2.718)\n    self.assertEqual(thing.x, 2.718)\n    jax.grad(jax.jit(lambda x: jnp.sin(foo(x))))(3.0)\n    self.assertAllClose(thing.x, -0.9899925, atol=1e-05, rtol=1e-05, check_dtypes=False)\n    thing.x = jnp.array(3.14)\n    self.assertEqual(thing.x, 3.14)\n\n    def bar(x):\n        out = jnp.sin(foo(x))\n        jax_setattr(thing, 'x', 5.0)\n        return out\n    jax.grad(jax.jit(bar))(3.0)\n    self.assertAllClose(thing.x, -0.9899925, atol=1e-05, rtol=1e-05, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_scan_transpose_basic(self, jit: bool):\n    thing = Thing(1.0)\n\n    @jax.custom_vjp\n    def foo(x):\n        return x\n\n    def foo_fwd(x):\n        return (x, None)\n\n    def foo_bwd(x, g):\n        jax_setattr(thing, 'x', 2 * jax_getattr(thing, 'x') * g)\n        return (g,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def double_it_10(x):\n\n        def body(x, __):\n            return (foo(x), None)\n        x, _ = jax.lax.scan(body, x, None, length=10)\n        return x\n    if jit:\n        double_it_10 = jax.jit(double_it_10)\n    double_it_10(1.0)\n    self.assertAllClose(thing.x, 1.0, check_dtypes=False)\n    jax.grad(double_it_10)(1.0)\n    self.assertAllClose(thing.x, 1024.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def foo(x, y):\n    z = jax.vmap(jax.vmap(jnp.sin))(x) * y\n    return jax.vmap(jax.vmap(jnp.add))(x, z)"
  },
  {
    "test_code": "def test_jit_of_jvp(self):\n    thing = Thing(2.0)\n\n    def f():\n        x = jax_getattr(thing, 'x')\n        x = jnp.sin(x)\n        jax_setattr(thing, 'x', x)\n\n    @jax.jit\n    def g():\n        _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n        (thing_, attr_, tangent_), = attr_tangents\n        self.assertIs(thing, thing_)\n        self.assertEqual(attr_, 'x')\n        return (jax_getattr(thing, 'x'), tangent_)\n    x, tangent = g()\n    self.assertAllClose(x, jnp.sin(2.0), check_dtypes=False)\n    self.assertAllClose(tangent, jnp.cos(2.0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef g():\n    return jnp.zeros(n) + x"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_jit_of_jvp(self):\n    thing = Thing(2.0)\n\n    def f():\n        x = jax_getattr(thing, 'x')\n        x = jnp.sin(x)\n        jax_setattr(thing, 'x', x)\n\n    @jax.jit\n    def g():\n        _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n        (thing_, attr_, tangent_), = attr_tangents\n        self.assertIs(thing, thing_)\n        self.assertEqual(attr_, 'x')\n        return (jax_getattr(thing, 'x'), tangent_)\n    x, tangent = g()\n    self.assertAllClose(x, jnp.sin(2.0), check_dtypes=False)\n    self.assertAllClose(tangent, jnp.cos(2.0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def g():\n    return jax.lax.cond(True, lambda: data[0], lambda: data[1])"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_scan_basic(self, jit: bool):\n    thing = Thing(1.0)\n\n    def double_it_10():\n\n        def body(_, __):\n            cur_x = jax_getattr(thing, 'x')\n            jax_setattr(thing, 'x', cur_x * 2.0)\n            return (None, None)\n        _, _ = jax.lax.scan(body, None, None, length=10)\n    if jit:\n        double_it_10 = jax.jit(double_it_10)\n    double_it_10()\n    self.assertAllClose(thing.x, 1024.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_basic_consts_and_args(self):\n    thing = Thing(1.0)\n\n    def double_it_10(y):\n\n        def body(i, x):\n            cur_x = jax_getattr(thing, 'x')\n            jax_setattr(thing, 'x', cur_x * 2.0)\n            return (i + 1, (y, y))\n        _, _ = jax.lax.scan(body, 0, jnp.arange(10))\n    jax.jit(double_it_10)(jnp.arange(3.0))\n    self.assertAllClose(thing.x, 1024.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "@parameterized.parameters([True, False])\ndef test_scan_transpose_basic(self, jit: bool):\n    thing = Thing(1.0)\n\n    @jax.custom_vjp\n    def foo(x):\n        return x\n\n    def foo_fwd(x):\n        return (x, None)\n\n    def foo_bwd(x, g):\n        jax_setattr(thing, 'x', 2 * jax_getattr(thing, 'x') * g)\n        return (g,)\n    foo.defvjp(foo_fwd, foo_bwd)\n\n    def double_it_10(x):\n\n        def body(x, __):\n            return (foo(x), None)\n        x, _ = jax.lax.scan(body, x, None, length=10)\n        return x\n    if jit:\n        double_it_10 = jax.jit(double_it_10)\n    double_it_10(1.0)\n    self.assertAllClose(thing.x, 1.0, check_dtypes=False)\n    jax.grad(double_it_10)(1.0)\n    self.assertAllClose(thing.x, 1024.0, check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_scan_carry(self):\n\n    class A:\n        ...\n    a = A()\n    jax_setattr(a, 'x', jnp.zeros(3))\n\n    def body(i, _):\n        x = jax_getattr(a, 'x')\n        x = x.at[i].set(x[i] + 1)\n        jax_setattr(a, 'x', x)\n        return (i + 1, None)\n    _, _ = jax.lax.scan(body, 0, None, length=3)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def scan(y):\n\n    def body(carry, x):\n        return (carry, jnp.dot(x, x))\n    return jax.lax.scan(body, 1.0, y, unroll=False)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_jit_of_jvp(self):\n    thing = Thing(2.0)\n\n    def f():\n        x = jax_getattr(thing, 'x')\n        x = jnp.sin(x)\n        jax_setattr(thing, 'x', x)\n\n    @jax.jit\n    def g():\n        _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n        (thing_, attr_, tangent_), = attr_tangents\n        self.assertIs(thing, thing_)\n        self.assertEqual(attr_, 'x')\n        return (jax_getattr(thing, 'x'), tangent_)\n    x, tangent = g()\n    self.assertAllClose(x, jnp.sin(2.0), check_dtypes=False)\n    self.assertAllClose(tangent, jnp.cos(2.0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef g():\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_jit_of_jvp(self):\n    thing = Thing(2.0)\n\n    def f():\n        x = jax_getattr(thing, 'x')\n        x = jnp.sin(x)\n        jax_setattr(thing, 'x', x)\n\n    @jax.jit\n    def g():\n        _, _, attr_tangents = attrs.jvp(f, (), (), [(thing, 'x', 1.0)])\n        (thing_, attr_, tangent_), = attr_tangents\n        self.assertIs(thing, thing_)\n        self.assertEqual(attr_, 'x')\n        return (jax_getattr(thing, 'x'), tangent_)\n    x, tangent = g()\n    self.assertAllClose(x, jnp.sin(2.0), check_dtypes=False)\n    self.assertAllClose(tangent, jnp.cos(2.0), check_dtypes=False)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def g(a, b):\n    c = jnp.zeros_like(a)\n    _, b, c, _ = for_impl(5, body2, (a, b, c, 0))\n    return (b, c)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_arg_to_jit(self):\n    self.skipTest('regressed this experimental feature')\n    thing = Thing(1.0)\n    count = 0\n\n    @jax.jit\n    def f(obj, x):\n        nonlocal count\n        count += 1\n        jax_setattr(obj, 'x', x)\n    f(thing, 2.0)\n    self.assertAllClose(thing.x, 2.0, check_dtypes=False)\n    f(thing, 3.0)\n    self.assertAllClose(thing.x, 3.0, check_dtypes=False)\n    self.assertEqual(count, 1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/attrs_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  }
]