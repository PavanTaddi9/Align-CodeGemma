[
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    jax.random.normal(jax.random.key(0), 1000)"
  },
  {
    "test_code": "def test_exclude_kwargs(self):\n\n    @partial(np.vectorize, excluded=(2, 'func'))\n    def f_np(x, y, func=np.add):\n        assert np.ndim(x) == np.ndim(y) == 0\n        return func(x, y)\n\n    @partial(jnp.vectorize, excluded=(2, 'func'))\n    def f_jnp(x, y, func=jnp.add):\n        assert x.ndim == y.ndim == 0\n        return func(x, y)\n    x = np.arange(4, dtype='int32')\n    y = np.int32(2)\n    self.assertArraysEqual(f_np(x, y), f_jnp(x, y))\n    self.assertArraysEqual(f_np(x, y, np.power), f_jnp(x, y, jnp.power))\n    self.assertArraysEqual(f_np(x, y, func=np.power), f_jnp(x, y, func=jnp.power))",
    "assertions": [
      "assert np.ndim(x) == np.ndim(y) == 0",
      "assert x.ndim == y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def func(x):\n    x, = promote_dtypes_complex(x)\n    return jnp.fft.irfft(jnp.concatenate([jnp.zeros_like(x, shape=1), x[:2] + 1j * x[2:]]))"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@partial(jax.jit, abstracted_axes=(None, 'n'))\ndef f(x):\n    return x[0]"
  },
  {
    "test_code": "@jtu.sample_product([dict(left_shape=left_shape, right_shape=right_shape, result_shape=result_shape) for left_shape, right_shape, result_shape in [((2, 3), (3, 4), (2, 4)), ((2, 3), (1, 3, 4), (1, 2, 4)), ((1, 2, 3), (1, 3, 4), (1, 2, 4)), ((5, 2, 3), (1, 3, 4), (5, 2, 4)), ((6, 5, 2, 3), (3, 4), (6, 5, 2, 4))]])\n@jax.numpy_rank_promotion('allow')\ndef test_matmat(self, left_shape, right_shape, result_shape):\n    matmat = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k)')\n    self.assertEqual(matmat(jnp.zeros(left_shape), jnp.zeros(right_shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(left_shape=left_shape, right_shape=right_shape, result_shape=result_shape) for left_shape, right_shape, result_shape in [((2, 3), (3,), (2,)), ((2, 3), (1, 3), (1, 2)), ((4, 2, 3), (1, 3), (4, 2)), ((5, 4, 2, 3), (1, 3), (5, 4, 2))]])\n@jax.numpy_rank_promotion('allow')\ndef test_matvec(self, left_shape, right_shape, result_shape):\n    matvec = jnp.vectorize(jnp.dot, signature='(n,m),(m)->(n)')\n    self.assertEqual(matvec(jnp.zeros(left_shape), jnp.zeros(right_shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(left_shape=left_shape, right_shape=right_shape, result_shape=result_shape) for left_shape, right_shape, result_shape in [((3,), (3,), ()), ((2, 3), (3,), (2,)), ((4, 2, 3), (3,), (4, 2))]])\n@jax.numpy_rank_promotion('allow')\ndef test_vecmat(self, left_shape, right_shape, result_shape):\n    vecvec = jnp.vectorize(jnp.dot, signature='(m),(m)->()')\n    self.assertEqual(vecvec(jnp.zeros(left_shape), jnp.zeros(right_shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, result_shape=result_shape) for shape, result_shape in [((3,), ()), ((2, 3), (2,)), ((1, 2, 3, 4), (1, 2, 3))]])\ndef test_mean(self, shape, result_shape):\n    mean = jnp.vectorize(jnp.mean, signature='(n)->()')\n    self.assertEqual(mean(jnp.zeros(shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "@jtu.sample_product([dict(shape=shape, result_shape=result_shape) for shape, result_shape in [((), (2,)), ((3,), (3, 2))]])\ndef test_stack_plus_minus(self, shape, result_shape):\n\n    @partial(jnp.vectorize, signature='()->(n)')\n    def stack_plus_minus(x):\n        return jnp.stack([x, -x])\n    self.assertEqual(stack_plus_minus(jnp.zeros(shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_bad_inputs(self):\n    matmat = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k)')\n    with self.assertRaisesRegex(TypeError, 'wrong number of positional arguments'):\n        matmat(jnp.zeros((3, 2)))\n    with self.assertRaisesRegex(ValueError, 'input with shape \\\\(2,\\\\) does not have enough dimensions'):\n        matmat(jnp.zeros((2,)), jnp.zeros((2, 2)))\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'm'\"):\n        matmat(jnp.zeros((2, 3)), jnp.zeros((4, 5)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def zeros(shape):\n    if not isinstance(shape, (tuple, list)):\n        shape = (shape,)\n    return lax.broadcast(jnp.float32(0.0), shape)"
  },
  {
    "test_code": "def test_exclude_kwargs(self):\n\n    @partial(np.vectorize, excluded=(2, 'func'))\n    def f_np(x, y, func=np.add):\n        assert np.ndim(x) == np.ndim(y) == 0\n        return func(x, y)\n\n    @partial(jnp.vectorize, excluded=(2, 'func'))\n    def f_jnp(x, y, func=jnp.add):\n        assert x.ndim == y.ndim == 0\n        return func(x, y)\n    x = np.arange(4, dtype='int32')\n    y = np.int32(2)\n    self.assertArraysEqual(f_np(x, y), f_jnp(x, y))\n    self.assertArraysEqual(f_np(x, y, np.power), f_jnp(x, y, jnp.power))\n    self.assertArraysEqual(f_np(x, y, func=np.power), f_jnp(x, y, func=jnp.power))",
    "assertions": [
      "assert np.ndim(x) == np.ndim(y) == 0",
      "assert x.ndim == y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def func(size):\n    lhs_one_d = jnp.arange(size, dtype='int32') + 1\n    lhs_two_d = jax.lax.broadcast_in_dim(lhs_one_d, (size, 2), (0,))\n    rhs = jax.lax.broadcasted_iota('int32', (2, 4), 0) + 1\n    return jnp.dot(lhs_two_d, rhs)"
  },
  {
    "test_code": "def test_exclude_kwargs(self):\n\n    @partial(np.vectorize, excluded=(2, 'func'))\n    def f_np(x, y, func=np.add):\n        assert np.ndim(x) == np.ndim(y) == 0\n        return func(x, y)\n\n    @partial(jnp.vectorize, excluded=(2, 'func'))\n    def f_jnp(x, y, func=jnp.add):\n        assert x.ndim == y.ndim == 0\n        return func(x, y)\n    x = np.arange(4, dtype='int32')\n    y = np.int32(2)\n    self.assertArraysEqual(f_np(x, y), f_jnp(x, y))\n    self.assertArraysEqual(f_np(x, y, np.power), f_jnp(x, y, jnp.power))\n    self.assertArraysEqual(f_np(x, y, func=np.power), f_jnp(x, y, func=jnp.power))",
    "assertions": [
      "assert np.ndim(x) == np.ndim(y) == 0",
      "assert x.ndim == y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def func(x):\n    return jax.random.uniform(x, (2, 4), dtype=np.float32)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    y = x + 2\n    return (jnp.nan, y)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    x, y = jax.lax.cond(x < 3, lambda x, y: (x * 2, y), lambda x, y: (x * 3, y), x, y)\n    return (x, y)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    return 0.0 / x"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f():\n    weird_dict = {lambda x: x: 2.0, lambda x: x * 2: 3}\n    weirder_dict = {lambda x: x: weird_dict}\n    x = 2.0\n    debugger.breakpoint(stdin=stdin, stdout=stdout, backend='cli')\n    del weirder_dict\n    return x"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f2():\n    x = 2\n    g2()\n    return x"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x):\n    out = jnp.zeros_like(x)\n\n    def body(i, j, k, refs):\n        x_ref, out_ref = refs\n        y = func(x_ref[i, j, k])\n        out_ref[i, j, k] += y\n    return for_loop.for_loop(x.shape, body, (x, out))[1].sum()"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(a, b, c, d, e):\n    return (a, b, c, d, e)"
  },
  {
    "test_code": "@jtu.sample_product([dict(left_shape=left_shape, right_shape=right_shape, result_shape=result_shape) for left_shape, right_shape, result_shape in [((3,), (3,), ()), ((2, 3), (3,), (2,)), ((4, 2, 3), (3,), (4, 2))]])\n@jax.numpy_rank_promotion('allow')\ndef test_vecmat(self, left_shape, right_shape, result_shape):\n    vecvec = jnp.vectorize(jnp.dot, signature='(m),(m)->()')\n    self.assertEqual(vecvec(jnp.zeros(left_shape), jnp.zeros(right_shape)).shape, result_shape)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def vecvec(a, b):\n    dot = jnp.dot\n    for ndim in range(1, max(a.ndim, b.ndim)):\n        a_ax = 0 if a.ndim > ndim else None\n        b_ax = 0 if b.ndim > ndim else None\n        dot = vmap(dot, in_axes=(a_ax, b_ax))\n    return dot(a, b)"
  },
  {
    "test_code": "def test_exclude_kwargs(self):\n\n    @partial(np.vectorize, excluded=(2, 'func'))\n    def f_np(x, y, func=np.add):\n        assert np.ndim(x) == np.ndim(y) == 0\n        return func(x, y)\n\n    @partial(jnp.vectorize, excluded=(2, 'func'))\n    def f_jnp(x, y, func=jnp.add):\n        assert x.ndim == y.ndim == 0\n        return func(x, y)\n    x = np.arange(4, dtype='int32')\n    y = np.int32(2)\n    self.assertArraysEqual(f_np(x, y), f_jnp(x, y))\n    self.assertArraysEqual(f_np(x, y, np.power), f_jnp(x, y, jnp.power))\n    self.assertArraysEqual(f_np(x, y, func=np.power), f_jnp(x, y, func=jnp.power))",
    "assertions": [
      "assert np.ndim(x) == np.ndim(y) == 0",
      "assert x.ndim == y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def func(xs):\n    return jnp.array(list(xs))"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x):\n    return jsp.special.betainc(jnp.ones(3), 1.0, x)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    return jnp.add(3.0, 4.0)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(x, y):\n    z = jax_getattr(thing1, 'x')\n    w = jax_getattr(thing2, 'x')\n    out = jnp.sin(x * y * z * w)\n    jax_setattr(thing1, 'x', out)\n    jax_setattr(thing2, 'x', 2 * out)\n    return (3 * out, 4 * out)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.vmap\n@jax.value_and_grad\n@jax.named_scope('foo')\ndef f(x):\n\n    @jax.named_scope('scan_body')\n    def body(carry, x):\n        return (carry * x, carry + x)\n    return lax.scan(body, x, jnp.arange(8.0))[0]"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f():\n    out = [rng(shape, dtype or jnp.float_) for shape, dtype in zip(shapes, dtypes)]\n    if np_arrays:\n        return out\n    return [jnp.asarray(a) if isinstance(a, (np.ndarray, np.generic)) else a for a in out]"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(c, a):\n    tracer_spy.append(c)\n    d = 0.75\n    b = jnp.sin(c * jnp.sum(jnp.cos(d * a)))\n    c = 0.9 * jnp.cos(d * jnp.sum(jnp.sin(c * a)))\n    return (c, b)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "def f(pred):\n\n    def true_fun():\n        x_ref[()] = 1.0\n\n    def false_fun():\n        x_ref[()] = 2.0\n    jax.lax.cond(pred, true_fun, false_fun)"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@functools.partial(pjit.pjit, in_shardings=jax.sharding.PartitionSpec(None), out_shardings=jax.sharding.PartitionSpec('x'))\ndef f():\n    return jnp.zeros([32, 10])"
  },
  {
    "test_code": "def test_exclude_first(self):\n\n    @partial(jnp.vectorize, excluded={0})\n    def f(x, y):\n        assert x == 'foo'\n        assert y.ndim == 0\n        return y\n    x = jnp.arange(3)\n    self.assertAllClose(x, f('foo', x))\n    self.assertAllClose(x, jax.jit(f, static_argnums=0)('foo', x))",
    "assertions": [
      "assert x == 'foo'",
      "assert y.ndim == 0"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_exclude_second(self):\n\n    @partial(jnp.vectorize, excluded={1})\n    def f(x, y):\n        assert x.ndim == 0\n        assert y == 'foo'\n        return x\n    x = jnp.arange(3)\n    self.assertAllClose(x, f(x, 'foo'))\n    self.assertAllClose(x, jax.jit(f, static_argnums=1)(x, 'foo'))",
    "assertions": [
      "assert x.ndim == 0",
      "assert y == 'foo'"
    ],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_wrong_output_type(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,k),()')\n    with self.assertRaisesRegex(TypeError, 'output must be a tuple'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_wrong_num_outputs(self):\n    f = jnp.vectorize(lambda *args: args, signature='(),()->(),(),()')\n    with self.assertRaisesRegex(TypeError, 'wrong number of output arguments'):\n        f(1, 2)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_wrong_output_shape(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n)')\n    with self.assertRaisesRegex(ValueError, 'output shape \\\\(2, 2\\\\) does not match'):\n        f(jnp.zeros((2, 2)), jnp.zeros((2, 2)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_inconsistent_output_size(self):\n    f = jnp.vectorize(jnp.dot, signature='(n,m),(m,k)->(n,n)')\n    with self.assertRaisesRegex(ValueError, \"inconsistent size for core dimension 'n'\"):\n        f(jnp.zeros((2, 3)), jnp.zeros((3, 4)))",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_expand_dims_multiple_outputs_no_signature(self):\n    f = jnp.vectorize(lambda x: (x, x))\n    x = jnp.arange(1)\n    xx = f(x)\n    self.assertAllClose(xx[0], x)\n    self.assertAllClose(xx[1], x)\n    self.assertIsInstance(xx, tuple)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_none_arg(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y)\n    x = jnp.arange(10)\n    self.assertAllClose(f(x, None), x)\n    y = jnp.arange(10, 20)\n    self.assertAllClose(f(x, y), x + y)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_none_arg_bad_signature(self):\n    f = jnp.vectorize(lambda x, y: x if y is None else x + y, signature='(k),(k)->(k)')\n    args = (jnp.arange(10), None)\n    msg = \"Cannot pass None at locations \\\\{1\\\\} with signature='\\\\(k\\\\),\\\\(k\\\\)->\\\\(k\\\\)'\"\n    with self.assertRaisesRegex(ValueError, msg):\n        f(*args)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  },
  {
    "test_code": "def test_rank_promotion_error(self):\n    f = jnp.vectorize(jnp.add, signature='(),()->()')\n    rank2 = jnp.zeros((10, 10))\n    rank1 = jnp.zeros(10)\n    rank0 = jnp.zeros(())\n    msg = 'operands with shapes .* require rank promotion'\n    with jax.numpy_rank_promotion('raise'):\n        with self.assertRaisesRegex(ValueError, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertWarnsRegex(UserWarning, msg):\n            f(rank2, rank1)\n    with jax.numpy_rank_promotion('raise'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    with jax.numpy_rank_promotion('warn'):\n        f(rank2, rank0)\n        f(rank1, rank0)\n    f2 = jnp.vectorize(jnp.add, signature='(n),()->(n)')\n    with jax.numpy_rank_promotion('raise'):\n        f2(rank2, rank1)\n    with jax.numpy_rank_promotion('warn'):\n        with self.assertNoWarnings():\n            f2(rank2, rank1)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/lax_numpy_vectorize_test.py",
    "function": "@jax.jit\ndef f(x, r):\n    x = x.at[:, 0].set(x[:, 0] / r)\n    return x"
  }
]