[
  {
    "test_code": "@patch_jax_version('1.2.3', '1.2.3.dev4567')\ndef testVersionInRelease(self):\n    with assert_no_subprocess_call():\n        version = jax.version._get_version_string()\n    self.assertEqual(version, '1.2.3.dev4567')\n    self.assertValidVersion(version)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/version_test.py",
    "function": "@contextlib.contextmanager\ndef patch_jax_version(version, release_version):\n    \"\"\"\n  Patch jax.version._version & jax.version._release_version in order to\n  test the version construction logic.\n  \"\"\"\n    original_version = jax.version._version\n    original_release_version = jax.version._release_version\n    jax.version._version = version\n    jax.version._release_version = release_version\n    try:\n        yield\n    finally:\n        jax.version._version = original_version\n        jax.version._release_version = original_release_version"
  },
  {
    "test_code": "@patch_jax_version('1.2.3', None)\ndef testVersionInNonRelease(self):\n    with assert_subprocess_call():\n        version = jax.version._get_version_string()\n    self.assertTrue(version.startswith('1.2.3.dev'))\n    self.assertValidVersion(version)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/version_test.py",
    "function": "@contextlib.contextmanager\ndef patch_jax_version(version, release_version):\n    \"\"\"\n  Patch jax.version._version & jax.version._release_version in order to\n  test the version construction logic.\n  \"\"\"\n    original_version = jax.version._version\n    original_release_version = jax.version._release_version\n    jax.version._version = version\n    jax.version._release_version = release_version\n    try:\n        yield\n    finally:\n        jax.version._version = original_version\n        jax.version._release_version = original_release_version"
  },
  {
    "test_code": "@patch_jax_version('1.2.3', '1.2.3.dev4567')\ndef testBuildVersionInRelease(self):\n    with assert_no_subprocess_call():\n        version = jax.version._get_version_for_build()\n    self.assertEqual(version, '1.2.3.dev4567')\n    self.assertValidVersion(version)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/version_test.py",
    "function": "@contextlib.contextmanager\ndef patch_jax_version(version, release_version):\n    \"\"\"\n  Patch jax.version._version & jax.version._release_version in order to\n  test the version construction logic.\n  \"\"\"\n    original_version = jax.version._version\n    original_release_version = jax.version._release_version\n    jax.version._version = version\n    jax.version._release_version = release_version\n    try:\n        yield\n    finally:\n        jax.version._version = original_version\n        jax.version._release_version = original_release_version"
  },
  {
    "test_code": "@jtu.thread_unsafe_test()\n@patch_jax_version('1.2.3', None)\ndef testBuildVersionFromEnvironment(self):\n    base_version = '1.2.3'\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE=None, JAX_NIGHTLY=None, JAXLIB_NIGHTLY=None):\n        with assert_subprocess_call():\n            version = jax.version._get_version_for_build()\n        self.assertTrue(version.startswith(f'{base_version}.dev'))\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE=None, JAX_NIGHTLY='1', JAXLIB_NIGHTLY=None):\n        with assert_no_subprocess_call():\n            version = jax.version._get_version_for_build()\n        datestring = datetime.date.today().strftime('%Y%m%d')\n        self.assertEqual(version, f'{base_version}.dev{datestring}')\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE=None, JAX_NIGHTLY=None, JAXLIB_NIGHTLY='1'):\n        with assert_no_subprocess_call():\n            version = jax.version._get_version_for_build()\n        datestring = datetime.date.today().strftime('%Y%m%d')\n        self.assertEqual(version, f'{base_version}.dev{datestring}')\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE='1', JAXLIB_RELEASE=None, JAX_NIGHTLY=None, JAXLIB_NIGHTLY=None):\n        with assert_no_subprocess_call():\n            version = jax.version._get_version_for_build()\n        self.assertEqual(version, base_version)\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE='1', JAX_NIGHTLY=None, JAXLIB_NIGHTLY=None):\n        with assert_no_subprocess_call():\n            version = jax.version._get_version_for_build()\n        self.assertEqual(version, base_version)\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE=None, JAX_NIGHTLY=None, JAXLIB_NIGHTLY=None, JAX_CUSTOM_VERSION_SUFFIX='test'):\n        with assert_subprocess_call(stdout=b'1731433958-1c0f1076e'):\n            version = jax.version._get_version_for_build()\n        self.assertTrue(version.startswith(f'{base_version}.dev'))\n        self.assertTrue(version.endswith('test'))\n        self.assertValidVersion(version)\n    with jtu.set_env(JAX_RELEASE=None, JAXLIB_RELEASE=None, JAX_NIGHTLY=None, JAXLIB_NIGHTLY='1', WHEEL_VERSION_SUFFIX='.dev20250101+1c0f1076erc1'):\n        with assert_no_subprocess_call():\n            version = jax.version._get_version_for_build()\n        self.assertEqual(version, f'{base_version}.dev20250101+1c0f1076erc1')\n        self.assertValidVersion(version)",
    "assertions": [],
    "test_file": "/var/folders/q5/p2sqhr0d6nqb_h8x_fxyxpz80000gn/T/tmp_1jzy6em/jax/tests/version_test.py",
    "function": "@contextlib.contextmanager\ndef patch_jax_version(version, release_version):\n    \"\"\"\n  Patch jax.version._version & jax.version._release_version in order to\n  test the version construction logic.\n  \"\"\"\n    original_version = jax.version._version\n    original_release_version = jax.version._release_version\n    jax.version._version = version\n    jax.version._release_version = release_version\n    try:\n        yield\n    finally:\n        jax.version._version = original_version\n        jax.version._release_version = original_release_version"
  }
]